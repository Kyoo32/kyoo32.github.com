<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[KyooBlog]]></title><description><![CDATA[그냥은 규원, 개발자로 큐의 블로그]]></description><link>https://kyoo32.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 15 Mar 2021 00:59:14 GMT</lastBuildDate><item><title><![CDATA[차]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/tea/</link><guid isPermaLink="false">https://kyoo32.github.io/tea/</guid><pubDate>Sun, 14 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;지난해 생일에는 비타민 같은 보조영양제를 많이 선물 받았는데, 올해는 차를 많이 선물 받았다. 지난 해가 코로나의 시작쯤이라 건강을 생각했다면, 올해는 길어지는 코로나와 재택으로 커피 아닌 선택지를 다들 주고 싶었나 보다. 작년 겨울쯤부터 집에서 차를 우려먹는 일이 많아졌다. 찻잎을 넣어 끓여먹는 방식이 아니라 티백으로 우려먹는다. 연말에 회사에서 차를 선물해주기도 했고, 회사 근처에 차 전문점이 있어서 재택 때 마시려고 몇 개 사 오기도 했다.&lt;/p&gt;
&lt;p&gt;선물 받은 티백까지 나는 요즘 차 부자다. 그리고 다양하게 많이 마시기도 한다. 확실히 차는 커피와 다른 산뜻함이 있다. 브레이크 타임을 ‘티타임’이라고 하는데, 커피타임이 아니라 티타임인 이유가 약간 짐작이 간다. 커피타임이라고 했다면 피곤한 상태를 카페인으로 연장하는 시간으로 느껴질 것이다.&lt;/p&gt;
&lt;p&gt;나는 생강이 재료로 들어가는 차를 제외하고 모두 잘 마시는데, 기분에 따라 차 종류를 선택한다. 평범한 기분에는 잉글리시 브랙퍼스트나 히비스커스처럼 차분한 티가 어울리고, 쳐지는 날에는 페퍼민트나 로즈마리 등 허브/꽃/과일 차가 기분을 낫게 해 준다. 최근에 가장 맛있는 차는 오설록의 차들인데, 종류의 특별함과 향과 맛의 진함이 독보적이다. 오설록은 아모레퍼시픽의 차 브랜드인데, 제주도의 테마와 재료를 많이 쓰는 것 같다. 가령 동백차라던지 유채차가 있는데, 발상이 흔하지 않은데 맛도 정말 좋다.&lt;/p&gt;
&lt;p&gt;&amp;#x3C;공작부인의 50가지 티 레시피&gt;라는 만화가 있다. 이 세계로 간 현대의 주인공의 유일한 취미는 차를 알게 되고 마시는 것이었다. 주인공이 사람들과 신뢰를 쌓고 호감을 얻는데, 상황에 맞는 차가 사용되는 설정이 더 공감이 간다. 요즘은 흥미가 떨어져서 저 작품은 보지 않지만, 차는 꾸준히 한 번씩 마신다.&lt;/p&gt;
&lt;p&gt;집이 아닌 외부에서 근래에 마신 차의 장소는 요가학원과 절, 그리고 회사 근처 차 전문점이었다. 요가학원은 녹차도 보이차도 한방차도 약간씩 느껴지는 차를 제공했는데, 요가 후에 주로 마셨다. 요가 후에 따뜻한 차를 마시면 순환에 더 좋다는 설명이었는데, 효과는 단언할 수 없지만 잘 어울리는 코스였다. 절에서는 스님이 다도에 녹차를 내려주셨는데, 장소와 쌀쌀한 날씨에 매우 잘 어울렸었다. 다도구를 보면 차 주전자나 차 컵을 구매하고 싶은 욕구가 솟는다. 공작부인도 차에 맞는 여러 모양의 다도구를 가지고 있고 말이다. 때마침 회사 근처의 차 전문점은 매우 예쁜 영국의 차 식기를 팔지만, 이사 올 때 우리 집에 가져온 녹색 차도구를 한 번도 사용하지 않은 사실을 떠올리며 욕구를 달랜다.&lt;/p&gt;
&lt;p&gt;집에서 차를 마실 때 유일한 단점은 스틱 커피보다 쓰레기가 습하고 크다는 것이다. 우려냈던 티백은 최대한 물기를 빼서 버리는데, 거의 매일 마시는 만큼 매일 귀찮다. 그래도 지금 있는 차들을 다 마셔도 또 구매할 것 같다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[시간이라는 자원]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/time/</link><guid isPermaLink="false">https://kyoo32.github.io/time/</guid><pubDate>Mon, 08 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;나는 뱅크샐러드라는 앱으로 돈의 흐름을 관리한다. 카드와 계좌 데이터 접근을 수락하여, 뱅샐에서 얼마나 들어오고 얼마나 쓰는지 확인한다. 또한 매달 예산도 금액과 카테고리 별로 정해놓고, 지키려고 한다. 본격적으로 쓴 건 아마 독립하면서 인데, 지금은 없어지면 삶이 매우 불편해지는 서비스가 되었다. 충성 사용자로 2년 정도 쓰니, 내가 돈이라는 자원을 어떻게 쓰면 좋을지 어느 정도 알게 되었다. 또한 변화가 있을 때 어떤 선택을 하는 게 좋을지 고민할 수 있게 되었다.(주식 이야기 아님) 이 정도가 되자 올해는 시간이라는 자원에 대해 생각해보려고 한다.&lt;/p&gt;
&lt;p&gt;이제 돈보다 시간이 귀해지는 시작점에 있는 것 같다. 물론 돈도 중요하지만, 시간이 더욱 귀중 해지는 것 같다. 최근 겪은 몇몇 일도 있고, 지난주에는 해인사에 가서 팔만대장경을 봤는데, 인간의 시간은 유한한 것 같다고 새삼 느꼈다. 그리고 길어봤자 100년이라니 정말 짧다. 그런데 우리는 약속한 숫자가 없다면 실내에서 시간을 잘 느끼지 못한다. 무색무취의 시간은 하늘과 태양의 변화나 꽃이나 단풍 같은 자연의 모양으로 약속하기 시작했다. 시공간의 개념에서 공간이 없는 건 디딜 수 있는 곳이 없다고 상상한다면, 시간은 아무런 변화가 없는 상태일 것이다.  &lt;/p&gt;
&lt;p&gt;먼저 뱅샐처럼, 인간이 약속한 시간 개념으로 내 시간 데이터를 살펴보기로 했다. 얼마나 있고, 무엇을 하며 보내는지 말이다. 일단 평일과 주말의 모습이 다르다. 공통점은 8시간 정도는 꼭 자야 한다는 것이다. 평일은 주로 회사에 쓰는 시간이 7시간 정도이다. 밥 먹고 생활적인 일을 빼면, 4시간 반 정도의 여유시간이 있다. 휴일에는 9시간 반 정도이다. 각각의 종류의 시간을 어떻게 쓸지는 삶에 대한 태도이기도 하고 돈처럼 마음먹는다고 항상 지켜질 수도 없다. 그래도 무언가 가이드는 있으면 좋을 것 같아서 요즘 시간을 어떻게 활용하면 좋을지 고민이다.&lt;/p&gt;
&lt;p&gt;다만 시간과 돈이라는 자원이 다른 점은 여유자원의 강제 할부 여부이다. 고정적으로 나가야 하는 집세나 자동차 관련 등이 아니라면, 나는 평소에 할부를 사용하지 않는다. 그런데 시간 자원은 대부분 할부로 저당 잡힌다. 잠이나 밥이나 회사일처럼 고정적인 시간도 물론이거니와, 중장기적인 여유 일은 미래의 시간을 미리 선점할 수밖에 없다. 책을 읽거나, 게임을 하거나, 특정 주제를 공부하거나, 프로젝트를 하거나 어느 정도의 시간이 든다. 물론 포기하는 방법도 있지만, 끝을 보려면 밤을 새우지 않는 이상 미래의 어느 시간들을 예약해둔다. 그 시간이 되어 그 일을 할 수도 있고, 안 하고 작심삼일이라며 후회하기도 한다.&lt;/p&gt;
&lt;p&gt;효율이라고 붙일 수 있을지 모르지만, 시간의 여유자원을 잘 쓰는 법은 적당한 미래시간을 찾고, 그 시간에 그 일을 하는 것 같다. 돈 자원처럼 몇년정도 관리를 해봐야 잘 할 수 있을 것 같다. 시간도 뱅샐같이 유용한 도움을 주는 서비스가 어디 없을까?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[iOS 개발 일을 한다는 것]]></title><description><![CDATA[새로운 근로계약서에 서명하는 요즘, 돌아보니 벌써 5번째 싸인이다. 개발 공부를 시작할 때 밥벌이를 하며 이렇게 진지하게 5년 차가 될지도 몰랐고, 지금은 1…]]></description><link>https://kyoo32.github.io/AsiOSDeveloper/</link><guid isPermaLink="false">https://kyoo32.github.io/AsiOSDeveloper/</guid><pubDate>Mon, 22 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;새로운 근로계약서에 서명하는 요즘, 돌아보니 벌써 5번째 싸인이다. 개발 공부를 시작할 때 밥벌이를 하며 이렇게 진지하게 5년 차가 될지도 몰랐고, 지금은 10년만 해야지 라는 생각을 자주 한다. 이 생각이 미래가 된다면 나는 개발 일을 반 정도 했고, 이제 후반전이 남았다. 기한을 생각한 것은 개발일이 싫기 때문이 아니라, 더 재밌고 나에게 맞는 일을 해보고 싶기 때문이다. 오히려 첫 직업으로 개발 일을 하게 되어 기쁘다고 생각한다.&lt;/p&gt;
&lt;p&gt;개발을 처음 접했을 때 매력 있었던 이유는 세상에 없던 무언가를 쉽게 만들 수 있고 의지가 있다면 평생 더 좋게 만들 수 있다는 점이었다. 3D 프린터로 조금 수월해지긴 했지만, 소프트웨어는 물리적인 실체가 있는 제품에 비해 생성과 수정이 쉽다. 아이디어나 생각이 있다면, 맥북과 함께 당장 만들기 시작할 수 있다. 그리고 보이스카웃이 왔던 캠핑장을 떠날 때 그 자리를 더 깨끗하게 만드는 것처럼, 의지가 있다면 더 깔끔하고 성능이 좋은 제품이 될 수 있다. &lt;/p&gt;
&lt;p&gt;이에 4년간 개발, 그중에서도 iOS 개발, 일을 하면서 느끼고 배운 점을 하프인 지금 간단히 적어보려고 한다. 개발 일이 좋은 점은 정량적인 평가가 가능하다는 것이다. 회사에서 진행되는 정성적인 평가를 제외하고, 코드 자체만 보면 어떤 선택이 더 좋은 지 비교가 가능하다. 비교의 기준과 추구하는 방향에 따라 평가 결과가 달라지지만, 개인별로 혹은 팀별로 기준과 방향을 지지한다면 일의 결과물인 코드도 평가할 수 있다. &lt;/p&gt;
&lt;p&gt;예를 들어, 나는 코드를 볼 때 중복과 불필요한 라인이 없는 지를 가장 중요시 여기는 데, 나의 관점에서 동일한 동작이 다섯 번 중복된 코드 파일과 두 번 중복된 코드 파일 중 누가 더 좋은 지 결정할 수 있다. 여기서 개발 일에 지지받은 심리적인 안정감이나 만족감을 주려면, 코드 평가가 사람에 대한 것이 아니라 코드와 작성자의 발전을 위한 것임을 유념하면 된다. 어쩌면 운이 좋은 것일 수도 있는데, 나는 지난 4년 중 3년 3개월 정도는 이렇게 일할 수 있었다. &lt;/p&gt;
&lt;p&gt;iOS를 개발하면서 배운 점은 기존의 코어를 유지하면서 계속 확장하는 선택이다. 사용자가 관리를 잘한다면 현재도 iPhoneSE에서 iOS14를 사용할 수 있는 것처럼, 공급자인 애플은 과거를 유지하면서도 새로움을 추가한다. 개발자로서 프로그램을 마음대로 업데이트해서 가끔 불만이기도 하지만, 애플은 개발 프로그램부터 사용자 소프트웨어까지, 시계부터 먼 미래의 자동차까지, 과거의 OS부터 최근의 OS까지 생태계 건축을 잘한다. 정치체제에 비유한다면 초엘리트에 의한 군주정치제도라고 할 수 있을 정도로, 애플은 내부의 권력이 잘 집중되어 있고 외부에 배타적인 회사이다.&lt;/p&gt;
&lt;p&gt;애플의 생태계를 자주 리서치해서 그런지, 개발을 할 때도 삶의 선택을 할 때도, 과거에서 지켜야 할 것은 무엇이고 과감히 버려야 할 것은 무엇인지 고민하게 된다. 선택지는 한정되어 있지만, 주어진 상황 내에서 나가려는 방향에 잘 통합될 수 있는 길을 고려하게 된다. 예를 들어, 비슷한 일을 하지만 OS 지원 버전이 다른 두 개의 사이드 앱을 두고, 각자 유지할 것인지 하나로 합치는 게 좋을지 고민한다. 결정은 한 가지이므로 선택지별로 결과의 성공을 비교할 수는 없지만, 선택지의 조건과 영향을 최대한 생각해보려고 한다. &lt;/p&gt;
&lt;p&gt;지난 4년간 경험한 발전을 위한 정량적인 평가와 선택할 때 태도는 앞으로 무슨 일을 하든, 어떤 분야든 잘 발견할 수 있으면 좋겠다. (특히 국회나 고위 행정부…) 그리고 개발 일의 아쉬운 점도 분명히 있다. 언제가 될지 모르겠지만 5년 안에 써봐야겠다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[인생의 변화 카드]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/transformationAges/</link><guid isPermaLink="false">https://kyoo32.github.io/transformationAges/</guid><pubDate>Mon, 15 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;평생 운의 총량이 정해져 있다고 할 때, 운을 크게 몰아서 받겠는가? 조금씩 자주 받겠는가? 전자는 취업이나 로또, 청약 등 큰 일에 행운이 많지만, 신호등 신호라든지 이벤트 추첨 등 작은 이벤트에서 운은 없다. 후자는 큰 일은 자신이 책임져야 하지만, 신호등의 초록불 타이밍, 길가다 만원을 주을 확률 등 매일매일의 운이 높다.&lt;/p&gt;
&lt;p&gt;익숙하게 바꾸면, 그나마 더 행복할 것 같은 삶의 모습이 ‘가늘고 길게’인지 ‘짧고 굵게’인지 이다. 또 가늘도 길게가 안전추구형이라면, 짧고 굵게는 모험추구형이라고 할 수 있다. 가늘고 긴 삶이 전체적으로 더 행복할 거라고 생각하지만, 당연히 순간순간의 깊이는 얕을 수 있을 것 같다. 나는 20대 초반을 제외하고 안전추구형에 더 가까운 것 같다.&lt;/p&gt;
&lt;p&gt;최근 가족 모두의 거주지를 한 곳으로 모으자는 시도가 있어서, 내가 사는 곳 근처의 아파트 매물을 많이 보고 부동산 시장에 대한 유튜브도 많이 보았다. 아파트의 모양부터 가격 요인까지, 한국은 다수의 삶이 어쩜 그리 비슷할까. 어쩐지 그 아파트들에서 나의 30대, 40대의 모습이 그려지는 기시감까지 들었다.&lt;/p&gt;
&lt;p&gt;가늘고 길게 살다 보면, 언젠가 비슷한 모양의 아파트를 빚과 함께 사고, 언젠가 초등학교 위치를 따지며 이사를 하면서 그렇게 남들과 비슷하게 살게 되지 않을까? 물론 평범하고 비슷하게 보이는 일부터 매우 대단하고 어려운 일이지만, 실제로 그렇게 산다면 남은 인생을 거의 스포 당해 버린 기분일 것이다.&lt;/p&gt;
&lt;p&gt;나의 극적추구 성향이 최근의 경험과 경계 때문에 매년 그러하듯 돌아온 것 일 수도 있고, 몇 년간 나의 안정적인 삶에 지루함이 심하게 넘치고 있는 것일 수 도 있다. 평소에도 소소하게 새로운 일을 벌이지만, 이벤트가 일상을 바꾼 적은 한 번도 없다. 인생에서 짧고 굵게 카드를 10년에 한 번씩 쓴다고 하면, 곧 그 시기가 온다. 어떻게 쓰면 나에게 좋고, 잘 썼다고 소문이 날까?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[싱어게인]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/SingAgain/</link><guid isPermaLink="false">https://kyoo32.github.io/SingAgain/</guid><pubDate>Mon, 08 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;월요일을 손꼽아 기다리게 만드는 한국의 방송 프로그램이 있다. 싱어게인 이라는 노래 경연 프로그램이다. 음악 예능은 전례도 현재도 많아서, 시큰둥할 수 있지만, 이 프로그램은 무언가 다르다. 일단 노래를 부르는 사람을 하나의 재밌는 문제로 다루지 않는다. 이 사람이 누구일까? 음치일까? 같은 수수께끼 문제가 아니라, 한 명의 가수로 생각한다. 가수이긴 하지만, 싱어게인은 일명 ‘무명가수전’이다. 캐치프레이즈도 ‘나를 다시 노래하다’이다.&lt;/p&gt;
&lt;p&gt;무명이라 처음엔 이름이 아닌 호수로 불렸다. 30호, 63호님 등등. 무명이지만 모두 앨범을 낸 가수들이라 실력은 말할 것도 없는데, 회를 거듭할수록 경연이 아니라 공연처럼 느껴졌다. 유희열 등 심사의원도 있는데, 가끔 관객처럼 보일 때도 있었다. 콘서트부터 작은 버스킹까지 편히 즐길 수 없는 요즘이라 그런지, 싱어게인은 경연보다 노래를 들으러 간다. 이번 회는 몇 호가 어떤 곡을 어떻게 불렀을지 궁금했다. 그런 가수들이 여댓명이 있다.&lt;/p&gt;
&lt;p&gt;싱어게인의 포맷을 보면서 느낀 점이 있다. 재능 있는 사람은 많고, 그런 사람도 자신만의 길로 무언가 계속해야 한다는 것이다. 싱어게인은 71팀으로 시작했는데, 71팀을 뽑기 위해서 적어도 140팀은 오디션을 봤을 거라고 생각한다. 71팀 중 어떤 사람의 히트곡은 매우 유명하고, 어떤 곡은 생소하다. 어떤 사람은 누구나 이름을 아는 유명가수였고, 누군가는 인디한 모르는 사람이었다. 일단 재능이 있어야 오디션을 볼 수 있는데, 생각보다 참가자가 많은 오디션장에서 뽑혀도 계속 무언가를 해야 한다.&lt;/p&gt;
&lt;p&gt;과거에 어떤 유명한 곡을 불렀고, 얼마만큼 유명했는지는 오디션까지만 중요하다. 나에게 멋진 노래를 주지만, 라운드가 올라가면 이전의 노래는 다음 라운드 판정에 영향을 주지 않는다. 이 경연이 끝이 날 때까지 라운드마다 자신의 색깔과 재능을 뽐내야 한다. 경연의 끝이 바로 오늘 2월 8일 월요일 저녁 10시 반이다. 한 명만의 우승을 응원하는 게 아니라, 마지막이라는 아쉬움과 어떤 노래가 나올지 기대감을 가지고 오늘 밤을 기다리고 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[운전 연수 경험기]]></title><description><![CDATA[작년 하반기부터 이제 운전한다고 한 달에 한 번은 말했는데, 이것저것에 밀려 면허가 장롱에서 나오질 않았다. 새해 트리거와 지인 소개가 맞물려 운전 연수를 시작했다! 경력이라 하기에 웃기지만, 나는 장롱면허…]]></description><link>https://kyoo32.github.io/drivingPractice/</link><guid isPermaLink="false">https://kyoo32.github.io/drivingPractice/</guid><pubDate>Mon, 25 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;작년 하반기부터 이제 운전한다고 한 달에 한 번은 말했는데, 이것저것에 밀려 면허가 장롱에서 나오질 않았다. 새해 트리거와 지인 소개가 맞물려 운전 연수를 시작했다!&lt;/p&gt;
&lt;p&gt;경력이라 하기에 웃기지만, 나는 장롱면허 7년차다. 나 정도 되면, 깜빡이나 라이트 조정이 각각 레버의 어느 쪽인지 헷갈린다. 그래도 필기니 실기니 딱딱한 시험 없이, 내가 원하는 만큼 하고 싶은 방식으로 익힐 수 있어 좋다. 연수 전날 밤에 유튜브로 관련 콘텐츠를 엄청 보았다. 그리고 ‘parking king’이라는 자동차 시뮬레이션 앱 게임을 엄청 했다. 각각 필기와 실기랄까, 두 개를 꽤 해가니 연수 때 완전 바보는 아니었다.&lt;/p&gt;
&lt;p&gt;토요일 오전에 내가 사는 지역구를 두 시간 돌았다. 연수는 강사를 잘 만나는 게 정말 중요한데, 나는 만족한다. 첫인상의 담배냄새는 별로였는데, 운전 연수하시는 동안 인상 한번 안 찌푸리시고, 웃으시면서 상황에 맞는 여러 설명을 잘해주셨다. 그리고 지역구에서 운전별로 잘 맞는 길을 안내해 준 것도 좋았다.&lt;/p&gt;
&lt;p&gt;첫 연수는 기본 감각을 익히는 연습이었다. 브레이크는 언제 밟아야 제동거리가 맞을지, 엑셀은 어느 정도 어떻게 밟아야 좋을지, 차의 중앙은 어디로 어떻게 맞추는지 등 엑셀과 브레이크, 스티어링 힐로만 이루어진 연습이었다. 한 시간 정도 큰 도로를 왔다 갔다 하니, 할만하네라고 생각했는데, 주택가 골목으로 들어가니 포장된 큰 도로가 자동차 입장에서 매우 좋다는 걸 깨달았다. 앞으로 초보 딱지를 뗄 때까지 어디든 주의 깊게 운전해야겠다고 생각했다.&lt;/p&gt;
&lt;p&gt;연수가 끝나니 오른쪽 허벅지부터 등까지 결리고 아팠다. 약간의 긴장 속에서 반복적으로 근육을 써서 그런 것 같다. 오른 다리를 휴식해주도 있지만, parking king 게임도 계속하고 글이든 영상이든 자동차 콘텐츠를 많이 찾아보고 있다. 다음 주말의 다음 연수가 기대된다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[매일 하는 일]]></title><description><![CDATA[새해의 부지런함을 빌려,…]]></description><link>https://kyoo32.github.io/routine/</link><guid isPermaLink="false">https://kyoo32.github.io/routine/</guid><pubDate>Mon, 18 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;새해의 부지런함을 빌려, 1월부터 내가 매일 하는 것들이 있다. 전동칫솔질 하기, 모닝요가하고 물 마시기, 말해보카라는 앱으로 영어공부하기, 경제관련 유투브 하나 이상 보기, 자기 전에 글 읽기 등.&lt;/p&gt;
&lt;p&gt;전동칫솔은 처음 써보는 데, 처음엔 칫솔 목으로 반대 치아를 치는 실수가 있었지만, 이제는 손양치로 돌아갈 수 없게 되었다. 반질반질 깨끗하게 잘 닦이고, 시간도 2분밖에 걸리지 않는다. 매일 하는 행동의 제품은 좋은 걸 써야, 스트레스가 매일같이 쌓이지 않는다고 믿는데 칫솔은 전자제품으로 구체화됐다.&lt;/p&gt;
&lt;p&gt;작년에 코로나로 요가학원을 갈 수 있었다가 없었다가, 상황이 계속 바뀌니, 운동 전부터 피로가 쌓였었다. 운영하시고 가르치는 분들의 힘듦에 비하면 작은 수준이지만, 학원을 갈 수 있는지, 열은 나지 않는지, 마스크는 뭐가 적당할지, 운동 전부터 준비해야 할 게 많았다. 그래서 새해부터는 홈요가/홈트를 하기로 했다. 지금은 아침에 일어나서 유투버 요가소년의 영상을 틀어놓고, 가이드의 큰 틀을 따라 나의 동작들을 하고 있다.&lt;/p&gt;
&lt;p&gt;그리고 폰으로 매일 영어공부도 하고, 책이든 기사든 글을 읽고, 경제 분석하는 영상을 하나 이상 보고 있다. 단체 멤버십으로 무려 결제까지 한 영어공부 앱은 매우 똑똑해서 마음에 든다. 그리고 뭔가 유치원생도 좋아할 것 같은 친근한(?) UI는 매일 쓰게 되는 동력이다. 사실 이 앱 덕분에 다른 루틴들이 잘 자리 잡고 있다.&lt;/p&gt;
&lt;p&gt;연도라는 게 추상적인 개념이고, 한국사람들은 계절의 변화로 체감하지만, 올해의 루틴들은 웬일인지 게으름의 저항 없이 아직 잘 지켜져 가고 있다. 코로나로 단조로운 생활에 익숙해져 버린 걸까, 이제 규칙적인 삶이 어울리는 나이가 되어버린 걸까. 내가 생각한 하나의 가설은 루틴은 나만이 아니라 요즘 20/30대들의 행태이고, 정보가 풍부하기 때문에 가능한 게 아닐까 이다. 과거에는 매일 루틴을 한다는 게 지루해 보이고, 철학자 칸트 같은 사람만 한다고 생각했었다. 하지만 재밌는 거리는 넘쳐나고, 마음만 먹으면 과거에 비해 쉽게 할 수 있다. 재미가 쉬워지만, 일상이 깨질 필요가 없다. 그리고 일상이 규칙적인 게 이 세상을 살아가는 데 필수적이라는 것을 우리는 미디어를 통해서 무의식적으로 알고 있다.&lt;/p&gt;
&lt;p&gt;나만의 가설이라고 생각했는데, 최근 데이터가 있는 비슷한 주장의 글을 읽어서 놀랍고 무언가 씁쓸했다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;밀레니얼은 투명한 세상에서 태어났어요. 어릴 때부터 일탈할 수 없는 환경에서 자랐습니다. 부모에게 동선이 공개되니 학원 땡땡이도 안되고, 학교에서 친구들에게 막 대해도 안 돼요. ‘일진’으로 신상(身上) 털려 곤욕을 치르는 유명인들을 얼마나 많이 봤어요. 몸으로 규칙 준수를 배웠으니 감수성의 레벨이 다르죠. 그 와중에 사회 전체가 코로나 방역 과정에서 더 많은 규칙을 생존의 문화로 받아들였잖아요.
&lt;a href=&quot;https://biz.chosun.com/site/data/html_dir/2021/01/12/2021011202335.html&quot;&gt;“진정성 사회 가속화… 개인도 기업도 룰 지켜야 생존한다”&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[김초엽 입문하기]]></title><description><![CDATA[지난해 말 <서울리뷰오브북스>의 책자 소설 “선인장 끌어안기”를 재밌게 읽어서, 주말에 김초엽 작가의 최근 단편집인 <우리가 빛의 속도로 갈 수 없다면>을 읽었다. 이 책은 201…]]></description><link>https://kyoo32.github.io/fallingInCho/</link><guid isPermaLink="false">https://kyoo32.github.io/fallingInCho/</guid><pubDate>Mon, 11 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;지난해 말 &amp;#x3C;서울리뷰오브북스&gt;의 책자 소설 “선인장 끌어안기”를 재밌게 읽어서, 주말에 김초엽 작가의 최근 단편집인 &amp;#x3C;우리가 빛의 속도로 갈 수 없다면&gt;을 읽었다. 이 책은 2019년에 나왔는데, 그때도 지금도 많이 주목받고 있다. 한국 소설을 일 년에 한편 정도 보는 나는 화제가 되어도 읽을 마음이 없었다.&lt;/p&gt;
&lt;p&gt;공대에서 석사까지 마친 작가는 과학을 재료로 한국의 새 SF언어를 만들어 냈다고 평가받는다. 누군가는 “SF소설도 아름다울 수 있다”는 걸 증명한 장르라고 말하기도 한다. 올해 벌써 여러 편의 한국소설을 읽어버린 나는 김초엽을 시작으로 많이 언급되는 다른 한국 소설들도 읽어보고 싶어 졌다.&lt;/p&gt;
&lt;p&gt;김초엽의 &amp;#x3C;우리가 빛의 속도로 갈 수 없다면&gt;은 단편집인데, 단편은 모두 공통점이 있다. 성별이 여성인 전문가가 주인공이든 핵심인물로 나온다. 그리고  새로운 사실을 알아버리는 인물이 소설을 이끈다. 인물이 알아내는 새로운 사실들은 너무 인간적이고 따뜻하여 겨울에 읽어서 더 좋았다는 생각까지 든다.&lt;/p&gt;
&lt;p&gt;김초엽은 나보다 한 살 많은 데, 작가가 &amp;#x3C;2020 서울국제도서전&gt;에서 말하길, 본인의 독자층은 종이책은 절반 이상이, 전자책은 80퍼센트 이상이 20-30대 여성이라고 한다. 나는 어쩌면 이 책이 &amp;#x3C;82년생 김지영&gt;에게 답을 해주는 책이라고 생각한다. 1978년 생인 조남주 작가는 자신의 세대가 겪은 일을 리얼하게 남겼고, 질문을 던졌다. 1993년 생인 김초엽은 우리가 지켜야 할 게 무엇이고, 어디로 어떻게 나아가면 좋을지 SF로, 하나의 답이 되었다. 따라서 미래를 그리지만, ‘동시대적 SF’라는 모순적인 형용을 받는다.&lt;/p&gt;
&lt;p&gt;김초엽 단편의 인물들은 우리가 지켜야 할 소중한 가치를 품고, 전문적이고 끈기 있고 따뜻하게 세상을 살아간다. 나를 포함해 주 독자층인 20-30대 여성들도 지켜야 할 가치를 가지고, 전문적이면서도 따뜻한 시선으로 세상을 살아가고 싶은 게 아닐까. 그러자 &amp;#x3C;랩 걸&gt;부터 &amp;#x3C;세상을 연결한 여성들&gt;까지 실존하는 혹은 실존했던 여러 분야의 전문가들이 생각나기도 했다. 세상을 비난하는 게 아니라, 비판적인 사고와 따뜻한 시선을 가진 사람들이 점점 많아진다면, 김초엽이 추가한 새로운 언어처럼 세상도 다채로워지지 않을까 기대된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Kyoo Award 2020]]></title><description><![CDATA[코로나 사회적 거리두기로 연말 같지 않던 2020년이 끝났고, 2021년의 연초도 특별함 없이 부지런히 가고 있다. 회고도 좋지만, 스스로 격려하는 의미에서 Kyoo award를 해볼까 한다. 2020 상반기 키워드 : 동물의 숲 202…]]></description><link>https://kyoo32.github.io/kyooAward2020/</link><guid isPermaLink="false">https://kyoo32.github.io/kyooAward2020/</guid><pubDate>Mon, 04 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;코로나 사회적 거리두기로 연말 같지 않던 2020년이 끝났고, 2021년의 연초도 특별함 없이 부지런히 가고 있다. 회고도 좋지만, 스스로 격려하는 의미에서 Kyoo award를 해볼까 한다.&lt;/p&gt;
&lt;h4&gt;2020 상반기 키워드 : 동물의 숲&lt;/h4&gt;
&lt;h4&gt;2020 하반기 키워드 : 고양이 임보&lt;/h4&gt;
&lt;h4&gt;2020 여행지 : 담양&lt;/h4&gt;
&lt;h4&gt;잘한 일 소셜 부문 : 월요 블로그 모임에 참여한 것&lt;/h4&gt;
&lt;h4&gt;잘한 일 경제 부문 : 주거 대출 원리금을 원하는 이자 수준까지 상환한 것&lt;/h4&gt;
&lt;h4&gt;잘한 일 생활 부문 : 3개월간의 금주, 지름 하지 않음&lt;/h4&gt;
&lt;h4&gt;잘한 일 가족 부문 : 할머니 댁에 자주 다녀온 것, 곶감을 지인에게 팔아준 것&lt;/h4&gt;
&lt;h4&gt;슬픈 일 소셜 부문 : 아픈 주위 사람들의 소식, 오래 참여한 독서모임이 코로나로 와해된 것&lt;/h4&gt;
&lt;h4&gt;아쉬운 일 경제 부문 : 재테크 공부를 진득하게 안 함&lt;/h4&gt;
&lt;h4&gt;아쉬운 일 생활 부문 : 운동을 열심히 안 함&lt;/h4&gt;
&lt;h4&gt;아쉬운 일 가족 부문 : 임보 고양이를 제대로 소개하지 못함&lt;/h4&gt;</content:encoded></item><item><title><![CDATA[<서울리뷰오브북스> 리뷰]]></title><description><![CDATA[2020년은 진득하게 읽은 책이 1…]]></description><link>https://kyoo32.github.io/ReviewSeoulOfBooks/</link><guid isPermaLink="false">https://kyoo32.github.io/ReviewSeoulOfBooks/</guid><pubDate>Mon, 28 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2020년은 진득하게 읽은 책이 10권도 안되어, 그 원인과 해결방안을 내어보려 했다. 바뀐 루틴에 따라 전자책과 오디오북을 시도해 보았는데, 양은 나쁘지 않으나 예고편을 많이 본 느낌이다.&lt;/p&gt;
&lt;p&gt;최근 다시 종이책을 사기 시작하면서 느낀 점이, 내 집중시간은 줄어드는데 알아보아할 신간은 여전히 많다는 것이다. 신간 리뷰 뉴스레터도 있고, 책 튜버도 많지만 이 또한 알아보고 적응이 필요하다.&lt;/p&gt;
&lt;p&gt;이런 나에게 매우 반가운 &amp;#x3C;서울리뷰오브북스&gt;! 작가 김초엽, 김혼비부터 교수 박상현, 김두얼, 김영민까지 평소 글로 알던 사람들이 서평 잡지를 냈다. 내년부터 정식으로 시작하고, 나는 펀딩으로 0호를 받았다. 0호는 2020년의 코로나19를 돌아보는 큰 주제가 있다.&lt;/p&gt;
&lt;p&gt;잡지는 크게 이슈리뷰와 리뷰로 나누어져 있다. 이슈리뷰는 하나의 주제에 대해 각 분야의 전문가들이 책을 서평 하고, 리뷰는 자유로운 서평들이다. 먼저 잡지를 읽으면서 신경 쓰인 것은 사소하지만 폰트이다.&lt;/p&gt;
&lt;p&gt;왜 이슈리뷰는 산리프체인데 리뷰는 프롤로그와 같은 단순한 폰트일까? 개인적으로 단순한 폰트는 짧고 가벼운 글에, 예를 들어 프롤로그, 좋다고 생각하는데, 리뷰 섹션의 글에는 안 어울리고 가독성을 떨어뜨린다.&lt;/p&gt;
&lt;p&gt;이슈리뷰의 주제는 코로나19인데, 첫 두 서평은 평범하고 익숙했다. 경제와 방역에 대한, 그리고 전반적으로 상황을 다룬 글이다. 2020년을 돌아보기에 적절한 소개들이었다. 놀라움은 그다음 서평들부터이다.&lt;/p&gt;
&lt;p&gt;그다음 서평들은 전문가들이 코로나19를 자신의 분야에 가져와서 남긴 글인데, 앞 두 글과 다르게 깊은 충격을 준다. 내가 해당 분야들에 문외한이라 그런 걸 수도 있지만, 코로나19를 이런 방면으로 볼 수도 있구나 알게 된다.&lt;/p&gt;
&lt;p&gt;건축, 사회학, 가족, 경제, 미디어 분야의 서평들인데, 쏜살같이 가버린 2020년처럼 생각할 시간도 없이 현재를 급하게 잊어버리지 않게 되었다. 내가 할 수 있는 건 없지만, 기억하고 이렇게 글은 남길 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;예를 들어 ‘정크 스페이스’라는 개념을 소개한 건축서평은 코로나19로 인해 우리 공간이 어떤 모습으로 더욱 변화되고 있는지 어렴풋이 알려준다. “고정되지 않은 공간은 언제나 ‘현재’이며, 시간이 쌓이지 않기에 건축과 결별한다.”라고 말한다. (건축서평의 자세한 설명이든, 다른 분야의 서평이든 지면을 할애할 생각은 없으므로, 궁금한 사람은 사서 읽어보거나 나에게 빌려보길 바란다.)&lt;/p&gt;
&lt;p&gt;또 0호만의 특별판인지 모르겠지만, 부록으로 간단한 소설과 에세이 모음집이 왔다. 김영민, 김혼비, 박솔뫼, 김초엽까지 알만한 작가들의 글인데, 실패가 없다. 특히 김초엽의 ‘선인장 끌어안기’는 접촉이 줄어든 시대에 맞는 소설로, 잡지의 마무리로 감동과 재미의 감정까지 주는 사기 캐릭터 소설이다.&lt;/p&gt;
&lt;p&gt;다른 나라에는 서평지의 역사가 꽤 되었다고 하는데, 한국은 이로써 시작된다고 한다. 나는 0호를 읽게 되어 좋았고, 서평지와 함께할 2021년이 기대된다. 또 깨닫게 된 건 나의 줄어든 독서는 다독이 아니라 흐름을 갖는 종적인 독서라는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/103202226-2ce17700-4935-11eb-98a5-d79cb6fad1a6.jpg&quot; alt=&quot;IMG_5475&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[곶감 이야기]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/Persimmon/</link><guid isPermaLink="false">https://kyoo32.github.io/Persimmon/</guid><pubDate>Mon, 21 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;지난 일주일간 내가 가장 자주 많이 생각한 단어는 곶감이다. 뜬금없지만, 감을 말린 겨울 간식인 그 곶감이 맞다.&lt;/p&gt;
&lt;p&gt;나의 외가는 매년 곶감을 만들어서, 가족끼리 나눠 먹고 남은 건 지역 시장에 도매로 판다. 올해 곶감을 평소보다 조금 더 만들어서, 도매뿐 아니라 수도권에 직판을 해보면 좋겠다는 의견이 나왔다. 나는 그래서 직판의 클라이언트(?)를 부탁받아 맡게 되었다.&lt;/p&gt;
&lt;p&gt;내가 맞은 역할은 한마디로 영업과 판매이다. 사람이 많이 드나드는 채널을 찾고, 곶감을 소개하고 주문까지 완료할 수 있도록 유도하는 역할이다. 접수를 확인하고, 포장하여 배송하는 건 다른 가족 구성원들이 각각 한다. &lt;/p&gt;
&lt;p&gt;작년까지 너무 당연하게 소비자로서 먹고 즐기기만 했는데, 올해는 소비도 하고 판매도 하니 신경 쓰고 알아볼게 많아진다. 나는 그동안 무료로 선물 받은 곶감의 답례로 일하고 있는데, 생각보다 힘은 들지만 새로운 사실도 많이 알게 되고 간단히 하는 사이드 프로젝트라 다행히 재미도 있다.&lt;/p&gt;
&lt;p&gt;독점이 아닌 무언가를 팔려면 동일한 제품을 시장에서 찾아, 어떤 특징이 다른 제품에 비해 돋보일 수 있는지 찾으면 좋을 듯하다. 내가 파는 곶감은 다른 곶감처럼 낱개가 플라스틱에 포장되어 있지 않고, 한 접 그대로 배송된다. 그럼 선물하기에 비주얼이 멋지고, 가성비도 좋고, 곶감의 접 개념을 경험해볼 수 있다. &lt;/p&gt;
&lt;p&gt;이번에 판매하게 되면서, 외가가 있는 경상도 함양지역만 곶감을 접 채로 판다는 것을 알게 되었다. 나는 다른 지역도 접 채로 팔 수 있지만, 그냥 포장을 더 멋지게 하려는 줄 알았다. 또한 곶감도 김치처럼 지역에 따라 조금씩 만드는 방법이 다르며, 결과물도 조금씩 다르다는 것을 알았다.&lt;/p&gt;
&lt;p&gt;그래서 나의 판매는 잘 될까? 내년에도 하게 될까? 외국인들은 곶감을 알까? 도토리묵을 젤리라고 하던 미국에서 오래 산 고등학교 동창이 생각난다. 올해 잘되면 영어 버전도 만들어서 외국인에게도 팔아볼까? 완전히 다른 분야의 사이드 프로젝트(?)이지만, 2주간 재미있는 첫 시도를 하고 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/102729824-adbcd380-4375-11eb-9d94-64600acbffb2.JPG&quot; alt=&quot;IMG_4645&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[새해계획]]></title><description><![CDATA[벌써 1…]]></description><link>https://kyoo32.github.io/newYearPlan/</link><guid isPermaLink="false">https://kyoo32.github.io/newYearPlan/</guid><pubDate>Mon, 14 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;벌써 12월의 중순이고, 첫눈이라고 기억될 만한 눈도 펑펑 왔다. 이 쯤되면 올해를 돌아보고 새해를 계획하기 시작한다. 내가 올해 초에 세운 계획은 얼마나 어떻게 지켰는지, 새해엔 어떤 걸 이루고 싶은지 등을 확인한다. 그런데 사실 매해 달성률(?)은 비슷하다. 새해에는 의욕에 차서, 이루고 싶은 걸 왕창 계획해 놓는다. 그리고 시간이 지나면서 가능한 것만 가까스로 달성한다. 연말에는 모든 계획이 지켜지지 않았고, 어느 정도 그럭저럭 잘 지켜진 것을 확인한다.&lt;/p&gt;
&lt;p&gt;어쩔 수 없는 게, 일 년이라는 단위는 꽤 커서 예측 불가능한 이벤트가 일어난다. 가족의 이벤트든지, 회사의 이벤트든지, 개인의 이벤트가 말이다. 사건이 발생한 일상에서 일 년의 계획은 잊히기 쉽고, 시간을 할당하기에 더욱 어렵다.&lt;/p&gt;
&lt;p&gt;그러나 새해 계획은 그래도 나에게 의미가 있다. 연말이 되면 추위와 함께 어떤 각성이 생겨, 일 년 열두 달 중 가장 이성적으로 이상적인 생각을 한다. 이 때는 행동에 관련된 책이나, 참고할 만한 현대 사람의 책을 많이 읽기도 한다. 이런 독서와 생각을 바탕으로 나는 올해 어땠는지, 내년엔 어떤 행동을 많이 하면 좋을지, 일종의 개인 컨설팅을 하는 것이다. 당연히 완벽히 지켜지지는 않지만, 새해의 방향은 얼추 맞추어진다. 예를 들어, 어떤 해는 그냥 경험을 많이 하자는 기본 생각이 있었고, 그 해는 정말 앞뒤 생각보다 당장의 즐거운 경험들을 많이 했다.&lt;/p&gt;
&lt;p&gt;아직 올해와 새해는 확인하고, 어떤 모습일지 생각하고 있다. 대신 추천받은 행동 관련 책을 읽고 읽다. 무려(?) 스탠퍼드대학교 행동설계연구소장 BJ 포그가 지은 &amp;#x3C;습관의 디테일&gt; 이다. 저자의 후광에 비해 하는 말은 간단하다. 습관의 디테일은 행동은 동기와 능력과 자극이 있을 때 이루어진다고 말한다. 그리고 저자와 설명의 태도가 아주 유용하다. 저자는 우리가 계획에 실패하는 이유는 우리가 아니라고 말한다. 변화를 만드는 접근방법이 문제라고 말한다. 그러면서 현재 내 모습과 내가 되고 싶은 모습 사이의 격차를 줄일 수 있는 쉽고 즐거운 과학적인 방법을 제안한다. 행동의 핵심은 동기와 의지가 아니라고도 말한다. 내용은 간단하지만 저자의 태도가 마음에 들기 때문에, 새해 계획은 이 책을 다 읽어본 후 세워보려고 한다. 어쩌면 내년엔 최고의 달성률을 볼 지도 모르겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[훠궈 예찬]]></title><description><![CDATA[요즘 자주 만들어 먹으면서, 좋아하는 음식은 훠궈이다. 래퍼 이영지가 어느 날 훠궈에 빠져 한 달에 2…]]></description><link>https://kyoo32.github.io/HotPot/</link><guid isPermaLink="false">https://kyoo32.github.io/HotPot/</guid><pubDate>Mon, 07 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;요즘 자주 만들어 먹으면서, 좋아하는 음식은 훠궈이다. 래퍼 이영지가 어느 날 훠궈에 빠져 한 달에 20만 원 이상 훠궈에 썼다는 게 과장이 아니라고 생각이 든다. 우울해 지기 쉬운 요즘, 훠궈에 대해서나 글을 써볼까 한다.&lt;/p&gt;
&lt;p&gt;내가 훠궈를 처음 먹은 건, 대만 여행을 처음 갔을 때인 것 같다. 2017년 10월인데, 솔직히 그때는 훠궈가 인상 깊지 않았다. 첫 대만 여행이라 그런지, 구경할 환경이 많았고 처음 맛보는 요리도 많았기 때문이다. 그다음 훠궈는 작년 이맘때쯤인, 2019년 12월 20일쯤이었다. 이 때는 훠궈에 맛에 약간 신선함을 받았다. 첫 여행보다 맛에 집중해서 그런 걸 수도 있고, 약간 쌀쌀해져서 그런 걸 수도 있다.&lt;/p&gt;
&lt;p&gt;훠궈 식당은 포장마차의 어묵처럼 식탁마다 깊은 육수를 위한 스텐 냄비가 있다. 보통 두 가지 육수 맛을 선택할 수 있고, 냄비는 태극무늬처럼 반반 나뉘어 있기 때문에, 두 맛 모두 수용할 수 있다.그리고 훠궈의 내용물들은 대부분 리필인데, 기호에 따라 고기의 종류, 야채의 종류, 해산물 종류를 뷔페처럼 가지고 와서 익혀 먹는다. 나는 갓 익힌 식재료와 국물을 좋아하는 파인데, 훠궈는 둘 다 있다.&lt;/p&gt;
&lt;p&gt;한국에 돌아오고, 코로나를 겪으면서, 쉽게 다시 갈 수 있을 거라고 생각한 대만과 훠궈 집에 가지 못하게 되었다. 물론 한국에도 대만 훠궈 가게가 프랜차이즈로 들어와 있지만, 가격도 현지보다 비싸고 마음 편히 먹을 수 있을지도 모르겠다.그래서 바람이 쌀쌀해질 때쯤인 11월부터 2-3주에 한 번씩 훠궈를 만들어 먹고 있다. 처음에는 두맛이 나눠지는 훠궈 냄비를 살까 심각하게 생각했지만, 나눠서 익히는 게 생각보다 어려울 것 같아 포기하고 한 맛만 먹고 있다. 대신 다양한 맛을 자주 먹으려 한다.&lt;/p&gt;
&lt;p&gt;훠궈는 대형 냄비와, 각종 야채, 먹고 싶은 고기, 그리고 가장 중요한 육수 소스와 사골만 있으면 누구나 쉽게 만들 수 있다. 팁은 사골 베이스오 해야 깊은 맛이 난다는 것과 옥수수 면이나 납작 당면, 그리고 훠궈 야채 소스를 사서 같이 먹으면 더 맛있다는 것이다. 나는 본가에 가서 가족들과 해 먹는데, 요즘 본가에 가는 게 그렇게 즐겁다. 우리는 매운 육수와 토마토 육수 반반 섞은 훠궈에 소고기 샤브샤브와 청경채, 숙주, 버섯 등을 넣어 먹는다. 건강식인데 국물이 자극적이라 너무 좋다,, 올해 연말에도 훠궈를 먹지 않을까 싶다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[펀드 알아보기]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/fund/</link><guid isPermaLink="false">https://kyoo32.github.io/fund/</guid><pubDate>Mon, 30 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;나는 매달 일정 금액 펀드와 주식을 사고 있다. 그런데 주식은 기업과 회사의 지분을 사는 건지 알아도, 펀드는 봐도봐도 모르겠다. 그래서 한 번 알아보기로 했다. &lt;/p&gt;
&lt;p&gt;펀드는 간접투자상품이다. 펀드는 투자 전문가가 모아진 자금을 대신 분산 투자하고, 지분에 따라 얻은 이익을 배분한다. 즉 개인은 소액으로도 분산투자를 할 수 있다. 대신 개인은 수수료와 보수를 지불한다. 따라서 펀드는 “상당히 싸고, 매우 편리하고, 일반적으로 분산화되고, 전문적으로 관리되고, 연방증권법의 가장 강경한 조항들도 엄격하게 규제되고 있다. 누구나 쉽고 여우 있게 투자함으로써 뮤추얼펀드들은 미국의 5,400만 가구를 투자의 주류로 이끌었다. 아마 금융 민주주의가 여태까지 이룩한 것 중 최고의 진보일 것이다.”는 평가를 받기도 했다.&lt;/p&gt;
&lt;p&gt;개방형펀드는 1924년 미국 월스트리트에서 처음 등장했다. 언제든지 추가불입과 환매가 가능하고, 최소투자금액을 250달러로 낮추었다. 검은화요일의 대공황으로 폐쇄형펀드도 몰락했다. 이후 1932년 루즈벨트 대통령 당선 이후, 각종 금융 규제법이 실시되었다. 개방형펀드는 비중이 더 높아졌고, 1970년대 들어 MMF와 인덱스 펀드도 나타났다. Money Market Fund인 MMF는 오일쇼크 발생으로 높아진 금리를 이용한 펀드다. MMF는 높은 단기 금리를 제공했고, 펀드 도약의 기회를 제공했다. 80년대까지 자산운용 규모는 100배 성장했다. 인덱스 펀드는 펀드의 수익률이 시장평균수익을 넘을 수 없다는 가정에서 시작하여, S&amp;#x26;P500지수에 영향을 미치는 종목들로 포트폴리오를 구성한 펀드이다. 펀드의 수익률은 주가지수의 상승률을 따라가는 경향을 보였고, 90년대 말 세계 최대의 펀드로 성장했다. &lt;/p&gt;
&lt;p&gt;1980년대 베이비붐세대가 40대가 되고 법이 제정되면서, 퇴직연금과 개인퇴직계좌에 적립금이 쌓이게 되면서 펀드의 신규 자금 유입 규모가 크게 증가했다. 또 1990년대 펀드와 주식을 이중교배한 ETF가 등장하기도 했다. ETF는 인덱스펀드를 개별 주식종목처럼 거래할 수 있게 하였다. 이로써, 펀드의 지속적인 성장이 이어졌다. 즉, 펀드는 법의 제정과 함께 성장하여, 다른 투자 상품에 비해 안정성을 갖추었다. 또한 분산투자로 투자수익률도 어느정도 보장된다.&lt;/p&gt;
&lt;p&gt;펀드의 구조는 일반적으로 펀드판매회사와 자금을 운용하는 자산운용회사, 자금을 보관 관리하는 신탁회사, 일반사무를 보는 사무관리회사로 구성되는 집합투자기구 형태를 가진다. 자산운용회사와 신탁회사를 분리하는 이유는  운용사가 임의로 자금을 사용할 수 없게 하여 투자자를 보호하기 위해서 이다. 이러한 펀드 구조로 인해 투자자는 집합투자기구 구성회사들에 각각 수수료 및 운용보수를 지급해야한다.&lt;/p&gt;
&lt;p&gt;펀드는 불입방법에 따라 목돈을 한꺼번에 투자하는 ‘거치식 펀드’와 정기적으로 나눠서 투자하는 ‘적립식 펀드’가 있다. 적립식 펀드는 매월 일정액으로 주가가 쌀 때 많이 사들이고 비쌀 때 적게 사들여 전체적인 평균 매입단가를 낮춰서 이익을 내는 수익구조를 갖추고 있다. 즉, 코스트에버리징 효과가 적립식 펀드의 장점이다. 또 펀드는 주식투자비중, 투자방식, 투자근거법률, 투자철학, 환매가능여부 등의 기준에 따라 유형별로 구분할 수 있다. 주식투자비중에 따라 주식형, 채권형, 혼합형 펀드로, 투자방식에 따라 거치식, 적립식, 임의식 펀드로, 투자근거 법률에 따라 역내, 역외펀드로, 투자철학에 따라 성장주, 가치주 펀드로, 환매가능 여부에 따라 개방형, 폐쇄형 펀드로 구분한다.&lt;/p&gt;
&lt;p&gt;펀드 투자는 본인의 투자성향을 파악한 후 실시하여야 한다. 펀드는 적금이 아니라 원금 손실이 발생할 수 있다는 것을 인지하여야 한다. 또 가입 후에도 관리해야 한다. 가입한 펀드의 운용 성과와 현황을 지속적으로 확인해야 한다. 그리고 펀드의 잦은 매매 및 교체는 거래비용 면에서 손해이다.&lt;/p&gt;
&lt;p&gt;펀드는 적금이 아니다. 책임은 나에게 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[발표에 대한 생각]]></title><description><![CDATA[지난주 if kakao 컨퍼런스가 열렸고, 나는 if kakao의 한 세션을 맡았었다. 지난 글에서 말했듯이, 경험을 공유하는 일은 발표자에게 가장 큰 이득이 되기 때문이다. 이런 나의 세션도, if kakao…]]></description><link>https://kyoo32.github.io/ThinkingAboutShare/</link><guid isPermaLink="false">https://kyoo32.github.io/ThinkingAboutShare/</guid><pubDate>Mon, 23 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;지난주 if kakao 컨퍼런스가 열렸고, 나는 if kakao의 한 세션을 맡았었다. &lt;a href=&quot;http://kyoo32.github.io/SharingShare/&quot;&gt;지난 글&lt;/a&gt;에서 말했듯이, 경험을 공유하는 일은 발표자에게 가장 큰 이득이 되기 때문이다. 이런 나의 세션도, if kakao도 그럭저럭 잘 끝이 났지만, 나의 일은 계속되고 있다. 이번 발표 경험은 최근의 이슈와 맞물려 계속되는 나의 커리어에 많은 생각거리를 주었다.&lt;/p&gt;
&lt;p&gt;지난해부터 기회가 있으면, 나의 경험을 나누는 발표 자리에 지원하고 있다. 이 2년의 축적 때문인지, 나를 발료를 좋아하는 사람으로 보는 시각이 요즘 들어 많아졌다. 싫어하는 건 아니지만, ‘가치 있는 것은 공유할 수로 커진다.‘는 나의 생각 때문에 잘하려고 노력하는 것뿐이다. 발표는 생각보다 힘들고 스트레스를 받는다. 어쩌면 가치 없는 생각의 발표를 싫어하기 때문에 준비도 어려워지는 것 같다.&lt;/p&gt;
&lt;p&gt;생각의 가치에 대한 생각도, 공유와 함께 계속 해오던 생각이다. 그 이전에는 나의 경험이 공유할만한 가치가 있다고 스스로 느끼지 못했고, 발표에 쏟는 노력을 경험을 쌓는 데 쓰고 싶었다. 사회생활을 한 지 3년 정도 된 작년부터는 나의 경험이 어느 정도 공유할 가치가 있다고 생각했고, 당시에 공유하지 않으면 가치가 영영 흘러가버릴 것이라고 생각했다. 이렇게 결심한 발표들은 반드시 적절하게 전달되어, 듣는 사람에게도 가치가 있길 노력했다.&lt;/p&gt;
&lt;p&gt;그래서 그런지 어떤 생각의 공유로 유명해진 사람은 더 날카롭게 보게 된다. 최근 이슈가 된 풀소유 스님이나 아픈 청춘을 운운하던 교수님, 언니라고 칭해지기도 하는 유명 강사 등등. 많이 회자되고 영향력이 큰 발표들은 공유되기 전에 더 많이 점검되고, 퇴고되길 바라는 마음 때문이다. 이런 마음 때문이 아니라, 위로류의 유행이 지나버리고 있어서 이제 몇 년간 삶에 대해 이야기하는 유명인은 못 볼 것 같긴 하지만.&lt;/p&gt;
&lt;p&gt;유명해질 의도이든, 가치를 나누려는 의도이든 좋은 발표를 위해서는 동료가 필요하다고 생각이 든다. 이번 발표도 가이드를 만들어주고, 연습 후 피드백을 주고, 영상을 만들고 수정해주는 사람들이 있어서 잘 끝날 수 있었다. 그리고 가장 중요한, 가치 있는 경험을 함께 시작하고 마무리한 팀원들이 있었기 때문에 공유를 할 수 있었다. 그래서 회사에 여러 아쉬운 점들이 있지만, 사회생활의 시작을 현재 팀에서 하길 잘했다는 생각이 든다.&lt;/p&gt;
&lt;p&gt;그럼 다음 발표는 언제 무엇으로 할 수 있을까? 지난 2년간보다 더 어렵게 준비할 것 같다. 벌써부터 내년 일정들이 채워지고 있고, 기술의 발전은 생각만큼 빠르다. 올해 가치 있는 생각이 내년엔 히스토리나 철학 정도가 된다. 그렇다고 신기술을 설명하기엔 세상에 좋은 튜토리얼이 더 많다. 최근에 시니어와 나랑 비슷한 위치의 개발자가 있는 친목 모임에 갔는데, 이런 이야기의 결론은 ‘경력자의 그럭저럭은 월급값을 하는 것이고, 잘은 월급을 넘어서 놀랍게 하는 것이다.’였다. 발표 결심 전에 경험을 쌓은 것처럼, 다음 발표의 최소 그럭저럭을 위해 다시 내실을 다져야 할 때라고 생각이 든다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[다이어리]]></title><description><![CDATA[다이어리가 끝나간다. 새해 초에는 깨끗하고 가볍지만, 1…]]></description><link>https://kyoo32.github.io/Diary/</link><guid isPermaLink="false">https://kyoo32.github.io/Diary/</guid><pubDate>Mon, 09 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;다이어리가 끝나간다. 새해 초에는 깨끗하고 가볍지만, 11월쯤 되면 손때도 타고 이것저것 넣어놓은 것들 때문에 무겁기도 하다. 새해 초에는 새해 마음처럼 다이어리를 살펴보면서, 올해는 어떻게 부분을 나누고 어떤 식으로 다이어리를 쓸지 생각한다. 사각사각 다이어리 종이 넘기는 소리도 경쾌하다.&lt;/p&gt;
&lt;p&gt;나는 사회인이 된 이후부터 매년 다이어리를 쓰고 있다. 블로그도 있고, 요즘은 잘 만들어진 다이어리 앱이 있지만, 아직 종이 다이어리의 자리를 대체하지 못하고 있다. 블로그는 공적이라 숨기게 되는 말도 많아서 답답하고, 일주일에 한 번 쓰기도 귀찮을 때가 있다. 앱은 나만 보고 접근이 쉽지만, 장문을 쓰거나 그림을 그리고 싶을 때 아쉽다.&lt;/p&gt;
&lt;p&gt;이렇게 4개쯤의 종이 다이어리가 쌓여있다. 사실 지난 다이어리를 살펴보는 일은 잘 없다. 있다면, 올해가 끝날 때쯤 내가 일 년을 어떻게 보냈는지 보는 것이다. 하지만 그 일 년의 회고 하나하나가 다음 해에 반영된다. 올해는 어떤 게 좋았고, 어떤 게 아쉬웠는지, 그래서 내년에는 어떻게 하면 좋을지. 이렇게 보면 매우 계획적인 사람 같지만, 나는 다이어리로 대략적인 삶의 방향과 계획만 세운다. 올해는 작년처럼 힘차고 도전적인 계획을 많이 세웠는데, 코로나로 핵심적인 것만 남기고 나의 몸과 마음의 정신건강을 우선한 해였다. 그리고 여러 관계를 돌아보고 챙기고 있다.&lt;/p&gt;
&lt;p&gt;그리고 가장 중요한 게 다이어리에는 내가 남기고 쓰고 싶은 모든 말을 적는다. 나만의 대나무 숲일 수도 있고, 나만의 브런치가 되기도 한다. 내가 겪은 일부터 읽은 책, 본 넷플릭스, 들었던 인상 깊은 음악까지, 원하는 모든 것을 남겨놓는다. 적은 글을 다시 돌아보지 않지만, 이렇게 적힌 내용은 머릿속에 더 오래 기억되는 듯하다. 그래서 다이어리는 내년의 방향을 함께 정해주기도 하지만, 하루하루 기억하고 싶은 나의 생각을 함께 해주기도 한다. 다이어리 쓰는 것은 나에게 소중한 시간이다. 다이어리가 차곡차곡 매해 쌓일 때마다, 나도 쌓이는 기분이다. 가장 처음 다이어리는 많이 낡았지만, 이제 빈티지한 멋이 있는 것 같다.&lt;/p&gt;
&lt;p&gt;디지털 시대에 가장 오래가는 데이터는 잃어버리지 않는 종이라는 말을 들은 적이 있는데, 다이어리가 너무 많아지거나 정신이 없어서 잃어버리지 않는 한 나의 로그 데이터들을 잘 보관할 생각이다. 그리고 누군가 언젠가 나의 다이어리를 보는 것은 싫으니, 죽을 때쯤 아무도 모르게 태우거나 버릴 것이다.&lt;/p&gt;
&lt;p&gt;이제 글도 다 썼으니 스타벅스 다이어리 모으러, 스타벅스나 가야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[이별과 로또]]></title><description><![CDATA[내 삶에서 큰 이별들을 앞두고 있다. 또 지난 1…]]></description><link>https://kyoo32.github.io/GoodBye/</link><guid isPermaLink="false">https://kyoo32.github.io/GoodBye/</guid><pubDate>Mon, 02 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;내 삶에서 큰 이별들을 앞두고 있다. 또 지난 10월에는 스치는 작은 이별들을 겪었다. 처음으로 기억에 남게 될, 교류 있는 가족과의 영원한 이별. 임보 고양이와의 이별. 만나던 사람과의 이별. 동료와의 이별 등등. 새로운 사람을 많이 만나고 또 뜸해지던 20대 초중반이었다면, 어떤 이별이든 돌아보지 않고 쿨하게 지나갔을 것이다. 하지만 요즈음은 다른 것 같다. 내가 이 이별에 무엇을 할 수 있는지 나에게 무슨 의미인지 생각한다.&lt;/p&gt;
&lt;p&gt;사실 스치는 작은 이별은 쿨함에서 그다지 달라진 점은 없다. 그냥 나에게 쌓이는 하나의 데이터가 될 뿐이다. 이 사람의 무엇은 나와 잘 맞았고 혹은 안 맞았지. 이 사람과의 어떤 경험은 즐거웠어 혹은 별로였어.두려운 이별은 곧 다가올 큰 이별들이다. 하나는 날이 정해져 있고, 하나는 몇 해 안 어느 날이다. 두 이별 모두 내 기억 속에 처음으로 기록될 영원한(?) 이별들이라 떨리고 슬프고 궁금하기도 하다. 지금 내가 할 수 있는 일은 ‘평소처럼’보다 조금 더 그들에게 신경 쓰고 시간을 나누고 잘해주는 것이다.&lt;/p&gt;
&lt;p&gt;언젠가 로또가 되면 하고 싶은 일을 적었는데, 적어놓고 보니 내가 조금 더 부지런하고 계획을 잘 짜면 할 수 있는 일들이었다.(집 구매 제외) 주로 운동이나 공부 등 자기계발적인 것들이었다. 그래서 생각하기에 나는 로또가 되면 시간과 마음의 여유를 갖고 싶은 것임을 깨달았다. 그리고 로또 후 할 일이 너무 평범하고 시시해서, 조금 더 사회적으로 좋은 일은 없을까 생각하기 시작했다. 그런데 나는 이런 생각을 언제나 내가 할 일로 채우고 있다. 다가오는 이별의 두려움을 로또가 해결해 줄 수 있을까?&lt;/p&gt;
&lt;p&gt;하나는 이별을 한 15년 정도 지연시켜줄 수 있을 것 같다. 이는 나에게 시간과 마음의 여유가 생겨, 극적인 변화를 일으키는 기적에 가깝다. 다른 하나는 전혀 해줄 수 있는 게 없다. 남아있는 시간이 행복해질 수 있겠지만, 시간이 늘어나지 않을 것 같다. 돈으로 살 수 없는 시간들이 있다는 것을 나는 요즈음 직접 경험하고 있다. 세상에 더 슬프고 안타까운 이별도 많지만, 나는 이번에 처음이라 마음의 준비도 하고 이렇게 글까지 쓰게 된다.&lt;/p&gt;
&lt;p&gt;가을은 타지 않지만, 낙엽이 떨어지는 지금이 내 상황의 배경으로 너무 잘 어울린다. 인생이 정말 연극이라면, 이번 무대는 매우 잘 골랐다. 다음 해 낙엽을 보며 내가 어떤 생각을 할지 궁금하다. &lt;img src=&quot;https://user-images.githubusercontent.com/7741862/97819216-8d17bc00-1cea-11eb-9381-6dc56e822c38.JPG&quot; alt=&quot;IMG_4228&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[소셜 딜레마]]></title><description><![CDATA[추석 연휴에 넷플릭스의 다큐멘터리 <소셜 딜레마>를 보았다. 소셜 딜레마는 미국의 IT 기업의 전,현직 근무자들의 인터뷰와 어떤 가족의 재연 드라마로 이루어져 있다. 내용은 페이스북, 트위터 등 글로벌 sns의 위험성을 다룬다. 한국에서 IT…]]></description><link>https://kyoo32.github.io/SocialDilemma/</link><guid isPermaLink="false">https://kyoo32.github.io/SocialDilemma/</guid><pubDate>Mon, 05 Oct 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;추석 연휴에 넷플릭스의 다큐멘터리 &amp;#x3C;소셜 딜레마&gt;를 보았다. 소셜 딜레마는 미국의 IT 기업의 전,현직 근무자들의 인터뷰와 어떤 가족의 재연 드라마로 이루어져 있다. 내용은 페이스북, 트위터 등 글로벌 sns의 위험성을 다룬다.&lt;/p&gt;
&lt;p&gt;한국에서 IT기업으로 분류될 수 있는 곳에서 일하는 입장으로, 소셜 딜레마에서 인터뷰이들의 말과 행동은 놀랍고 신기했다. 플랫폼을 만들거나 이익을 만드는 부서에서 일하면서, 플랫폼의 좋은 면을 보고 세상을 더 좋게 만든다는 그들의 과거 생각은 한국과 크게 달라보이지 않았다. 그러나 달라서 놀라웠던 첫번째는 플랫폼의 결과적인 형태를 보고, 윤리적 반대로 회사를 그만두었다는 점이다. 두번째는 회사를 그만둔 후 이런 플랫폼의 위험성을 알리는 일을 하거나 참여한다는 점이다.&lt;/p&gt;
&lt;p&gt;먼저 한국은 글로벌한 서비스가 손에 꼽을 정도로 없고, 글로벌한 서비스에 사용되는 글로벌한 기술은 더욱 없는 편이라, 한국 엔지니어나 재무사들이 인터뷰이와 같은 고민을 할 기회가 아예 없는 것 같다. 그러나 만약 글로벌한 기업이 많더라도, 한국사람들이 윤리적인 문제를 제기하고, 해결이 안되면 퇴사하고, 이 문제를 세상에 알리는 일을 할 수 있을까? &lt;/p&gt;
&lt;p&gt;인터뷰이 중 많은 활동을 하고 있는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Tristan_Harris&quot; title=&quot;Tristan Harris&quot;&gt;Tristan Harris&lt;/a&gt;는 구글의 ethcial designer였다. 구글에 다니던 어느 날, 그는 구글의 몇명의 제작자가 전 세계 사람들의 생각과 행동을 유도하는 게 올바른 일인지 묻는 메일을 가까운 동료들에게 보내게 된다. 이 메일은 구글 사내에 여러번 공유되고, 래리 페이지에게 까지 전달되었다. 화제가 되자, 그는 이 문제를 논의할 장이 열릴 것이라 기대했는데, 며칠 후 아무 일도 없던 것 처럼 조용해 졌다.&lt;/p&gt;
&lt;p&gt;한국의 글로벌 IT기업에서 일을 하다가, 윤리적인 문제를 느끼고, 동료들에게 공유하고, 경영진과 이야기해 보려고 하고, 안된다면 퇴사하여, 이 문제를 해결하는 데 동참할 수 있을까? 먼저 IT 산업에서 비윤리적인 것은 무엇일까? Tristan Harris는 플랫폼 산업이 유용하던 도구 시절을 넘어 조작하는 단계에 와 있다고 말한다. 유용하던 도구란 자전거처럼 인간이 지정한 마지막 자리에 있고, 인간이 원할 때 사용할 수 있으며, 존재 자체로 커뮤니티에 해가 되지 않는 물건이다.&lt;/p&gt;
&lt;p&gt;조작하는 플랫폼은 사용자의 관심을 계속해서 유도하고, 그 관심으로 계속해서 수익을 얻는다. 유도하는 방향은 정제되어 있지 않고, 플랫폼에 가장 이득이 되는 방향이다. 과거 유튜브 추천 알고리즘 개발자 였던 Guillaume Chaslot는 극단적으로 유튜부 추천을 클릭하지 말라고 제안한다. 유튜브의 추천은 비의 깡처럼 재미있는 문화를 만들어주기도 하지만, 양극화되는 정치적 생각의 요인이기도 하다. &lt;/p&gt;
&lt;p&gt;나는 sns를 적절히 이용하고 사용한다고 생각한다. 가끔 유튜브 추천에 빠져서 오랫동안 보기도 하지만, 플랫폼을 이용해서 뉴스같이읽기도 하고, 여러 다양한 의견도 많이 보고, 입양홍보도 한다. 소셜딜레마에도 언급된 것 처럼 어른도 주의해야 하지만, 더 주의해야할 사람은 어린 아이들이다. 소셜딜레마는 sns사용과 자해하는 어린 여자아이들의 비율의 상관관계를 소개하기도 한다. 최근 한국의 경기도의 재택 교육 품질 조사도 미디어 사용이 가장 늘어난 나이대는 초등 저학년 이었다. 소셜딜레마의 인터뷰이들이 말하기로, 많은 IT 플랫폼 종사자들은 자신의 자녀가 sns을 사용하지 않게 한다. &lt;/p&gt;
&lt;p&gt;한국은 sns플랫폼을 제작하지도 심하게 사용하지도 않지만, 생각의 양극화를 겪는 입장에서 &amp;#x3C;소셜 딜레마&gt;는 한번 보길 추천한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[고양이 임보의 엄마 마음]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/heartAtCattery/</link><guid isPermaLink="false">https://kyoo32.github.io/heartAtCattery/</guid><pubDate>Mon, 28 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;고양이 어린이 카키를 임보하며 고양이 엄마가 되어보니, 부모의 마음이 아주아주 조금 이해되는 것 같다. 실제 부모들의 마음은 더 크고 깊겠지만, 요즘 그 마음의 입구를 기웃거리는 기분이다.&lt;/p&gt;
&lt;p&gt;고양이 어린이를 케어하면서, 가장 예민한 문제는 밥먹고 화장실을 가는 것이다. 고양이도 사람처럼 입에 안 맞으면 음식을 먹지 않는다. 혹은 간식을 자주 주면 주식인 사료를 먹지 않는다. 기력을 회복하고 성장을 잘 하려면, 매일 밥을 잘 먹고 구토등이 없어야 한다. 그런 의미에서 카키는 밥을 매우 잘 먹어주어서 감사하다. 그런데 한 주는 토를 자주 했는데, 단체 담당자와 요인을 찾아보니 당시 소량으로 주던 간식이 문제였다. 칭찬의 의미로 내가 고른 간식이었는데 너무 미안했다.&lt;/p&gt;
&lt;p&gt;두번째는 화장실인데, 사람처럼 고양이도 화장실 사용으로 전반적인 건강상태나 건강이상을 알 수 있다. 아기 고양이는 하루에 큰 일을 2 ~ 3번, 작은 일을 3 ~ 6번 보는데 연속으로 횟수가 많아지거나 적어진 날이 계속되면 건강에 이상이 있는 것이다. 또 대변이 설사이거나, 소변의 색이 이상할 때도 병원에 가보아야 한다. 혹은 고양이는 화장실 환경이 마음에 들지 않으면, 볼일을 참거나 불만의 표시로 아무 장소에다 일을 처리한다. &lt;/p&gt;
&lt;p&gt;카키는 화장실도 매우 잘 써주어서 감사할 따름이다. 잘먹고 잘싸서 카키가 눈도 잘 낫고 잘 크고 있는 중인 것 같다. 그런데 이렇게 잘 커주어서 고마운 카키가 미운네살처럼 보일 때가 있었다. 카키가 우리집에 오고 2주간은 어려서 그런지, 밤에는 제어가 잘 안되었었다. 새벽 2시나 5시에 놀자고 깨우거나, 자고 있는데 와서 물거나, 내 위로 우다다를 하기도 했다. 고양이는 야행성에 야생본능이 있기 때문에, 새벽에 노는 것이나 우다다하는 건 이해해주어야 할 부분이다.&lt;/p&gt;
&lt;p&gt;새벽에 신나게 노는 건 나이가 들면 볼 수 없는 진귀하고 재밌는 순간이니 어쩌면 지금을 즐겨야 한다. 그러나 고양이와 사람 모두 편하게 살려면, 고양이가 사람을 무는 대상으로 인식하지 않게 하고, 고양이의 손발톱을 잘 깎아야 한다. 지금은 많이 나아졌지만, 카키도 처음에 나를 물 때는 훈련하느라 힘들었다. 이갈이 시기라 많이 무는 게 필요하지만, 이를 대비해서 물 수 있는 인형이나 수건을 준비했지만 그래도 나를 자주 물러왔다.&lt;/p&gt;
&lt;p&gt;사실 고양이 애기 이빨이라 아프지는 않은데, 성묘가 되었을 때도 문다고 생각하면 아찔하다. 카키가 물었을 때 바로 쿠션을 입에 대주기도 하고, ‘안돼’라고 크게 말하기도 하고, 무시하고 자리를 10분간 피하는 방법을 썼다. 처음에 쿠션이나 ‘안돼’를 했을 때는 오기가 생기는지 계속 더 물려고 했다. 그리고 자리를 피했을 때는 문 앞에서 울기도 했다. 지금은 이갈이도 많이 하고 ‘안돼’를 알아들어서 더 이상 물지 않지만 훈련의 과정은 인내심을 요하고 사람도 힘들었다.&lt;/p&gt;
&lt;p&gt;손발톱은 나긋하게 말하면 튕기고 도망가서, 정색하고 하면 깎는다(ㅋㅋ) 이 외 빨래 건조 방해, 설거지나 요리할 때 가까이 오는 행동은 아직 완전히 안하게 훈련시키지 못했다. 가장 좋은 방법은 부엌이나 다용도실, 베란다 등 공간이 분리되어있는 환경을 제공하는 것인데, 나의 집은 모두 오픈되어 있어 이 방법을 사용할 수 없었다. 원하지 않은 행동을 할 때, 긍정적인 강화훈련으로 카키를 대하고 싶지만, 생각보다 어렵다.&lt;/p&gt;
&lt;p&gt;긍정적인 강화훈련은 원하지 않은 행동을 할때, 놀이나 간식 등 다른 것으로 바로 유인해서 해당 행동을 안하게 막는 것이다. 그럼 고양이들은 해당 행동을 안해야지 자신에게 좋다는 것을 인식한다. 그러나 행동은 아무때나 어디서나 나올 수 있어서, 바로 강화훈련을 하기 어려울 때가 많다. 이 때 대처할 수 있는 쉬운 방법이 부정적 강화훈련이다. 부정적 강화훈련은 반대로 원하지 않은 행동을 할때 안 좋은 기억을 심어주는 것이다. &lt;/p&gt;
&lt;p&gt;부정적 강화훈련의 예로 큰 소리를 내거나 체벌을 하거나 고양이를 직접 들어서 격리시키는 것이 있다. 나는 큰 소리를 내거나 들어서 다른 곳으로 옮기는 방법을 사용하는데, 약간의 미안한 마음이 생긴다. 기회가 되면 긍정적 방법을 쓰지만, 부정적 방법은 빠르게 바로 사용할 수 있다. 대신 훈련시간이 끝나면, 평소처럼 잘 대해준다. 예전에 미디어나 밖에서 아이를 따끔하게 혼내는 부모를 보면 약간 가혹하다고 생각했는데, 어쩌면 나중을 위해 꼭 필요한 일이었을 수도 있겠다는 생각이 든다. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/94380255-ca2ee280-016f-11eb-9ec2-621f9baae7e2.JPG&quot; alt=&quot;IMG_3725&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[고양이 임보의 시작]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/startOfCattery/</link><guid isPermaLink="false">https://kyoo32.github.io/startOfCattery/</guid><pubDate>Mon, 21 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;두번째 재택근무부터 어린 고양이를 임시보호하기 시작했다. 임보를 시작한 이유도 여럿, 임보 후에 느끼는 마음도 여럿이다. &lt;/p&gt;
&lt;p&gt;재택근무 시작 글에 언급했지만, 이번 재택근무 때는 우리 집을 잘 활용해보고 좀 더 활기차고 규칙적으로 살고 싶은 마음이 있었다. 집을 잘 활용하는 데, 홈트레이닝이나 취미 등 내가 좋아하는 활동에 특화되게 꾸밀 수 있지만, 나의 집 홈트는 링피트로 충분하며 집의 취미는 책이나 전자기기 활용하는 것 이외에 손에 잘 잡히지 않는다. 우리집을 누군가와 공유하는 방식으로 집을 활용하기로 했는데, 요즘 시기에 고양이가 딱이라고 생각했다. &lt;/p&gt;
&lt;p&gt;우리 집은 혼자살기에 약간 크고 사람 둘이 살기에 약간 작은 사이즈인데, 사람 한명과 고양이 한마리면 딱이다. 이 집에 살동안 1~2인 에어비엔비 대여도 해보고 싶은 데, 요즘은 코로나로 집을 비우는 시간이 더 줄어 에어비엔비는 더 요원해졌다. 앞으로 이 집과의 계약이 10개월 정도 남았는데, 이 공간에서 새로운 경험과 시도를 해보고 싶었다. 그런데 선뜻 고양이를 입양하거나 임보할 행동의 용기는 나지 않았다.&lt;/p&gt;
&lt;p&gt;그렇게 마음만 먹고 몇 달을 보내고 있었는데, 내가 인스타에서 팔로우하는 성남 고양이 봉사단체의 임보 요청 포스트를 보게 되었다. 생후 1개월령에 누군가의 신고로 형제들과 보호소에 와서 3개월째 케이지 생활을 하던 고양이 였는데, 보호소 생활의 스트레스로 오른쪽 눈에 염증이 생겨 상황이 악화되고 있는 친구였다. 나도 면역력이 떨어지면 눈이 먼저 아픈데, 이런 우연적인(?) 공감보다 몇달 째 임보공고를 내도 도움이 없어 진짜 눈을 잃을 것만 같았다. &lt;/p&gt;
&lt;p&gt;우물쭈물 거리며 임보를 할까말까 하는 마음을 눈을 낫게 해주고 싶은 마음이 이긴 것이다. 내가 임보를 하고 있다고 하면, 좋은 일은 한다고 하는 사람과 왜 굳이 임보를 하냐고 하는 사람으로 나눌 수 있는데, 후자는 불미스러운 사건에 대한 우려로 후원이 낫다는 생각과 바로 입양을 안하고 임보하는 사람은 사람 욕심 채우는 것이라는 생각이 있다. 나도 이전에는 좋게 보는 시각과 비판적인 시각 모두 비슷하게 가지고 있었는데, 임보 한달 정도 되니 좋은 시각이 더 커졌다.&lt;/p&gt;
&lt;p&gt;고양이를 가족으로 맞이할 때 크게 두가지 방법이 있다. 하나는 품종묘를 분양하는 것이고, 하나는 유기묘나 보호소에서 입양하는 것이다. 품종묘는 전문적인 캣브리더나 반인간적인 펫샵에서 비싼 값을 내고 데려올 수 있다. 유기묘나 길고양이는 각 지자체 보호소에서 그냥 데려올 수 있는데, 임보를 하면서 이 보호소 시스템이 펫샵만큼 비인간적임을 알게 되었다. 그래서 임보를 욕심 채우기보다 봉사로 생각하게 되었다.&lt;/p&gt;
&lt;p&gt;거의 대부분의 지자체 동물 보호소는 보호하는 기관이기 보다 보관소에 가깝다. 그리고 동물의 삶은 없고 사람의 의견만 받아들여지는 곳이다. 보호소의 동물들은 사람의 신고로 포획되어 들어온다. 신고가 있으면 담당자는 대부분 동물을 데려온다. 물론 위험한 상황의 동물을 구출하기도 하지만, 동물 가족이 있는 친구들도 사람 소유자가 없다면 그냥 데리고 온다. 그 친구들은 캐리어보다 작은 케이지에서 기존 입양자나 새로운 입양자를 며칠 기다리다, 연락이 없으면 안락사를당한다. &lt;/p&gt;
&lt;p&gt;개나 강아지는 자연에서 혼자 사는 경우가 흔하지 않기 때문에, 밖에 돌아다니는 품종견이나 깨끗해보이는 친구들은 대부분 사람이 유기한 것이다. 그러나 길에서 태어난 고양이들은 알아서 밖에서 살기 때문에, 밖에서 잘 살고 있는 고양이를 보호소에 신고하는 건 이 고양이의 삶을 더 안좋게 만드는 일이다. 이런 사실을 모르고 단지 고양이가 불쌍해 보여서 신고하는 사람도 있고, 그냥 본인 눈에 짜증나서 신고하는 사람도 있다.&lt;/p&gt;
&lt;p&gt;보호소의 아이들은 며칠의 입양공고를 기다리다가 안락사 당하거나, 봉사단체의 도움으로 케이지에서 입양전선에 뛰어들거나, 내가 임보하는 아이처럼 몸이 안좋아져 임보처를 찾게 된다. 내가 임보아이에게 따로 해주는 일은 아침저녁으로 안약을 넣어주는 것이지만, 지구나 동물에게 여러 해를 끼쳐온 이기적인 인간의 행동을 조금 감쇄했으면 하는 마음이다. 아무튼 임보아이 카키는 눈이 잘 낫고 있고, 체력적으로 힘들만큼 활발하며, 매우 귀엽다. 😺&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/93726138-2c776880-fbef-11ea-9d53-27d85ef303b6.JPG&quot; alt=&quot;IMG_3571&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[경험공유의 경험]]></title><description><![CDATA[지난…]]></description><link>https://kyoo32.github.io/SharingShare/</link><guid isPermaLink="false">https://kyoo32.github.io/SharingShare/</guid><pubDate>Mon, 14 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;지난 9월 첫째주, 개발 발표녹화를 했다. 개발 프로젝트 경험을 공유하는 발표였다. 개발자로 일을 하면서 매해 발표하는 자리가 있으면 참가하려고 하는데, 지난해부터 다행히 잘 지켜지고 있다. 어떻게 보면 개발 블로그로 대체할 수도 있을 것 같고, 발표 자체가 목표가 되어버리지 않을까 생각할 수 있다. 그래서 내가 생각하기에 발표는 경험을 공유하는 자리이면 좋을 것 같다. 또한 발표자도 그런 공유의 경험을 쌓을 수 있으면 좋을 것 같다.&lt;/p&gt;
&lt;p&gt;출처는 기억나지 않지만, 이전에 자기계발 내용 중 ‘공유할 내용이 없다면, 성장이 멈춘 것이다.‘라는 말을 들었다. 맥락과 출처는 기억에서 사라졌지만, 저 문장은 계속 남아있다. 이 문장의 성장이 인격적인 성장일 수도 있고, 개발실력의 성장일 수도 있고, 체력의 성장일 수도 있다. 또한 공유의 방식도 세바시 같은 유명한 발표일 수도, 브런치의 블로그 글일 수도, 모임 자리에서 간단한 이야기의 내용일 수도 있다. &lt;/p&gt;
&lt;p&gt;어떤 내용의 어떤 공유이든, 성공적으로 끝나든 실패로 끝나든 성장할 수 있는 무엇인가를 했고, 그 일을 회고하고 타인에게 전달한다는 의미가 있는 것 같다. 이런 경험의 공유는 자신과 타인에게 모두 도움을 줄 수 있다고 생각한다. 재밌는 건 발표자가 가장 큰 이득을 보는 사람이며, 청중은 발표자의 성공 경험보다 실패 경험을 더 의미있게 받아들인다는 것이다. 발표자는 첫째로 그 경험을 했고, 그 경험을 가장 잘 돌아보고 이해하게 된다. &lt;/p&gt;
&lt;p&gt;발표자는 경험을 잘 소화하는 것에서 끝나는 게 아니라, 공유하는 발표자리를 가짐으로써 해당 경험을 재료로 한 층 더 복합적인 경험을 할 수 있다. 발표는 자신의 경험을 잘 전달하는 연습이 되고, 듣는 사람과의 소통을 통해 새로운 내용을 발견하기도 한다. 따라서 발표자는 그 경험에 대해 가장 잘 아는 사람이 되어간다. 또한 경험의 공유는 한번만 해야하는 게 아니라서, 여러 곳의 여러 방식의 재료가 될 수도 있다.&lt;/p&gt;
&lt;p&gt;청중은 성공 경험을 부러움의 대상으로 삼고, 실패 경험은 명확한 피드백으로 가져가다는 연구결과가 있다. 발표자가 본인뿐만 아니라, 타인에게도 도움이 되는 경험을 공유하고 싶다면, 그 결과가 성공인든 실패이든 경험의 과정에 있던 실패를 함께 알려주는 게 좋을 것 같다. 과정부터 결과까지 100% 성공만 있는 경험은 없으니, 과정의 실패가 어떻게 나타났는지 어떻게 대처했는지 말해줄 수 있다고 생각한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[또 다른 나]]></title><description><![CDATA[부캐의 전성시대이다. 부캐는 부차적인 캐릭터로, 본 캐릭터와 다른 또 다른 자신이다. 방송 놀면뭐하니가 대중화시킨 이 말과 현상은 사실 올해 초부터 비슷하게 있어왔다. 트렌드코리아 202…]]></description><link>https://kyoo32.github.io/MultiMe/</link><guid isPermaLink="false">https://kyoo32.github.io/MultiMe/</guid><pubDate>Mon, 31 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;부캐의 전성시대이다. 부캐는 부차적인 캐릭터로, 본 캐릭터와 다른 또 다른 자신이다. 방송 놀면뭐하니가 대중화시킨 이 말과 현상은 사실 올해 초부터 비슷하게 있어왔다. 트렌드코리아 2020은 올해의 키워드로 ‘멀티 페르소나’를 꼽았다. 멀티 페르소나가 여러 가지 자아에 초점을 맞춘 반면, 부캐는 특징 있는 한 자아에 몰입된 점만 다르다. 왜 이런 여러 자아는 2020년에 유행하는 걸까? 또 이전에는 다중적인 사람의 모습이 없었을까?&lt;/p&gt;
&lt;p&gt;2020년 들어 직장인 사이에서 자주 회자되는 게 있다. 슈카의 주식 유튜버나, 신사임당의 네이버 스토어, 쿠팡 블로그 광고 등 사이드잡이다. 사이드잡을 하는 사람은 예전에도 있었지만, 클래스101등의 플랫폼을 만나 대중화되고 있다. 경제적인 목적이 사이드 잡이라면, 본업과 병행하는 외부의 재밌는 일은 사이드 허슬(Side Hustler)라고 한다. 사이드 허슬은 근무시간 외 본인이 하고 싶은 재미있는 딴짓을 벌이는 것이다.&lt;/p&gt;
&lt;p&gt;취미가 사이드 허슬이 될 수 있지만, 요건이 있다면 혼자 즐기지 않고 널리 공유되고 재생산될 수 있어야 한다. 예를 들어, 글쓰기가 취미인 사람은 자신의 컴퓨터에서만 볼 수도 있지만, 인터넷에 공유하고 책을 만들 수도 있다. 모바일 그룹 게임을 즐겨하는 사람은 길드를 만들어 운영할 수 있다. 또 맥주를 좋아하는 사람이 혼맥 하기보단, 맥주 시음 동아리를 만들고 맥주 파는 펍을 차릴 수도 있다. 이렇게 개인과 환경마다 가능한 사이드 허슬의 종류는 무궁무진하다. &lt;/p&gt;
&lt;p&gt;부캐, 멀티 페르소나, 사이드 잡, 사이드 허슬. 한국 사람들은 본업 하기도 힘든데, 왜 또 다른 일을 벌이는 걸까? 어쩌면 다른 일이 본업을 지탱해주기 때문인 것 같다. 한 사람이 하나의 특징만 가진 게 아니듯, 한 사람이 매일 하나의 일만 한다면 지치고 지루할 것이다. 자신에게 맞는 여러 가지 다른 일이 주는 신선함과 인사이트가 생활을 지속할 수 있게 해주는 것 같다. 내가 쓰는 이 글도 나의 사이드 허슬 중 하나인데, 나를 돌아보는 시간을 정기적으로 준다.&lt;/p&gt;
&lt;p&gt;우리가 점점 ‘사람은 다면적’임을 인정해서 여러 자아가 나오는 게 아닐까 싶다. 그런 관점에서 2020년은 늦었지만, 늦게라도 나타나서 다행이다. 과거 부모님 세대는 한 직장에서 평생을 다니고, 아빠는 아빠의 역할로 엄마는 엄마의 역할로 평생 잘 사는 게 미덕이라고 여겨졌지만, 이제는 사회적으로 불가능할 뿐만 아니라 가능하다 해도 많은 사람들이 그런 삶을 선택하지 않는다. 우리는 직장인이기도 하지만, 무엇을 운영하는 사람일 수도 있고, 어떤 콘텐츠를 만들어내는 사람일 수도 있다. &lt;/p&gt;
&lt;p&gt;생각해보면 나는 매해 초 휘황찬란한 프로젝트를 꿈꾸고 계획한다. 올해의 2/3가 지난 지금 돌아보면, 시원찮은 것도 있고 꽤 잘 진행된 프로젝트도 있다. ‘내가 너무 이상적이고 무리하나?‘라는 생각도 가끔 하지만, 그래도 평범하게 살아가는 것보다 낫다고 요즈음 많이 생각한다. 부캐의 전성시대 덕분이다. 언젠가 내가 진행한 일을 모아서, 온택트 전시회로 공유하는 것도 재미있겠다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[다시 재택근무]]></title><description><![CDATA[수도권의 코로나 재유행으로 8월 22일 기준 400명에 가까운 확진자가 나타났고, 나는 다시 재택근무에 들어갔다. 재택근무를 다시 하게 되면 이전보다 잘할 수 있지 않을까? 재택근무 잘한다는 나만의 기준은 무엇일까? 그리고 지난번 경험으로 2주든…]]></description><link>https://kyoo32.github.io/workFromHomeAgain/</link><guid isPermaLink="false">https://kyoo32.github.io/workFromHomeAgain/</guid><pubDate>Mon, 24 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;수도권의 코로나 재유행으로 8월 22일 기준 400명에 가까운 확진자가 나타났고, 나는 다시 재택근무에 들어갔다. 재택근무를 다시 하게 되면 이전보다 잘할 수 있지 않을까? 재택근무 잘한다는 나만의 기준은 무엇일까? 그리고 지난번 경험으로 2주든 2달이든 언제 끝날지 모른다는 마음을 갖게 되었고, 그렇다면 기약 없는 재택근무 때 이루고 싶은 건 무엇일까? 환경이든 행동이든 말이다.&lt;/p&gt;
&lt;p&gt;먼저 지난 재택근무를 바탕으로, 내가 생각하는 재택근무의 성공은 하루의 사이클이 무너지지 않고 지치더라도 다시 회복할 수 있는 시간을 꼭 갖는 것이다. 지난 재택근무 때는 몸이 편해서 그런지, 내일 이동시간이 없다는 안심에서였는지, 취침시간이 1~2시간 미뤄졌다. 그 여파가 7월과 8월 초반에도 있었는데, 이제는 업데이트된 만화만 보고 12시 즈음에 자야겠다. &lt;/p&gt;
&lt;p&gt;또 몇 달 하다 보니, 몸과 마음이 지쳤었다. 통근시간이 없어서 처음에는 좋았지만, 필요한 만큼만 움직였기 때문에 몸이 굳고 뻐근해졌다. 당시 다니던 운동도 감염 우려로 미뤘기 때문에, 나의 최대 움직임은 저녁의 링피트 시간 15분이었다.  그리고 사람을 대면하지 않아서 처음엔 자유로웠는데, 시간이 갈수록 대화에 더 노력이 들었고 감정적인 유대는 제대로 쌓을 수 없었다.&lt;/p&gt;
&lt;p&gt;이번에는 12시 이전에 자려고 노력해보려고 한다. 이렇게 자면, 다음날 7-8시쯤 일어나도 개운하다. 그래서 지금 이 글을 아침에 쓰는 것처럼, 아침 시간에 생산적인 일을 자주 해보려고 한다. 공부를 하든지, 뉴스 같이읽기를 하든지, 책을 읽든지, 아니면 간단히 스트레칭을 하더라도 말이다. 이렇게 하루를 시작하면, 퇴근 후에는 취침시간을 맞추기 위해 헛짓거리는 잘 안 하게 될 것 같다. 꼭 필요한 휴식 말고, 아무것도 안 하면서 보내는 시간 말이다.&lt;/p&gt;
&lt;p&gt;몸의 건강을 위해서 지난달부터 다시 다닌 운동을 주 2회는 꼭 다니려고 한다. 다행히 내가 다니는 요가 학원은 온도 체크와 명부 확인을 꼼꼼히 하고, 운동할 때도 마스크가 필수인데 모두가 잘하고 다닌다. 마음이 지치면 어떻게 해야 할까? 사실 이 문제가 가장 어렵다. 누적되어 힘든 점도 있는데, 사실 혼자 있는 공간에서 일하다 보면 홀로 자주 지친다. 사무실에서 일하면 덜 지치거나 티 안 나게 지쳤던 것 같다. 마음이 지치는 문제는 좀 더 생각해 볼 것이다. &lt;/p&gt;
&lt;p&gt;재택근무 때 이루고 싶은 일은 내가 집에 있는 시간에 할 수 있는 일이다. 사무실 근무를 하면 자연스럽게 통근과 근무시간에 집 밖에 있게 되는데, 하루의 10시간 정도 된다. 취침을 7시간 정도 한다고 하면, 평일 집에서 깨어있는 시간은 7시간 정도이다. 재택근무를 하면, 집에서 깨어있는 시간이 17시간으로 늘어나는 데 이 시공간을 잘 써보고 싶다. 무엇을 할 것인지는 아직 밝힐 수 없지만, 이번 재택근무 때 해볼 생각이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[뉴스 같이 읽기]]></title><description><![CDATA[2020년 7월 27일부터 북저널리즘의 ‘뉴스 같이 읽기’를 하고 있다. 뉴스 같이 읽기란 평일 북저널리즘에 올라오는 3가지 뉴스를 듣거나 읽고, 한 가지 이상에 대해 의견을 남기고 SNS…]]></description><link>https://kyoo32.github.io/newsWithBookjournalism/</link><guid isPermaLink="false">https://kyoo32.github.io/newsWithBookjournalism/</guid><pubDate>Mon, 17 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2020년 7월 27일부터 북저널리즘의 ‘뉴스 같이 읽기’를 하고 있다. 뉴스 같이 읽기란 평일 북저널리즘에 올라오는 3가지 뉴스를 듣거나 읽고, 한 가지 이상에 대해 의견을 남기고 SNS에 인증하는 것이다. 내가 이를 시작한 이유는 첫째로 뉴스를 제대로 읽고 의견을 나누는 경험을 하기 위함이었고, 둘째는 평일동안 매일하는 루틴을 만들고 싶었기 때문이다.&lt;/p&gt;
&lt;p&gt;매일 뉴스를 읽고 댓글을 남기는 것이라면 네이버나 다음의 뉴스창에서도 가능하지만, 북저널리즘을 택한 이유가 있다. 먼저 따로 댓가를 받지 않았고, 내 경험의 후기임을 알려둔다. 북저널리즘을 택한 이유는 북저널리즘만의 뉴스콘텐츠 포맷의 매력과 나의 SNS 중독(?) 때문이다. &lt;/p&gt;
&lt;p&gt;나는 금단현상이 오는 중독까지는 아니지만 습관적으로 인스타그램에 들어간다. 신기한 건 인스타는 아무때나 들어가도 재미있다. 실시간 콘텐츠가 많아서 그런지 생동감도 있다! 운동이나 공부에 대해 스스로 자주 다짐하지만, 결국 누워서 매일 sns을 하는 나를 발견하면서 이런 sns을 그냥 재밌게 이용하자는 생각이 들었다.&lt;/p&gt;
&lt;p&gt;북저널리즘은 ‘젊은 혁신가를 위한 콘텐츠 커뮤니티’라고 자신을 소개하며, 이름은 북과 저널리즘의 합성어로 책처럼 깊이 있게, 뉴스처럼 빠르게 지금 깊이 읽어야 할 주제를 다룬다. 그 형태는 내가 읽는 뉴스도 있고, 출판되는 긴 호흡의 글도 있고, &amp;#x3C;가디언&gt;&amp;#x3C;이코노미스트&gt;와의 협업 콘텐츠도 있다.
&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/90347672-bd957580-e06c-11ea-8a81-011dc64fd21d.jpg&quot; width=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;내가 읽는 뉴스포맷은 평일에 매일 3가지씩 발행되는데, 3명의 에디터가 다양한 주제를 다룬다. 중요한 점은 에디터의 코멘트와 해석을 같이 들을 수 있다는 것이다. ‘이 뉴스 주제는 어떤 관점에서 나왔는지’, ‘이 뉴스와 관련해 어떤 과거의 일이 있었는지’, ‘이 뉴스에 대해 어떤 점을 생각해볼지’ 등의 해설이 있다. &lt;/p&gt;
&lt;p&gt;그리고 정말 이를 들을 수 있다. 뉴스마다 오디오 콘텐츠가 있기 때문이다. 오디오 콘텐츠라면 뉴스의 글자를 그대로 읽는 기계목소리가 떠오르지만, 북저널리즘은 8시 뉴스 기자의 보도처럼 에디터의 해설을 들을 수 있다. 나는 그래서 주로 출근시간에 몰아서 뉴스를 듣고, 점심시간에 글자를 깊이 읽는 루틴을 가지게 되었다.&lt;/p&gt;
&lt;p&gt;여기까지 하면 콘텐츠 회사 같지만, 북저널리즘은 커뮤니티를 표방한다. 내가 느끼는 이 곳의 뉴스 커뮤니티는 오픈채팅방과 북저널리즘 뉴스댓글창, 그리고 개인SNS를 오가는 아주 느슨하고 목적지향적인 공동체이다. 그 목적은 뉴스에 대해 자신의 생각을 말하고, 관련 자료를 함께 공유하는 것이다. &lt;/p&gt;
&lt;p&gt;가장 좋은 점은 SNS을 이용하려는 나의 의도가 완벽히 실행된 것과, 뉴스 주제에 대해 나의 생각이나 의견을 내보려는 습관이 생긴다는 것이다. 아쉬운점은 3개의 플랫폼을 오가서 그런지 정신이 약간 없고, 오픈채팅방 맴버들과 대화를 나누기 어렵다는 것이다. 내 생각은 말하게 되었지만, 대화가 잘 되지는 않는다. &lt;/p&gt;
&lt;p&gt;처음 뉴스 같이 읽기를 계획했던 한달이 되어간다. 다음 달도 같이 읽을 지 말지 모두가 지원할 수 있는데, 나는 고민 중이다. 무료 구독 한달이 끝나가기도 하고, 덕분에 생긴 루틴 습관을 끌어다 생활코딩 같은 코딩분야에 사용해볼까 고민중이다. 생활코딩에서 머신러닝 야학이 생기기도 했고.
&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/90347669-bc644880-e06c-11ea-8385-a0384d4e5eab.jpg&quot; width=&quot;50%&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Data Essentials In SwiftUI]]></title><description><![CDATA[This is the summary of WWDC20 Session ‘Data essentials in SwiftUI(10040)‘. Data Essentials When I start on a new view in SwiftUI there are…]]></description><link>https://kyoo32.github.io/swiftUIEssential2/</link><guid isPermaLink="false">https://kyoo32.github.io/swiftUIEssential2/</guid><pubDate>Mon, 10 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;This is the summary of WWDC20 Session ‘Data essentials in SwiftUI(10040)‘.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;Data Essentials&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;When I start on a new view in SwiftUI there are three key questions I like to think about. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;Three Key Questions&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;What does this view need to do its jos?&lt;/li&gt;
&lt;li&gt;How will the viw manipulate that data?&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Where will the data come from? (Source of Truth)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This question of the Source of Truth is the most important one in the design of your data model.&lt;/p&gt;
&lt;h6&gt;State&amp;#x26;Binding&lt;/h6&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State: the simplest Source of Truth in SwiftUI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;State is designed for transient UI state that is local to a view.&lt;/li&gt;
&lt;li&gt;When we mark this property as state SwiftUI takes over managing its storage. Why is that important? Well remember that our views only exist transiently. After SwiftUI completes a rendering pass the structs themselves go away. But because we mark this property as state, SwiftUI maintains it for us. The next time the framework needs to render this view it reinstantiates the structs and reconnects it to the existing storage. &lt;/li&gt;
&lt;li&gt;Remember State creates a new Source of Truth.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Binding: the tool for sharing right access to any Source of Truth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because some is a value type, Swift would make a new copy of the value. Any changes the view made to the value would only change this new copy, not the original value that SwiftUI is managing for us. So this doesn’t allow the view to communicate with superview. We need a way to share right access to the Source of Truth.&lt;/li&gt;
&lt;li&gt;The dollar sign in the call creates a binding from the state because the projected value of the state property wrapper is a binding. The binding property wrapper creates a data dependency between subviews and superviews. Many built-in SwiftUI controls also take bindings. &lt;/li&gt;
&lt;li&gt;Remember bindings aren’t just for state.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Designing Custom Model&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you should use ObservableObject&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need a data model which is separate from its UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How ObservableObject is defined&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s a class constraint protocol which means it can only be adopted by reference types.&lt;/li&gt;
&lt;li&gt;It has a single requirement: an objectWillChange property. ObjectWillChange is a Publisher, and as the name suggests, the semantic requirement of the ObservableObject protocol is that the publisher has to emit before any mutation is applied to the object.&lt;/li&gt;
&lt;li&gt;By default you get a publisher that works great out of the box but if you need to you can provide a custom publisher.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The mental model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When your type conforms to ObservableObject you are creating a new Source of Truth and teaching SwiftUI how to react to changes. In other words you are defining the data that the view needs to render its UI and perform its logic. SwiftUI will establish a dependency between your data and your view.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data dependency surface&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SwiftUI uses this dependency to automatically keep your view consistent and show the correct representation of your data.&lt;/li&gt;
&lt;li&gt;This is the part of your model that exposes data to your view but is not necessarily the full model. You can separate your data from its storage and lifecycle. You can model your data using value type and manage its lifecycle inside effect with a reference type.  this gives you a single place for all your logic making it easy to reason about all the possible state and mutation in your app.&lt;/li&gt;
&lt;li&gt;Or you can focus on part of your app by having multiple ObservableObject that offer a specific projection onto your data model and are designed to expose just the data that is needed. This works better when you have a complex data model and you want to provide a more tightly scoping validation to part of your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Published property wrapper&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;be able to update the progress and have our UI react to it.&lt;/li&gt;
&lt;li&gt;by publishing right before the value changes. : SwiftUI needs to know when something is about to change so that it can coalesce every change into single update.&lt;/li&gt;
&lt;li&gt;For advanced use case the projected value of @Published is a publisher that you can use to build reactive streams.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a dependency to an ObservableObject &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;three property wrapper that you can use in a view to create.&lt;/li&gt;
&lt;li&gt;ObserveObject: a property wrapper that you can use to annotate properties of your view that hold a type conforming to ObservableObject. This is the most simple and flexible of the tool. ObservedObject does not get ownership of the instance you’re providing to it. It’s your responsibility to manage its lifecycle.&lt;/li&gt;
&lt;li&gt;StateObject: The instance that is assigned to this property is going to be the Source of Truth for this view. Now we can read the model in the view body. SwiftUI will guarantee that the view is always up to date. You can just declaratively describe how to drive the view from the data and SwiftUI will take care of all the rest.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EnvironmentObject: both a view modifier and a property wrapper&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You use the view modifier in a parent view where you want to inject an ObservableObject. And you use the property wrapper in all the views where you want to read an instance of that specific ObservableObject.&lt;/li&gt;
&lt;li&gt;You need to use your ObservableObject in a distant subview and passing it down through views that don’t need the data.&lt;/li&gt;
&lt;li&gt;The framework will take care of passing that value everywhere it’s needed and track it as a dependency only where it is read.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The lifecycle of your ObservableObject&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ObserveObject does not own the lifecycle of its ObservableObject.&lt;/li&gt;
&lt;li&gt;You provide the initial value and SwiftUI will instantiate that value just before running body for the first time. You don’t need to fiddle with OnDisappear anymore.&lt;/li&gt;
&lt;li&gt;SwiftUI will keep the object alive for the whole lifecycle of the view.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Techniques For Integrating Data Model Into App&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;View Update Life Cycle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SwiftUI uses view to create a rendering, and then it’s gone. &lt;/li&gt;
&lt;li&gt;View structs do not have a defined lifetime. The lifetime of a view is separate from the lifetime of the struct that defines it. The struct you create that conforms to the view protocol actually has a very short lifetime.&lt;/li&gt;
&lt;li&gt;The diagram below shows the SwiftUI update lifecycle. Starting at the top, we have your UI. Moving counterclockwise, an event comes in, which causes some closure or action to run. That then results in a mutation of a Source of Truth. Then once we’ve mutated the Source of Truth, we’ll get a new copy of the view, which we’ll use to produce a rendering. That rendering is your UI.&lt;/li&gt;
&lt;li&gt;A slow update:  if there’s expensive, blocking work at any of these points, the performance of your app will suffer. You might drop frames or your app might hang. Avoid Slow Updates&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event sources; These triggers are called event sources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regardless of what triggers the event, the cycle is still the same. We’ll mutate a Source of Truth, update the view, and then produce a new rendering.&lt;/li&gt;
&lt;li&gt;Each of these modifiers takes a parameter such as a publisher or a value to compare. And it also takes a closure. SwiftUI will run the closure at the right time to help you avoid slow updates and keep body cheap.&lt;/li&gt;
&lt;li&gt;SwiftUI will run these closures on the main thread, so if you need to do expensive work, consider dispatching to a background queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An important question to ask is “who owns the data?”&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Summary: Source of Truth Lifetime&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Views are a great tool to tie your data lifetime to. And all of the property wrappers we’ve discussed today work with Views. You can make use of the State and StateObject property wrappers to tie data lifetime to View lifetime.&lt;/li&gt;
&lt;li&gt;SwiftUI’s Scenes each have a unique view tree, you can hang important pieces of data off the root of the tree. This works great with multiple windows.&lt;/li&gt;
&lt;li&gt;what’s great about Apps is that you can use State and other Sources of Truth in an App just like you do in a View. Here we’ll create a global book model for our entire app by using the StateObject property wrapper.&lt;/li&gt;
&lt;li&gt;Process lifetime:  they’re tied to the process lifetime. If your app gets killed, or the device restarts, State won’t come back&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These have an extended lifetime and are saved and restored automatically. Note these are not your model.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SceneStorage is a per-Scene scoped property wrapper that reads and writes data completely managed by SwiftUI. We’ll pass a key, which must be unique to the type of data we’re storing. Then, we can use it just like State.  behaves like State it’s a scene-wide Source of Truth.&lt;/li&gt;
&lt;li&gt;AppStorage: This is app-scoped global storage which is persisted using user defaults. It’s usable from anywhere. AppStorage, like user defaults, is super useful for storing small bits of data, such as settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Bottom Line&lt;/h6&gt;
&lt;p&gt;It’s important to think about what the properties of your data are and what the right Source of Truth to use is. And you should also try and limit the number of Sources of Truth to cut down on complexity. Remember, bindings are completely agnostic to their Source of Truth, which makes them a powerful tool for building clean abstractions.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[App Essentials In SwiftUI]]></title><description><![CDATA[This is the summary of WWDC20 Session ‘App essentials in SwiftUI(10037)‘. App Essentials; how views, scenes and apps work together You can…]]></description><link>https://kyoo32.github.io/swiftUIEssential/</link><guid isPermaLink="false">https://kyoo32.github.io/swiftUIEssential/</guid><pubDate>Mon, 03 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;This is the summary of WWDC20 Session ‘App essentials in SwiftUI(10037)‘.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;App Essentials; how views, scenes and apps work together&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;You can now build an entire app with just SwiftUI. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;Views, Scenes, and Apps&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Views&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Views are important because each view defines a piece of your UI. When you look at an app everything you see is a view. &lt;/li&gt;
&lt;li&gt;But not all views belong to the same app since apps do not have complete control over the entire screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scenes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In SwiftUI we refer to these distinct regions as scenes.&lt;/li&gt;
&lt;li&gt;Instead the platform controls how apps are presented showing pieces of apps in distinct regions. &lt;/li&gt;
&lt;li&gt;A window is the most common way that a scene’s content is shown on screen. Some platforms like iPadOS can show multiple windows side by side. Other platforms such as iOS, watchOS and tvOS prefer to show only a single full screen window for each app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collections of scenes make up the entire content of an app. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Together&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Together apps, scenes and views form a unified hierarchy of ownership.&lt;/li&gt;
&lt;li&gt;The app contains the scenes and the scenes contain views. Our app declaration looks similar to a custom view declaration.&lt;/li&gt;
&lt;li&gt;For example, both views and apps are able to declare data dependencies. Both views and apps also declare a body property defining their user interface content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Understanding Scenes&lt;/h6&gt;
&lt;p&gt;To really understand how this app works, need to know WindowGroup scene which manages user interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Models &amp;#x26; States&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An app can provide a shared model for each scene to use, but the state of the views in those scenes will be independent.&lt;/li&gt;
&lt;li&gt;WindowGroup provides this functionality for app automatically on iPadOS. Each of windows is reflecting a different state in the interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a new view modifier, Navigation title&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each of windows is showing the name of my app as well as detail labels.&lt;/li&gt;
&lt;li&gt;Navigation title on iOS can be used to populate the title in the navigation bar and the app switcher.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scenes especially on MacOS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s very common for apps to support multiple windows by using WindowGroup in your app. Besides supporting multiple Windows macOS also supports grouping its windows together. Via the window menu you can merge open windows into a single tabbed interface. SwiftUI provides this automatically.&lt;/li&gt;
&lt;li&gt;SwiftUI will provide a menu item in the file menu, which supports creating new seen instances.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The life cycle of scenes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They are managed by the platform they’re running on.&lt;/li&gt;
&lt;li&gt;On platforms which support multiple windows such as macOS and iPadOS, WindowGroup can instantiate multiple children.&lt;/li&gt;
&lt;li&gt;Since the platform is in charge of the lifecycle of scenes, there is a new property wrapper this year to help you manage restoration of your view state. The SceneStorage property wrapper can be used to persist your view state. It takes a unique key which identifies the state to be stored. This state will then be automatically saved and restored at the appropriate times by SwiftUI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Customizing Apps&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New Kind App: Document based apps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It automatically manages opening, editing, and saving document based scenes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the new Settings scene type available on macOS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The commands API is powerful and flexible using the same declarative state driven programming model used in views, scenes and apps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[일상의 편리함과 감성적 불편함]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/convenient/</link><guid isPermaLink="false">https://kyoo32.github.io/convenient/</guid><pubDate>Mon, 27 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;문득 익숙한 감정이 신기하다. 분명 어떤 일을 처음 접했을 때 어색하고 신기했는데, 지금은 알아차리지 못할만큼 당연하다. 봄을 찬양하는 글을 쓴 게 그저께 같은데, 어느새 중복날을 지난 덥고 습한 여름이다. 봄의 황사가 올때만 찾던 마스크가 이제는 휴대폰처럼 손에서 떨어지지 않는 필수품이 되어 가고 있다. 또 개인적으로 독립한지 1년이 되었는데, 이제 누군가와 함께 사는 게 어떤지 기억이 잘 나지 않는다. 인간은 정말 적응의 동물인가 보다.&lt;/p&gt;
&lt;p&gt;재미있는 건 편함을 기준으로 보면, 당연의 변화 저항이 꽤 큰 것 같다는 점이다. 어디서는 이 현상이 백래시일 수도 있고, 일시적인 불편함에 대한 불만일 수도 불행일 수도 있다. 혹시 휴대폰을 잃어버린 적인 있는가? 혹은 요즘 발생한 인천 수도 유충문제까지는 아니더라고, 집의 수도를 마음껏 못 써본 적이 있는가? 아니면 매일 재택근무를 하다가, 주5일 내내 통근을 하게된 적이 있는가? 평소에 잘 쓰던 앱이 업데이트 이후 UX가 바뀌어서, 속으로 제작사를 욕한적이 있는가?&lt;/p&gt;
&lt;p&gt;휴대폰을 잃어버리면, 평소에 얼마나 휴대폰에 의존했는지 의존한 순간마다 알 수 있다. 알람으로 깨어서 몇시인지 바로 볼 수가 없고, 버스가 언제 오는지 원하는 만큼의 정보를 얻을 수 없고, 지루한 시간을 완화해줄 음악을 들을 수 없고, 연락할 사람에게 내 상황을 전달하는 과정이 길어지고, 인터넷으로 구매하기 어려워진다. 사람마다 정도의 차이는 있겠지만, 휴대폰이 없던 시절이 기억나지 않을 만큼 익숙하다면, 잃어버리면 불편할 것이다.&lt;/p&gt;
&lt;p&gt;그런데 불편한 게 유행의 감성이 되거나 창작의 원천이 되기도 한다. 음악 앱이 있지만 LP 레코드가 힙하다고 말해지고, 뉴트로라는 이름으로 과거의 존재한 브랜드가 다시 팔리고 있다. 또한 빨대를 넣을 수 있는 마스크처럼 불편한 상황에서 개발되는 특허도 있고, &amp;#x3C;너희가 ‘차카타파’의 진심을 아느냐&gt;라는 단편처럼 불편한 상황이 문학적 소재가 되어 주기도 한다. 혹은 불편함을 해결하는 앱/웹 서비스가 생겨나기 한다. &lt;/p&gt;
&lt;p&gt;유행의 감성은 다른 말로 아날로그라고 칭해지는데, 내가 생각하는 불편의 한 속성은 기다림이다. 로켓배송에 익숙해진 사람들이 블루보틀 카페에 가서는 드롭커피를 기다린다. 요즘 내가 자주 기다리는 것은 버스나 엘르베이터나 택배, 카톡 혹은 연재 작품밖에 없다. 그런데 예쁜 카페에 앉아서, 커피를 기다린다니 얼마나 감성적인 일인가! 라디오나 촛불, 종이 책이 아직 사라지지 않은 것처럼, 인간은 적응의 동물이면서 욕심도 많은 것 같다. 일상의 편리함과 감성적 불편함을 모두 포기할 수 없나 보다. &lt;/p&gt;
&lt;p&gt;그래도 버려야할 편리함 혹은 불편함이 있는데, 바로 함께 즐기지 못하는 것들이다. 내가 편하기 위해 누군가 불편하거나, 내가 향유하는 감성들이 누군가에게 상처가 되거나 환경에 공해가 된다면, 잘 포기하는 것이 인간의 다음 단계가 아닐까 싶다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Basic of SwiftUI]]></title><description><![CDATA[This is the summary of WWDC20 Session ‘Introduction to SwiftUI(10119)‘. The way SwiftUI works A view is a struct It conforms to the view…]]></description><link>https://kyoo32.github.io/swiftUIBasic/</link><guid isPermaLink="false">https://kyoo32.github.io/swiftUIBasic/</guid><pubDate>Mon, 20 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;This is the summary of WWDC20 Session ‘Introduction to SwiftUI(10119)‘.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;The way SwiftUI works&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A view is a struct&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It conforms to the view protocol, rather than a class that inherits from a base  class like UIView. This means your view doesn’t inherit any stored properties. It’s allocated on the stack, and it’s passed by value.&lt;/li&gt;
&lt;li&gt;no additional allocation or reference counting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small, single-purpose views&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Behind the scenes, SwiftUI aggressively collapses your view hierarchy into an efficient data structure for rendering.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Views are incredibly lightweight in SwiftUI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because extracting a subview has virtually no runtime overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The same primary role of View: they define a piece of UI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A view in SwiftUI and a view in a traditional UI framework fulfill the same primary role: they define a piece of UI.&lt;/li&gt;
&lt;li&gt;The view protocol only requires a single property: body. Which is itself a view. The rendering of any view you might build, like SandwichDetail, is just the rendering of its body.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A view defines its dependencies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When SwiftUI sees a view with a state variable, it allocates persistent storage for that variable on the view’s behalf. One of the special properties of state variables is that SwiftUI can observe when they’re read and written. Because SwiftUI knows that zoomed here was read in body, it knows that the view’s rendering depends on it.&lt;/li&gt;
&lt;li&gt;when the variable changes, the framework is going to ask for the body again, using that new state value so it can refresh the rendering. Traditional UI frameworks don’t distinguish between state variables and plain old properties. However, I found the distinction to be incredibly clarifying.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In SwiftUI, every possible state your UI might find itself in an authoritative piece of data often called “a source of truth.”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collectively, your state variables and your model constitute the source of truth for your entire app.&lt;/li&gt;
&lt;li&gt;For example, the offset of a scroll view, the highlightness of a button, the contents of a navigation stack…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can neatly classify every property as either a source of truth or a derived value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recall, SwiftUI can observe when state variables are read and written. So when one changes, it knows which renderings to refresh. The framework refreshes a rendering by asking for a new body, making a new aspectRatio view from scratch, thereby overriding the contentMode and any other stored properties. This is the mechanism by which all derived values are kept up-to-date in SwiftUI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read/Write&amp;#x26;SourceOfTruth/DerivedValue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every state variable is a read-write source of truth.&lt;/li&gt;
&lt;li&gt;Every plain old property is a read-only derived value.&lt;/li&gt;
&lt;li&gt;SwiftUI invents a tool called “binding” for passing read-write derived values.&lt;/li&gt;
&lt;li&gt;Constant can serve as a perfectly good read-only source of truth.&lt;/li&gt;
&lt;li&gt;Observable objects: your state variables and your model constitute the source of truth of your entire app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SwiftUI automatically manages dependencies on your behalf, recomputing the appropriate derived values so this never happens again.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a traditional UI framework, every time a view reads a piece of data, it’s creating an implicit dependency. It’s a dependency because when that data changes, the view needs to update to reflect the new value. When it fails to, that’s a bug.&lt;/li&gt;
&lt;li&gt;These kinds of mistakes are easy to make when you mutate your subviews directly in event handler callbacks rather than updating a source of truth and deriving your UI from that. The challenge of managing this complexity should be familiar to anyone who has tried to juggle asynchronous callbacks or implement interruptible animations. These completion handlers can fire at all kinds of unexpected times.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Outro&lt;/h5&gt;
&lt;p&gt;No one pretends synchronizing multi-threaded code is easy. Race conditions and UI inconsistencies share the same underlying source of complexity. Many of the views we all work on have to handle way more than four events. Model notifications, target-actions, delegate methods, lifecycle checkpoints, completion handlers— they’re all events&lt;/p&gt;
&lt;p&gt;You’re human. You can only fit so much in your head at a time. As we add features the number of possible orderings explodes, and the chance we overlook one increases to the point where bugs are inevitable.&lt;/p&gt;
&lt;p&gt;When using a traditional UI framework the simplicity that results from collecting all of your view updates into a single method. When you do this, you break the back of the curve we just saw, because when there’s only one method, there’s only one possible order it can be called in.You may not have thought about it in this way, but this pattern forces you to define a source of truth for every possible state your UI might find itself in and derive your view’s properties from that collective source of truth. If this sounds familiar, it’s because SwiftUI was directly inspired by this best practice. We’ve codified it in the framework by making “body” the only entry point that is ever called.&lt;/p&gt;
&lt;p&gt;This is why Views, but also Apps and Scenes and any other SwiftUI abstractions with a body work the way they do. Because you’re only human, and this pattern of simply fetching new instances for the parts of the UI that changed scales with your brain, virtually eliminating UI inconsistencies.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Basic of Widget2]]></title><description><![CDATA[This is the summary of WWDC20 Session ‘Design Great Widget(10103)‘. 1. How to Design Widget Widget UX in iOS14 The information your widget…]]></description><link>https://kyoo32.github.io/widgetBasic2/</link><guid isPermaLink="false">https://kyoo32.github.io/widgetBasic2/</guid><pubDate>Mon, 13 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;This is the summary of WWDC20 Session ‘Design Great Widget(10103)‘.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1. How to Design Widget&lt;/h4&gt;
&lt;h5&gt;Widget UX in iOS14&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;The information your widget chooses to surface can be more up to date and contextual than ever and drag and drop editing gives people direct control over their widgets in an intuitive and flexible way.&lt;/li&gt;
&lt;li&gt;People can now add these new widgets directly onto their home screen pages.&lt;/li&gt;
&lt;li&gt;Smart stacks dynamically change and adapt to how you use them. Based on your behavior and context, a smart stack will automatically rotate to show you the most relevant widget at a given time. So the information you’re looking for is already there before you even have to lift a finger.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Three Principles&lt;/h5&gt;
&lt;p&gt;To create a great widget you need to understand what the most useful information and experiences are that people return to your app for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Personal: they can allow for a deeper emotional connection with a piece of your app or an experience that it enables for someone.&lt;/li&gt;
&lt;li&gt;Informational: Surfacing the right information can save people from doing commonly repeated actions in your app.&lt;/li&gt;
&lt;li&gt;Contextual: Context helps surface the right information at the right moment and allows for a better experience that at its best feels like it’s magically predicting someone’s needs and next steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Editing&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;This is an important concept to think about in the ideation phase because it might change how much information you try to put into a single widget.&lt;/li&gt;
&lt;li&gt;In iOS 14, your widgets will jiggle just like apps do in edit mode and you can tap on a widget here to flip it around and see what it allows for you to edit.&lt;/li&gt;
&lt;li&gt;iOS 14 let you add as many additional widgets as you want and edit each one to show a different set of information. One of the best parts of this feature is that it eliminates the need to create complex widget layouts that represent different entities of information combined into a single widget and instead lets a person choose how much information they want to see from your app by adding several widgets and editing them to show just what they want to keep track of.&lt;/li&gt;
&lt;li&gt;Consider what options you could offer to people that would maximize the utility and flexibility that people might get out of your widget.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Multiples&lt;/h5&gt;
&lt;p&gt;Another thing to consider in the ideation process is deciding on if you should offer multiple widgets&lt;/p&gt;
&lt;h4&gt;2. Decide spec&lt;/h4&gt;
&lt;h5&gt;Size &amp;#x26; Interactions&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Small&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The small widget is all about the most useful piece of content from your app in a size that constrains how much content can actually fit in it. &lt;/li&gt;
&lt;li&gt;The small widget supports a single tap target. Tapping it should deep link to the content that’s on the widget. Where you deep link to will depend on how your app is structured.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Medium &amp;#x26; Large&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our medium and large widgets are familiar shapes. &lt;/li&gt;
&lt;li&gt;Both sizes fit more content and support multiple tap targets. Tapping a piece of content in a medium or large widget should also deep link you to the displayed content that’s on the widget&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Three Tap Styles&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fill Style&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fill style is best for when you’re deep linking into a single piece of content.&lt;/li&gt;
&lt;li&gt;Every small widget uses fill style since it only supports one tap target.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cell Style&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cell style is best for when you’re selecting a piece of content in a widget that lives in its own shape&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content Style&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content style is great for when you’re selecting a piece of content that lives un-contained in a widget.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Content&amp;#x26;Personality&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Ask yourself questions like “What are people looking for when they launch my app?“. Also find distinct items of information that people find useful in your app.&lt;/li&gt;
&lt;li&gt;When designing our widget set, we looked at finding personality through how our apps look. &lt;/li&gt;
&lt;li&gt;Another approach for finding personality is taking inspiration from your app icon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Partterns&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Layout Set Pattern &amp;#x26; Guide&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a layout that expands across all three sizes&lt;/li&gt;
&lt;li&gt;a layout that is completely unique across sizes&lt;/li&gt;
&lt;li&gt;Make sure not to scale up your smaller widget into your larger widget.&lt;/li&gt;
&lt;li&gt;Think about the information you’re working with and what makes the most sense for each size.&lt;/li&gt;
&lt;li&gt;If you don’t have more information to show in your larger sizes though, it’s fine to only support specific sizes of your idea. All sizes for an idea aren’t required.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Frame Layout Pattern &amp;#x26; Guide&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Standard&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are mix of single item and denser multi-item summary layouts. These patterns serve as a helpful starting place and a good way to try out an idea in a format that already works well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the default sixteen point layout margins across all sizes to make sure the content in your widget feels consistent when it’s place next to other widgets.&lt;/li&gt;
&lt;li&gt;For layouts with graphical shapes like circles and inset platters use tighter eleven point margins across all sizes. &lt;/li&gt;
&lt;li&gt;Shape corners that sit close to the edges of your widget should appear concentric with the widgets corner radius. Since the widgets corner radius changes across different device sizes, we provide a Swift UI container that you can assign to shapes in your widget that will make them concentric with the widgets corner radius without needing to manually specify corner radius values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Other Design Guide&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Font&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should use SF Pro or other variants of San Francisco that are available like SF Mono and SF Pro Rounded.&lt;/li&gt;
&lt;li&gt;If a custom font is important to how your widget represents its brand or personality make sure it’s applied in a way so that your widget still feels at home alongside other widgets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DarkMode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A widget should look great in both light and dark appearance modes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Placeholder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every widget must provide a placeholder which is shown when the system has no way of displaying your widget’s data. &lt;/li&gt;
&lt;li&gt;You should show the base graphical elements in this state and block in areas of text where your information is shown in the layout. This way, when the system goes from place holder to the proper data the content can replace the static elements without having the layout or color shift around.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should only use a logo in your widget if your app is an aggregator of content from different sources like these examples here. To keep this treatment consistent across different widgets, your logo should always sit in the top right corner.&lt;/li&gt;
&lt;li&gt;Avoid using word marks in the space and anywhere else in your widget.&lt;/li&gt;
&lt;li&gt;Another thing to avoid is putting your app icon in your widget.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Etc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid putting your app name in your widget as it will feel redundant with the app label that already appears underneath of it on the home screen.&lt;/li&gt;
&lt;li&gt;Don’t put text that instructs a user or talks to them, instead, if you feel there’s something important to communicate do it in a graphical way.&lt;/li&gt;
&lt;li&gt;When displaying chronological information on a Widget, don’t use language like “last updated” or “last checked”.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Basic of Widget]]></title><description><![CDATA[This is the summary of WWDC20 Session ‘Meet WidgetKit(10028)‘. 1. Definition and Goal of Widget Definition A widget elevates key content…]]></description><link>https://kyoo32.github.io/widgetBasic/</link><guid isPermaLink="false">https://kyoo32.github.io/widgetBasic/</guid><pubDate>Mon, 06 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;This is the summary of WWDC20 Session ‘Meet WidgetKit(10028)‘.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1. Definition and Goal of Widget&lt;/h4&gt;
&lt;h5&gt;Definition&lt;/h5&gt;
&lt;p&gt;A widget elevates key content from your app and displays it where people can see it at a glance on iPhone, iPad, and Mac. Useful and delightful, widgets can also help people personalize their iPhone Home screens in unique ways.&lt;/p&gt;
&lt;h5&gt;Three goals of Widget&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Glanceable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Widget is not a mini app. The content is the focus.&lt;/li&gt;
&lt;li&gt;People only spend a few moments on their Home screen before they springboard off to somewhere else. They shouldn’t need to interact with or do anything more than take a quick peek to get the most value out of your widget.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relevent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Especially on our mobile platforms — where space is at a premium — we really wanted a way to make sure the right widget is up and available as soon as you need. Smart Stacks are a collection of widgets that will automatically rotate to show the right widget at the top. We used on-device intelligence to help show the right thing at the top of the stack.&lt;/li&gt;
&lt;li&gt;As a developer, you can help drive this using Siri Shortcuts donations, the system that we’ve been building upon in previous years. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Personalization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support as many sizes as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. How it Works&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mulitplatform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It runs across iOS, iPadOS, and macOS.&lt;/li&gt;
&lt;li&gt;built entirely with SwiftUI. SwiftUI also makes it super easy to support features like Dynamic Type and Dark Mode nearly automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Background&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The average person goes to the Home screen more than 90 times a day and only spends a few moments there. The last thing you want to see is your Home screen full of loading spinners.&lt;/li&gt;
&lt;li&gt;WidgetKit extensions are background extensions that return a series of view hierarchies in a timeline. This avoids the entire “launch a process, load, and then present a view.” They are ready to go and immediately glanceable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stateless UI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not support scrolling within the widget, interactive elements like switches and other system controls&lt;/li&gt;
&lt;li&gt;No videos or animated images&lt;/li&gt;
&lt;li&gt;Easily tap on the widget and deep link into your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. Components of Widget&lt;/h4&gt;
&lt;h5&gt;Defining&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;kind&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;configuration &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static / intent (dynamic)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;supportedFamilies&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;small / medium / large&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Placeholder&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Placeholder UI is the default content of your widget. It should be a representation of your widget kind, but nothing more than that. There should not be any user data in this UI. &lt;/li&gt;
&lt;li&gt;The other important thing to note is this UI is retrieved only sparingly.There are no guarantees on when that will occur.Typically we will only ask for a new placeholder UI on a device environment change. For example, if the dynamic typesetting of the device changes.&lt;/li&gt;
&lt;li&gt;Great placeholder UIs show a representation of what your kind of widget is.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Views&lt;/h5&gt;
&lt;p&gt;There are three types of UI experiences you need to think about&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Placeholder&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Snapshot&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where the system needs to quickly display a single entry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timeline&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Timeline&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Timelines are a combination of views and dates that are returned, which allow you to say at what time a particular view should be shown.&lt;/li&gt;
&lt;li&gt;Timelines should typically be returned for a day’s worth of content.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Reloads&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Reloads are where the system will wake up your extension and ask for a new timeline for each widget placed on the device.&lt;/li&gt;
&lt;li&gt;Reloads help ensure that your content is always up-to-date for your user.&lt;/li&gt;
&lt;li&gt;The system will take into account your ReloadPolicy and determine the best time to reload your widget.&lt;/li&gt;
&lt;li&gt;Widgets viewed frequently will receive more reloads. Widgets viewed infrequently will receive fewer reloads.&lt;/li&gt;
&lt;li&gt;The system will also force reloads for whenever a device environment changes. The system will determine the best time to reload your widget but there are also other events which may need you to ask the system for a reload from your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Feeding Intelligence&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;The system can intelligently rotate to the most relevant widget and your app and widget can help feed this intelligence.&lt;/li&gt;
&lt;li&gt;Donating Shortcuts&lt;/li&gt;
&lt;li&gt;TimelineEntryRelevance API: annotate timeline entries with relevance values&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[변화하는 사람들]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/changing_people/</link><guid isPermaLink="false">https://kyoo32.github.io/changing_people/</guid><pubDate>Mon, 29 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이번 주말 등산을 다녀왔다. 나는 등산이 싫다. 마라톤이나 조깅을 높낮이 있는 땅에서 하는 기분이고, 발목과 무릎에 무리가 가는 느낌이 있어서 싫어한다. 그러나 최근 여행으로 자연을 충족시킬 수 없고, 밖에서 하는 활동도 줄어서 등산이 가보고 싶어 졌다. 파이팅 넘치는 친구가 약속도 얼른 잡아주고 산에 대한 정보도 알아봐 주어서, 어쩔 수 없다는 듯 같이 갈 수 있었다. 등산을 다녀온 느낌은 생각보다 나쁘지 않았다. 어쩌면 자주는 아니어도 종종 등산을 갈지도 모르겠다.
&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/85961231-0ec9a700-b9e4-11ea-9808-708597ccc9d5.JPG&quot; alt=&quot;IMG_3944&quot;&gt;&lt;/p&gt;
&lt;p&gt;한 5년 전의 예전의 내가 지금의 나를 보면, 본인인지 못 알아볼 정도로 스스로 변화된 게 많다고 느낀다. 외적인 스타일도 1년에 한 번씩 바뀌기도 하지만, 나의 선호나 의견과 성격도 꽤 바뀐 것 같다. 등산처럼 예전에는 중년(?)의 것들이 나와 맞지 않았는데, 요즘엔 먼저 찾을 때도 있다. 나물이나 들깨, 고수 등은 잘 안 먹었는데, 요즘은 없어서 못 먹는다. 그리고 예전에는 조금 더 느긋하고 감성적이었는데 지금은 그 특징이 많이 옅어졌다. &lt;/p&gt;
&lt;p&gt;5년이라면 길지만 짧기도 한 시간인데, 나는 왜 그리고 어떤 계기로 변했을까? 딱 잘라서 말할 수 없다. 최근 본 성격 코칭의 글에 따르면 성격은 기질과 경험과 환경의 조합이라고 하는데, 나의 여러 변화도 여러 경험과 변화된 환경들에서 왔을 것 같다. 사실 중장기적으로 보지 않아도, 나는 하루에도 몇 번씩 바뀐다. 사회적 가면이 여러 개 있어, 중국 변검처럼 하루에도 몇 번씩 가면을 갈아치운다. 사회생활일 뿐이라고 말할 수 있지만, 나의 사회적인 행동과 말, 모습들도 나의 성격 중 하나라고 생각한다.&lt;/p&gt;
&lt;p&gt;재밌는 건 사회적 가면이 여러 개인 것처럼, 그 사회 안에서 나의 스펙트럼 위치도 바뀐다는 것이다. 스펙트럼에는 외향적-내향적, 비관적-낙관적, 이성적-감성적, 폐쇄적-수용적 등 다양한 특질이 있고, 양쪽은 반대의 극단이다. 나는 어는 사회에서 외향적이고 낙관적이며 감성적, 수용적이지만, 어떤 사회에서는 내향적, 비관적, 이성적이며 폐쇄적이다. 이는 그 사회의 사람들의 평균에 따라 달라지는데, 대체로 나보다 내향적인 집단에 들어가면 나는 주로 외향적인 사람으로 여겨진다.&lt;/p&gt;
&lt;p&gt;나의 이런 변화에 매일 다짐하고 스스로 지키려 하는 게 있다. 사람이 다른 사람을 고쳐쓸 수는 없지만, 각각의 사람들은 혼자서 곧 잘 변화한다는 걸 기억하는 것이다. 고등학교 때 드세다고 생각했던 친구는 다시 만나자 정말 온순했고, 개성 있다고 생각했던 대학교 친구도 다시 만나자 평범하게 고달파했다. 오랜만에 보는 사람뿐만 아니라, 자주 보는 사람들도 종종 변화한다. 그리고 변화했다가 예전처럼 또 변화할 수도 있다. 가족도 친구도 동료도 나까지 모두 그렇다.&lt;/p&gt;
&lt;p&gt;하나의 사건을 두고 나의 주변 사람의 특성을 결론짓지 않으려고 매번 나를 독려한다. 이 사람은 내가 만나는 곳에서는 이런 모습이지만, 다른 사회에서는 전혀 다른 사람일 수도 있다. 그리고 내가 변했던 것처럼 지금의 모습은 이렇지만, 미래에는 다를 수도 있다. 또한 사람에게 특성이나 성격을 빼면, 그때그때의 감정과 이모저모의 생각만 남는다. 그래서 사람의 특성에 대한 대화보다 감정은 어떠한지, 생각은 어떠한지 나누는 대화를 더 많이 하려고 한다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[나의 경제 생각]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/finance/</link><guid isPermaLink="false">https://kyoo32.github.io/finance/</guid><pubDate>Mon, 22 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;한국은 문맹률이 낮고 정규 교육과정에서 국어, 영어, 수학을 깊게 많이 가르치지만, 정규 교육을 경시하는 분야가 있다. 바로 경제인데, 이달 메리츠자산운용 대표 존리는 ‘글은 몰라도 (살아지지만), 삶을 영위하는 게 힘들어지기 때문 금융 문맹은 정말 심각하다. 금융 문맹은 전염병과 같은 것으로, 우리가 교육을 못한 일본처럼 안 되려면 금융교육을 잘해야 한다’는 말까지 했다. 경제교육과 금융교육은 간단히 말해 각각 이론과 실전으로, 교육방식은 다를 수 있지만 어느 하나 불필요한 것은 아니다.&lt;/p&gt;
&lt;p&gt;나는 다행히(?) 고등학교 때 훌륭한 경제 교과 선생님을 만나, 수행평가 문제로 모의주식 투자 후 느낀 점을 쓰는 등, 기초적인 이론과 생생한 실전을 접할 수 있었다. 그리고 사회인이 된 이후, 내 경제살림은 오롯이 내가 운영(?)하면서 여러 시행착오를 거칠 기회가 있었다. 현재는 경제적인 독립과 조기 은퇴(Financial Independence, Retire Early; 파이어족)라는 거창한 장기적인 경제 목표도 있다. 요즈음은 목표를 이루기 위해, 이론이든 실전이든 경제 정보를 찾아보고 있다.&lt;/p&gt;
&lt;p&gt;그런데 최근에 경제 이론 과목을 공부하게 되면서, 경제에 대해 느낀 점이 있다. 개인들에게 금융은 일차적으로 잘 먹고 잘 살기 위한 수단이지만, 인간 사회에서 경제는 추상적인 인간들의 또 다른 사회라고 할 만큼 복잡하고 매력적인 분야라는 것이다. 여기에 경제는 증명 가능한 사회과학으로, 최선의 선택을 통해 더 나아질 수도 있고 안 좋아질 수도 있는 유동적인 것이다. 게다가 자연과학이 규명되지 못한 자연의 원리를 탐구하듯이, 경제는 사람들의 심리를 탐구하기도 한다. &lt;/p&gt;
&lt;p&gt;예를 들어 경제학에 공공선택이론(public choice)이라는 게 있는데, 그 내용을 살펴보면 경제는 다른 분야를 아우르는 모둠 학문이라는 생각이 든다. 공공선택이론은 말 그대로 공적인 선택에 대한 방식과 효과 등을 탐구하는 이론인데, 가장 잘 알려지고 사용되는 방법은 다수결 투표제도이다. 다수결 투표는 투표자가 순편익이 가장 큰 선택을 하고, 투표자는 하나의 봉우리를 가지는 선호(single-peaked preference)나 여러 개의 봉우리를 가지는 선호(multiple-peaked preference)를 가진다고 전제한다.&lt;/p&gt;
&lt;p&gt;여러 개의 봉우리를 가지는 선호자가 없다면, 투표는 언제나 모두가 만족하는 결과를 찾을 수 있다. 그러나 여러 개의 봉우리를 가지는 선호자가 있다면, 최선의 선택지 없이 어떤 선택지를 택해도 반박할 선택지가 존재하는 순환 현상에 빠진다. 단순한 투표에는 순환현상이 나타나지 않지만, 투표에 상정되는 안건이 여러 개라면 순환현상은 일반적이다. 국회의원이나 대통령 선거가 그러하다. 출마자들은 경제, 복지, 문화 등 여러 분야의 공약을 한꺼번에 제안한다. &lt;/p&gt;
&lt;p&gt;증명된 바로, 순환현상이 나타나기 전에 안건들의 표결 차례를 조정한다면 순환현상 없이 원하는 방향으로 결과를 낼 수 있다. 이를 의제조작(agenda manipulation)이라 하며, 이를 실행하는 사람을 제안자(agenda setter)라고 한다. 선거철에 특정 언론이나 특정 정치인이 어떤 이슈로 사람들의 이목을 끄는 이유 중 하나이다. 혹은 정치적 결탁을 통해, 여러 개의 봉우리를 가지는 선호를 결탁한 쪽으로 하나의 선호로 만들 수 있다. &lt;/p&gt;
&lt;p&gt;하나의 사례만 보아도 경제가 풀고 있는 현상이 다층적이고 범위가 넓다. 이런 분야를 머리 아프게 공부하면, 돈을 조금 더 잘 벌 수 있는 것 이외에 뭐가 더 좋을까? 나는 경제를 보는 기준을 만들어 준다고 생각한다. 어떤 사회문제가 발생하면, 사람들은 자신의 도덕적 기준에 따라 평가한다. 그러나 경제문제가 발생하면, 자신에게 어떤 이득이나 불이익이 있는지 따져보기만 한다. 이론이든 실전이든 경제를 알수록, 경제에 어떤 관점을 취할지 선택지가 많아진다. &lt;/p&gt;
&lt;p&gt;우주시대나 인공지능, 그리고 팬더믹 같이 우리가 경험해보지 못한 시대와 현시대의 경제에 대해 의견을 낼 수도 있다. 그리고 비판적으로 질문을 할 수도 있다. 투자하는 돈은 어느 시장으로 흘러가야 사회에 가장 좋은가? 우주에서 화폐는 어떤 형식을 사용해야 하는가? 부동산 정책을 만들 때 부동산의 생필품으로 봐야 하는가, 사치품으로 봐야 하는가? 환경오염 허용치의 적정량은 얼마인가?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[인기 없는 늙은 목소리]]></title><description><![CDATA[최근에 눈이나 마음으로 울면서 본 두 개의 수필집이 있다. 그중 하나는 <임계장 이야기>이다. 임계장은 
임시 계약직 노인장의 줄임말로, 이런 상태의 노동을 하고 계시는 조정진 작가가 경험을 엮은 것이다. 조정진 님은 38년간 공기업을 다니다 201…]]></description><link>https://kyoo32.github.io/unpopular_oldVoice/</link><guid isPermaLink="false">https://kyoo32.github.io/unpopular_oldVoice/</guid><pubDate>Tue, 26 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;최근에 눈이나 마음으로 울면서 본 두 개의 수필집이 있다. 그중 하나는 &amp;#x3C;임계장 이야기&gt;이다. 임계장은
임시 계약직 노인장의 줄임말로, 이런 상태의 노동을 하고 계시는 조정진 작가가 경험을 엮은 것이다. 조정진 님은 38년간 공기업을 다니다 2016년에 은퇴를 했다. 그동안 모아놓은 돈과 퇴직금은 예상치 못한 자식과 이사 변수로 눈 깜짝할 새에 사용된다. 생활을 이어나가야 했던 조정진 님은 시급 노동자가 되었다. &lt;/p&gt;
&lt;p&gt;4년 사이 버스 회사 배차원부터 경비원, 터미널 보안요원까지 경험한 작가는 임계장을 일상에서 쉽게 만날 수 있다고 말한다. 업무량이 많고 작업환경이 위험해 청년 구직자가 기피하는 곳에 임계장이 있다고 한다. 임계장의 다른 별명은 고르기도 쉽고, 다루기도 쉽고, 자르기도 쉽다는 고다자이다. 대기업을 다녔든 공기업을 다녔든, 은퇴 후 시간제 인력시장의 구직자는 고다자인 임계장 취급을 받는다고 한다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;정오가 넘도록 쓸고, 담고, 치우고, 흩어진 것들을 묶어 날랐다. 그래도 태풍의 잔해들은 줄어들지 않았다. 하수구가 토사로 막히는 바람에 흙을 걷어 내느라 애를 먹었다. 막힌 곳이 한두 군데가 아니었다. 다음날 새벽까지도 일이 끝나지 않았다… 뒹구는 낙엽을 보고 예전 같으면 아련한 감성이 솟아났을 텐데 이제는 화부터 치밀게 된 것이다. 스스로가 놀랍고 서글펐다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;부끄러운 고백이지만, 이 책을 읽고 최근 주민의 폭행과 괴롭힘으로 돌아가신 경비원의 사례를 알기 전에, 아빠 뻘되는 많은 분들이 이렇게 돈벌이를 하고 있는지 전혀 몰랐다. 주위에 시급 노동자로 일하는 어른이 없을뿐더러, 취업은 내 주위 나이대 친구들의 이야기인 줄로만 알았다. 물론 고 김용균 씨처럼 비정규직으로 열악한 환경에서 일하는 젊은 사람들도 많다. 하나의 차이는 사회가 주는 관심과 시선이라고 생각한다. &lt;/p&gt;
&lt;p&gt;책에도 나왔듯이, 노인 노동자가 일하다 아프면 사용자는 노환이 왔다고 말한다. 스스로 선택하는 죽음이 아닌 이상, 노인장의 사고사는 젊은 노동자의 것만큼 이슈가 되지 못한다. 생각해보면 노동의 세계에서뿐만 아니라, 많은 분야에서 노인은 관심을 받지 못하고 부정적인 시선으로 보여진다. 2018년 기준 대한민국의 65세 이상 고령인구는 14.8%이다. 지나가는 사람의 10명 중 한 명은 고령인데, 정말 고령인구를 본 적이 있던가?&lt;/p&gt;
&lt;p&gt;지금 생각나는 고령인구는 태극기부대, 폐지 줍는 분들, 노약자석에 앉아 있는 분들이다. 개인으로 유명한 분들은 교훈을 주려는 이어령 교수, 젊은 세대에 편입돼 문화를 만드는 박막례 할머니, 최근 사회 정치적 논란의 중심인 이용수 할머니 정도이다. 특출 난 재능이나 역사적 경험이 없는 개인이라면, 노령인구는 내 머릿속에 가난하거나 무기력하거나 정치적인 사람으로 그려진다. 의미 논란은 있지만, 한국의 사상이라는 장유유서는 사회 속에서 허울뿐인 말이다.&lt;/p&gt;
&lt;p&gt;그런데 한국에 사상이라도 있어서 그나마 다른 나라보다 나아 보인다. 코로나 유행 중인 서구 고령사회들에서 Boomer Remover라는 말이 바이러스처럼 돌고 있는 걸 보면, 한국이 그나마 나은 것이라는 안도와 씁쓸함이 느껴진다. 서구 사회도 워런 버핏처럼 특출 나지 않으면, 노령인구는 성조기 부대나 무기력하거나 가난하게 그려지는 듯하다. 한국이 최소한의 배려는 있지만, 한국이든 타 국가든 사회 속 노인 배제는 더 심해질 듯하다.&lt;/p&gt;
&lt;p&gt;뉴스를 스마트폰으로 찾아보는 노인을 본 적이 있는가? 트위터를 사용하는 65세 이상을 본 적이 있는가? 키오스크를 잘 사용하는 할머니를 본 적이 있는가? 디지털네이티브 세대가 60대가 되면 어떠한 세상이 될지 모르겠지만, 현재 노인인구는 현실세계에서도 점차 커져가는 디지털 세상에서도 배제되어 있다. 그들이 주목받는 때는 선거철뿐이다. 나 살기도 바쁘지만, 내가 할 수 있는 건 그들의 상황을 알아주고 관심을 주는 것이다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[iOS Layout Process의 이해]]></title><description><![CDATA[오토 레이아웃 기본 프로세스 In ‘The Layout Process’   오토 레이아웃을 통해 화면이 그려질 때, 아래 3가지 과정(Updating Constraints, Layout, Display)을 거쳐야 합니다.   1.Updating…]]></description><link>https://kyoo32.github.io/iOS_LayoutProcess/</link><guid isPermaLink="false">https://kyoo32.github.io/iOS_LayoutProcess/</guid><pubDate>Mon, 18 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;오토 레이아웃 기본 프로세스&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/&quot;&gt;In ‘The Layout Process’&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  오토 레이아웃을 통해 화면이 그려질 때, 아래 3가지 과정(Updating Constraints, Layout, Display)을 거쳐야 합니다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.Updating Constraints&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bottom-up으로 진행(subview → superview)&lt;/li&gt;
&lt;li&gt;2.layout과정에서 뷰 프레임을 설정하는 데 필요한 정보를 준비합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.Layout&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top-down으로 진행(superview → subview)&lt;/li&gt;
&lt;li&gt;실제로 constraint system 결과를 뷰에 적용합니다. : OS X는 뷰의 프레임을 설정, iOS는 뷰의 bounds와 center를 설정.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.Display&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top-down으로 진행(superview → subview)&lt;/li&gt;
&lt;li&gt;오토레이아웃 사용여부와 관계없이, 뷰를 렌더합니다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각의 과정은 이전 과정에 의존적입니다. 변화가 있는 layout이 아직 진행되지 않았다면, display과정이 이를 촉발시킵니다. 마찬가지로, 변화가 있는 updating constraints과정이 아직 진행되지 않았다면, layout과정이 이를 촉발시킵니다.&lt;br&gt;
3가지 과정은 순차적인 단방향으로만 진행되지 않습니다. constraint를 사용하는 레이아웃 프로세스는 iterative 합니다. layout과정에서 이전 과정의 결과인 contraints를 변화시킬 수 있고, 이는 새로운 프로세스를 유발합니다. 이러한 방식으로 더 정교한 레이아웃 작업을 할 수도 있고, 무한반복에 빠질 수도 있습니다.  &lt;/p&gt;
&lt;h3&gt;Layout 변경이 발생하는 이벤트&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/CreatingViews/CreatingViews.html#//apple_ref/doc/uid/TP40009503-CH5-SW1&quot;&gt;ref1. In ‘Adjusting the Size and Position of Views at Runtime’&lt;/a&gt;
&lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW4&quot;&gt;ref2. In ‘Auto Layout Versus Frame-Based Layout’&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;레이아웃은 아래의 이벤트가 발생할 때마다 변경된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View의 bounds 사이즈 변경.&lt;/li&gt;
&lt;li&gt;root view의 변화를 유발하는 Interface Orientation의 변화.&lt;/li&gt;
&lt;li&gt;View Layer와 관련된 Core Animation sublayer가 변해, 레이아웃 업데이트가 필요할 때.&lt;/li&gt;
&lt;li&gt;애플리케이션에서 setNeedsLayout() / layoutIfNeeded()를 호출했을 때.&lt;/li&gt;
&lt;li&gt;애플리케이션에서 View의 레이어가 setNeedsLayout()를 호출했을 때.&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; superview의 레이아웃이 변경되었을 때, subviews의 사이즈와 위치도 조정해주어야 합니다. 자동 레이아웃을 설정하거나, 수동으로 레이아웃을 조정할 수 있습니다. 자동 레이아웃은 세밀한 부분까지 제어할 수 없고, external change에만 대응한다는 한계가 있습니다. 자동 레이아웃을 위해, superview의 autoresizesSubviews를 true로 설정하고 각각의 subview에 맞는 autoresizingMask를 설정합니다. 필요한 자동 autoresizing 규칙이 모든 뷰에 적용된 후, superview에 맞게 view를 수동으로 조정할 수 있습니다. 수동 조정을 통해 아래와 같은 변화를 줄 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조정중인 view의 사이즈나 위치의 변화&lt;/li&gt;
&lt;li&gt;subviews나 Core Animation layer 추가&lt;/li&gt;
&lt;li&gt;setNeedsDisplay나 setNeedsDisplayInRect 메소드 호출로, Display 새로 그리는 것을 강제&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Layout 변화에 따라 수동으로 UI 그리기&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.gc.com/demystifying-ios-layout/&quot;&gt;ref1.Demystifying iOS Layout&lt;/a&gt;
&lt;a href=&quot;https://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/&quot;&gt;ref2. In ‘The Layout Process’&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;ℹ️수동제어는 마지막으로 사용합시다. 자동제어 설정을 최대한 사용한 후에도, 원하는 UI 구현이 안될 때 수동으로 UI를 그립니다.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;수동으로 layout을 조정하려면, 조건별로 알맞은 메소드를 오버라이딩하거나 호출합니다. 조건은 ‘레이아웃 프로세스 중 조정이 필요한 과정, 조정이 필요한 시점’ 두 가지가 있습니다. 프로세스 과정을 고려할 때 이전 과정에서 조정할 수 있는 지 살펴보고, 어렵다면 다음 과정을 살펴봅니다. 예를 들어, 뷰 두개의 사이즈와 간격의 조정은 첫 과정인 Updating Constraints의 결과 값을 이용해야 하므로, Layout과정에서 처리합니다. 이후 해당 과정의 처리가 어느 시점에 필요한지 고려하여, 알맞은 메소드를 오버라이딩하거나 호출합니다. 먼저, 시점을 더 잘 이해하기 위해 업데이트 싸이클을 살펴봅시다.&lt;/p&gt;
&lt;h4&gt;The Update cycle. 업데이트 싸이클&lt;/h4&gt;
&lt;p&gt;업데이트 싸이클은 앱이 모든 이벤트 처리 코드를 실행한 후, 컨트롤이 Main Run Loop로 돌아가는 지점입니다. 이 지점에서 시스템이 Constraints, Layout, Display를 업데이트하기 시작합니다. 앱이 이벤트를 처리하는 동안 레이아웃 변경을 요청할 경우, 시스템은 해당 과정에서 업데이트가 필요하다고 표시해둡니다. 다음 업데이트 싸이클에서 시스템은 표시해둔 변경 사항을 실제로 업데이트 합니다.&lt;/p&gt;
&lt;h4&gt;시점 별 메소드 및 특징&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;과정/시점&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. Updating Constraints&lt;/td&gt;
&lt;td&gt;setNeedsUpdateConstraints / invalidateIntrinsicContentSize&lt;/td&gt;
&lt;td&gt;updateConstraints&lt;/td&gt;
&lt;td&gt;updateConstraintsIfNeeded&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. Layout&lt;/td&gt;
&lt;td&gt;setNeedsLayout&lt;/td&gt;
&lt;td&gt;layoutSubviews&lt;/td&gt;
&lt;td&gt;layoutIfNeeded&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3. Display&lt;/td&gt;
&lt;td&gt;setNeedsDisplay&lt;/td&gt;
&lt;td&gt;draw&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;A.시점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;필요한 과정의 메소드를 호출합니다.&lt;/li&gt;
&lt;li&gt;A의 메소드를 호출하면,  시스템이 다음 업데이트 싸이클에서 해당 과정의 변경사항을 업데이트합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;B.시점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;필요한 과정의 메소드를 UIView 클래스에서 오버라이딩합니다. 따라서 외부에서 직접 호출하지 않습니다.&lt;/li&gt;
&lt;li&gt;업데이트 사이클 진행 중 해당 과정의 제어권을 완벽히 가져, 어떠한 조정도 가능합니다. 따라서 퍼포먼스 이슈가 있을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;C.시점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;필요한 과정의 메소드를 호출합니다.&lt;/li&gt;
&lt;li&gt;C의 메소드를 호출하면, 변경사항이 즉시 업데이트됩니다. 따라서 다음 단계가 뷰 프레임의 최신 상태에 의존하는 경우 도움이 될 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[책정리] 아이폰 이후의 UX 3(완)]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/UX_afterIPhone3/</link><guid isPermaLink="false">https://kyoo32.github.io/UX_afterIPhone3/</guid><pubDate>Mon, 11 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;‘마우스 커서는 신체의 일부라고 할 수 있을까?’ 자신의 것이라는 느낌은 자신의 움직임과 연동될 때 느껴지는데, 이러한 이유로 마우스 커서는 신체의 일부이다. 이런 자기 귀속감은 새로운 지각 세계를 가져다준다. 차를 운전하면 타이어와 지면의 경계를 인식하듯, 마우스 커서는 인터넷 세계를 지각하게 해 준다. 오히려 질량을 수반하지 않는 정보세계의 신체 확장은 조금 더 유연하게 변화할 수 있다. 정보 세상에서 새로운 신체를 얻은 인간은, 인터넷이 보급화 되면서 그 신체를 더 자주 사용할 수 있게 되었다. &lt;/p&gt;
&lt;p&gt;데스크톱 PC의 소프트웨어 설계는 사용자가 어떤 목적을 가지고 PC 앞에 와서 작업에 집중한다는 암묵적 전제가 있었다. 기기가 소형화되고 휴대하게 되면서, ‘소프트웨어 기능’ 설계에 더불어 ‘생활 속 문맥’ 속에서 ‘언제 어디서 어떻게 사용할 것인가?‘도 중요해졌다. 즉 설계의 대상이 ‘PC’에서 ‘생활’로 바뀐 것이다. 사람의 활동과 미디어의 관계를 설계하는 것이 인터렉션 디자인이고, 정보 기술에서 인터렉션 디자인의 목표는 사용한다는 의식 없이 인터넷의 혜택을 누리게 해주는 것이다. &lt;/p&gt;
&lt;p&gt;지속적으로 움직이는 인간의 시점에서 ‘접속’한다는 감각을 없애면, 디자인의 목표에 조금 다가갈 수 있다. 이때 콘텐츠의 시간성도 고려하면 좋다. 모바일 디바이스와 유비쿼터스 환경에 의해 방대한 정보에 언제나 접속할 수 있다고 해도, 콘텐츠 소비의 시간은 변함이 없다. 도구나 콘텐츠를 사용할 때, 사람들은 ‘시간을 빼앗기고 있다’라고 생각할 수 있다. 반대로 사람들의 적극적인 참여가 있어야만 도구와 콘텐츠는 제공될 수 있다.
&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/81513381-11543c80-9363-11ea-90b6-239d5c47bd52.jpg&quot; alt=&quot;castoven&quot;&gt; (접속을 없애고, 콘텐츠 시청 시간까지 확보한 ‘캐스트 오븐’)&lt;/p&gt;
&lt;p&gt;인터페이스 디자인은 ‘사용자가 제품을 사용 중이고, 주의를 기울여서 사용한다’는 전제로 시작한다. 그러나 콘텐츠를 다루는 디바이스의 수가 증가하면서 이런 전제는 사용자를 구속하기 시작했다. 멀티 디바이스 시대의 패럴렐 인터렉션 세상에서는 설계의 문맥은 디바이스에서 생활로, 구속성은 배려로, 이용 타이밍은 집중에서 분산으로 바뀌어야 한다. ‘내가 만드는 서비스는 사용자 생활의 극히 일부분이다’는 점도 명심하며 설계해야 한다. &lt;/p&gt;
&lt;p&gt;디자인을 인터페이스로 생각한다는 것은 디자인을 시스템으로 생각한다는 것이다. 탐구 동기는 ‘인간이 사물 앞에서 어떻게 행동하는가’, ‘인간과 사물이 만날 때 그 시스템은 어떤 영향이나 현상을 가지고 오는가’ 등 사람과 사물의 관계 메커니즘을 이해하려는 욕구이다. 이 디자인은 예술이나 감상보다 과학에 가깝다. 물리학이 현실 세계의 디자인 규칙을 일부 해명하여 새로운 제품을 만드는데 응용되는 것처럼, 디자인은 환경 속 인간의 지각과 움직임을 해명해 새로운 디자인에 응용하는 것이다. &lt;/p&gt;
&lt;p&gt;커서 실험처럼 사물이 사람의 행위에 따라 연동됨에 따라 자기감과 주체감이 생겨 ‘자신의 경험’이 된다. 이런 자기귀속감은  대부분의 기술에서 검토해야 할 보편적인 것이다. 아날로그의 감각은 자동으로 자기귀속감이 있다. 무언가를 접할 때 생기는 감각이나 감촉을 새로운 도구에도 추가해 주어야 한다. 그러나 자기귀속감은 도구에만 머무르지 않고, 리얼리티 설계로도 확장되고 있다. 사용자는 단순히 도구를 사용하는 데 그치지 않고, 가상의 리얼리티 환경에 접하기 때문이다. &lt;/p&gt;
&lt;p&gt;리얼리티는 객관적인 것과 주관적인 것으로 나눌 수 있다. 객관적인 리얼리티는 영화가 하나의 예로, 영화를 본다고 해도 그 속에 들어간 경험이 들지 않는다. 여기의 리얼리티는 재현성에 중심을 두고 있다. 컴퓨터 그래픽으로 구현되는 객관적인 리얼리티는 3D까지 제공한다. 3D는 깊이감까지 더해 현실을 재현하지만, 사용자의 3차원적 경험은 제공하지 못한다. 반면 주관적인 리얼리티는 이를 경험하는 사람이 그 속에 있다고 느끼고, 본인의 경험이라 생각한다. 오큘러스와 같은 헤드 마운트 디스플레이가 주관적인 리얼리티를 제공한다.  &lt;/p&gt;
&lt;p&gt;환경의 동시성을 생각하면, 인터렉션 설계를 할 때 개발하는 제품을 ‘사물’이라고 생각하기보다 ‘지속’이라고 생각하는 게 좋다. 컵을 디자인한다고 하면 요소, 형상, 색, 질량을 정하지만, 인간이 ‘마시는 것’ 혹은 ‘잡는 것’을 디자인한다고 하면 생각이 달라진다. ‘마시는 것’ 혹은 ‘잡는 것’이 컵의 지속이다. 지속은 사물이 사람의 행위와 대등하다는 발상이다. 우리는 컵이라는 지속적인 정보를 지각해서 행위한다. 제품을 지속성 있게 만들 때 리얼리티도 커진다. &lt;/p&gt;
&lt;p&gt;인터렉션은 새롭게 만드는 게 아니라, 이미 존재하는 인간의 지각 행위를 잘 살려 컴퓨터라는 새로운 환경에 융합시키는 것이다.  세상의 원리를 이해하여 제품을 개발함으로써 사람들이 새로운 세계를 경험할 수 있다. 따라서 디자인은 인간과 세계의 메커니즘을 이해하고, 메타 미디어를 이용하여 사람들의 경험을 확장시키는 것이다. 앞으로 인터넷을 품은 메타 미디어는 인류의 다양한 아이디어에 의해 폭발적으로 다양화되고 변화할 것이다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[[책정리] 아이폰 이후의 UX 2]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/UX_afterIPhone2/</link><guid isPermaLink="false">https://kyoo32.github.io/UX_afterIPhone2/</guid><pubDate>Mon, 04 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;인터페이스 디자인이란 행위의 가능을 설계하는 것이다. 인터페이스 디자인은 지각과 행위의 디자인이며, 사람에게 ‘가능’을 알려주고 실현하는 디자인이다. 인터페이스 디자인은 일반적인 디자인과 다르게, 디자인 자체에 테크놀로지가 포함되어 있다. 따라서 다양하고 뛰어난 테크놀로지를 이해하고 사람들에게 표현하고, 사람의 행위를 수용하는 디자인이 인터페이스 디자인이다. &lt;/p&gt;
&lt;p&gt;인터페이스 디자인에서 중요한 특징이 투명성이다. 투명성은 인지나 의식이 자연스럽게 또는 무의식적으로 발생하는 것을 빗대어 표현한 것이다. 투명성을 논의할 때 도구와 환경의 측면에서 생각해볼 수 있다. 도구 측면은 신체의 시점에서, 환경 측면은 행위의 시점에서 디자인을 바라본다. 철학 영역에서 도구의 투명성은 하이데거의 도구적 존재, 사물적 존재가 유명하다. 도구적 존재는 투명한 상태를 사물적 존재는 투명하지 않은 상태를 의미한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;평소 문자를 입력할 때 PC의 키보드 자체를 의식하는 일은 없지만(도구적 존재), 처리상의 문제로 입력한 문자가 바로 표시되지 않으면 키보드의 키가 ‘걸린다’라는 속성의 사물적 존재가 된다. -Terry Winograd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;도구를 의식하지 않고 이용하는 것이 중요한 이유는 인간의 신체가 확장되기 때문이다. 인간은 도구를 이용해 부차적으로 힘을 얻는데, 도구가 투명화 된다면 자신의 신체 일부와 다름없게 생각할 수 있다. 사람의 손도 질량이 있지만 평소에 무게를 자각할 수 없는 것과 비슷하다. 인간은 힘을 얻으려는 근본적인 욕구를 가지고 있기 때문에, 앞으로도 인간과 컴퓨터의 힘을 어떻게 발휘할 것인지 그리고 그 힘은 투명한지 논의될 것이다.&lt;/p&gt;
&lt;p&gt;테크놀로지의 환경적 투명성은 또다시 두 가지 측면으로 나누어 생각할 수 있다. 신체적 측면과 환경적 측면이다. 신체적 측면은 테크놀로지를 사용하는 사용자의 신체이다. 환경적 측면은 조명 기술, 수도와 가스 등 인프라가 되는 기술로 장소에 의존하고 누구라도 접근 가능한 공공성을 띄는 경우가 많다. 그러나 정보 기술은 공간 제약을 덜 받기 때문에 설계 시 신체적 측면을 살릴 수도 있고, 환경적 측면을 살릴 수도 있다. &lt;/p&gt;
&lt;p&gt;환경적 측면을 살린 정보 기술이 2000년대 초 화제가 된 유비쿼터스 컴퓨팅이다. 유비쿼터스 컴퓨팅은 ‘인간의 지각이나 행동을 고려하여 어떻게 환경에 배치할 것인가’에 대한 한 가지 답변으로, 환경적 투명성을 목표했다. 따라서 유비쿼터스 컴퓨팅은 인간은 컴퓨터라고 인식하지 않지만 컴퓨터의 혜택을 누리는 세계를 상상한 기술적 개념이다. 더 나아가 컴퓨터의 소형화와 무선 네트워크가 사람들에게 가져다주는 삶의 비전을 나타낸다. &lt;/p&gt;
&lt;p&gt;환경적 투명성을 적용하는 데 도움이 되는 학문 분야는 생태 심리학이다. 생태 심리학은 제임스 깁슨이 제창한 것으로, 다른 심리학과 다르게 뇌나 마음 상태는 보류한 채, 인간 지성의 구조를 설명한다. 사람과 환경을 시스템으로 생각하고 지성의 성질에 대해 설명하는 것이다. 외부에서 자극이 입력되어 어떤 상태가 되는 것을 간접적인 지각으로 본다면, 직접적인 지각론은 환경이 먼저 정보로 구조화되어있고, 인간이 환경 속에서 지각하고 행위하여 가치가 생겨난다. &lt;/p&gt;
&lt;p&gt;사람과 환경은 분리되어 있지 않고 지각과 행동이 환경에 밀접하게 접속되어 있다고 생각한다면, 행위가 환경의 가치를 실시간으로 도출하고 그 결과 또 다른 ‘가능성’을 지각해 다음 행동을 이어간다. 게다가 사람과 환경 사이에 행위를 확장하는 도구가 개입하면, 다른 차원의 ‘가능’을 지각하고 다른 행위로 이어진다. 좋은 도구는 이 ‘가능’을 뛰어나게 지각하며, 환경과 접속하는 지각과 행위는 끊임없이 순환함을 안다. 이 순환이 ‘경험’의 정체이며 이 일련의 프로세스를 이해하는 것이 ‘인터렉션 설계’의 본질이다. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/80928537-261f5600-8de0-11ea-924b-f3e3989f8b76.png&quot; alt=&quot;992502465A8D3B7309&quot;&gt;&lt;/p&gt;
&lt;p&gt;끊임없이 발전하는 새로운 기술은 사람이 이제껏 해본 적 없는 것을 가능하게 한다. 그러나 테크놀로지 가능성과 사람의 가능성은 다를 수 있다. 좋은 기술이더라도 사용 절차가 번거로우면 사람들은 사용하지 않는다. 따라서 신기술일수록 사용할 수 있고, 사용하고 싶다는 가능성을 제시하는 것이 중요하다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[[책정리] 아이폰 이후의 UX 1]]></title><description><![CDATA[<아이폰 이후의 UX>는 ‘아이폰의 UX는 왜 기분이 좋은가’라는 질문으로 시작된 미디어/인터렉션 박사의 책이다. 나는 중학생 때부터 LG나 삼성 휴대폰을 쓰다, 대학교 1학년 때 아이폰…]]></description><link>https://kyoo32.github.io/UX_afterIPhone/</link><guid isPermaLink="false">https://kyoo32.github.io/UX_afterIPhone/</guid><pubDate>Mon, 27 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&amp;#x3C;아이폰 이후의 UX&gt;는 ‘아이폰의 UX는 왜 기분이 좋은가’라는 질문으로 시작된 미디어/인터렉션 박사의 책이다. 나는 중학생 때부터 LG나 삼성 휴대폰을 쓰다, 대학교 1학년 때 아이폰5를 처음 접했는데 처음의 편리함은 충격이었다. 이후 미디어를 공부하다 iOS 개발을 직업으로 삼고 있다. 나는 이 책을 사회생활 시작쯤인 2017년 1분기에 읽었는데, ‘편리함의 충격은 어쩌다 나를 개발자로 만들었을까?’, ‘아이폰의 UX를 개발언어로 표현할 수 있을까’라는 의문을 조금이나마 풀어주었다. &lt;/p&gt;
&lt;p&gt;이 책은 2016년 11월에 한국에 출간된 번역본으로, 지금 보면 진부한 이야깃거리가 많다. 스티브 잡스가 어땠냐는 둥, 초기 아이폰 소프트웨어가 어땠냐는 둥, 빠른 기술의 발전처럼 사례는 벌써 고리타분하다. 그러나 기본적인 주장의 뼈대는 아직도 유효한 것 같다. 소프트웨어 제작산업의 분업된 전문가가 읽는다면, 몰입된 자신의 분야에서 잠시 벗어나 제작의 본질 혹은 인간 사고의 본질을 약간 엿볼 수 있을 것 같다. 저자의 의도도 그런 듯하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이 책의 주요 대상은 디자이너와 엔지니어이며, 이들에게 ‘인터페이스란 무엇인가’라는 본질에 대해 고민하게 하고 새로운 인터페이스 디자인을 위한 발상의 단서를 제공하는 것이 목적이다. 주어진 기술이나 미디어의 프레임 안에서의 다지인이 아니라, 새로운 기술과 기법을 통해 새로운 경험을 만들어내는 디자인을 하는 것이다. 디자이너나 엔지니어가 새로운 인터페이스를 앞장서서 만들어가는, 그러한 미래를 목표로 하고 있다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 책은 개발의 언어라기보다 디자인이나 심리학의 학문적 언어에 가깝다. 그래서 쉽게 넘어가는 책은 아니었다. 그래도 아이폰을 예시로, 편리한 사용성을 설명하는 하나의 답안지를 주었다. 개발언어로 표현할 수는 없었지만, 제작 시 어떤 모습이 더 편리할지 가늠하고 소통할 하나의 기준을 주었다. 그리고 기술 이외 아이폰을 받쳐주는 레이어는 무엇이 있는지, 정보화 시대에 모바일이 어떤 미디어가 되는지, 개발은 개발 이외에 어떤 의미를 가지는 지 힌트를 주었다. 3년이 지나 기억이 흐릿해져, 내가 이해한 대로 내용을 편집하여 정리해 보고자 한다. &lt;/p&gt;
&lt;h5&gt;인간에게 컴퓨터란 무엇인가?&lt;/h5&gt;
&lt;p&gt;컴퓨터는 인간의 지적능력을 강화하고 확장하는 도구이다. AR 등의 등장으로 인간의 지각이나 행동 같은 신체능력까지 확장되고 있다. 지적능력 확장을 가능케 하는 특성은 컴퓨터의 압도적인 자유도이다. 자유도란 무엇이든 비유될 수 있는 정도이다. 컴퓨터는 그림판이면서 스피커이면서 에디터이고, 다른 역할도 가능하다. 다른 표현으로, 컴퓨터는 메타미디어로 여러 개의 미디어를 통합하여 인간이 쉽게 사용할 수 있는 형태의 사물이다. &lt;/p&gt;
&lt;h5&gt;어떻게 인간이 컴퓨터를 잘 사용할 수 있게 할까?&lt;/h5&gt;
&lt;p&gt;무엇이든 비유된다고 인간이 어떻게든 컴퓨터를 잘 사용하는 것은 아니다. 알맞은 비유를 통해 만능성을 정의하거나 적절할게 경함 할 수 있도록 하고, 그 역할을 설계(디자인)하는 사람이 필요하다. 즉 디자인적 사고(Design Thinking)가 가능한 사람이 필요하다. 적절한 디자인을 완성하려면, 인지심리학자와 HCI(Human-Computer Interaction) 연구자의 조언이 필요하다. 인지심리학은 도구와 신체의 경계 구별을 연구하고, HCI 연구자는 컴퓨터와 인간 그리고 그것을 둘러싼 컨텍스트나 사회를 동시에 이해하면서 설계하는 전문가이다.&lt;/p&gt;
&lt;p&gt;과거엔 비유인 메타포를 사용하여 기능을 정의하고, 기능을 경험할 수 있게 했다. 메타미디어라는 성질에 가치를 부여한 것이고, 친숙성을 통해 인간이 컴퓨터를 잘 사용할 수 있었다. 애플의 스큐어모피즘 UI 디자인이 그 예이다. 캘린더 앱이 있다면, 현실세계의 캘린더(달력)처럼 생기고 동작했다. 그러나 현실세계에 비유 할 수 없는 새로운 애플리케이션이 등장하고, 익숙해진 사용자에게 제공되는 불필요한 비유가 쌓이면서 새로운 디자인이 적용되기 시작했다.
&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/80322649-9159ad00-8861-11ea-8664-36b230c670c0.jpg&quot; alt=&quot;Steve_Jobs_Headshot_2010-CROP_(cropped_2)&quot;&gt;&lt;/p&gt;
&lt;p&gt;플랫 디자인은 단색에 가까운 UI 컴포넌트를 사용하는 디자인으로, 원칙적으로 메타포를 사용하지 않는다. 그러나 플랫 디자인은 메타 미디어가 지닌 높은 표현의 자유도와 유연성을 구사하고 활용하게 해 준다. 플랫 디자인은 물리적인 제약을 표현하거나 문화를 구체적으로 드러낼 필요가 없고, 컴퓨터의 성능이나 디바이스의 성질만 살려서 디자인하면 된다. 즉 플랫 디자인은 메타 미디어인 컴퓨터에 메타포 없이 새로운 가치를 부여한다.&lt;/p&gt;
&lt;p&gt;사물인터넷이나 3D 프린터의 보급으로 인간이 사용하는 PC/모바일뿐만 아니라, 가전제품도 사물도 메타 미디어가 될 수 있다. 컴퓨터의 만능성이 실제 물리 세계로 확대되는 것이다. 여러 개의 메타미디어를 메타포 없이 사람이 편리하게 잘 사용하기 위해 중요한 분야가 UX(User eXperience)이다. UX는 인간이 가치를 느끼는 경험으로부터 메타 미디어를 정의하고 설계해나가는 흐름의 결과다. 경험을 중심으로 하는 설계인 것이다. &lt;/p&gt;
&lt;h5&gt;경험을 디자인하는 관점&lt;/h5&gt;
&lt;p&gt;UX에서 경험의 확장은 인간 지적능력을 확장시키니다. 그 경험은 현실에게 해본 것일 수도 있고, 해보지 못한 새로운 것일 수도 있다. 신체성 있는 제품부터 화면과 정보만 있는 제품까지 결과적으로 경험을 주며, 모든 것이 정보가 될 수 있다. &lt;/p&gt;
&lt;p&gt;경험은 문맥에 따라 다른 의미가 된다. 경험을 다양한 측면에서 고려하여 제품 제조를 해야 한다. 경험은 3가지 레이어로 해석될 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;레이어&lt;/th&gt;
&lt;th&gt;의논분야&lt;/th&gt;
&lt;th&gt;설계 대상&lt;/th&gt;
&lt;th&gt;설계&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;사회 레이어&lt;/td&gt;
&lt;td&gt;경제학, 사회학&lt;/td&gt;
&lt;td&gt;컨텍스트&lt;/td&gt;
&lt;td&gt;인상, 브랜드&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;문화 레이어&lt;/td&gt;
&lt;td&gt;문화인류학, 언어학&lt;/td&gt;
&lt;td&gt;콘텐츠&lt;/td&gt;
&lt;td&gt;스토리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;현상 레이어&lt;/td&gt;
&lt;td&gt;인지심리학, 현상학&lt;/td&gt;
&lt;td&gt;인터페이스&lt;/td&gt;
&lt;td&gt;지각,행위, 신체성&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;현상 레이어는 인간의 가치관은 배제하고 인간의 움직임을 파악하는 관점이다. 인터페이스 디자인도 디자인이지만 인간을 중심에 둔다. 인터페이스 디자인을 할 때 ‘어떤 경험이 될까?‘를 검토한다. 문화 레이어는 사람들의 집단적 관점을 통해 행동 양식을 파악하는 관점이다. 개개인의 라이프 스타일 맥락에서 컴퓨터의 적절한 이용 가치를 찾고자 한다. 서비스를 구상하거나 설계할 때 검토한다. 사회 레이어는 사회적으로 자리매김하기 위한 설계 관점이다. 사회적 상황에 따라 인간을 바라보는 방법으로, 금전적 가치 정보, 사회적 유행, 경제적 합리성 등이 포함된다. &lt;/p&gt;
&lt;p&gt;많은 사용자 인터페이스 설계론은 사회 레이어와 문화 레이어로 구성되어 있다. ‘잘 팔리도록’ 해야 하며, 마케팅을 위해 사용사 상이 필요하기 때문이다. 반면 현상 레이어는 ‘팔리도록 하는’ 직적접인 요인이 되지 못한다. 그러나 현상 레이어 설계가 잘 되어 있지 않으면, 사용자가 사용을 중단하거나 재구매를 하지 않는 이유가 된다. 사회 레이어와 현상 레이어 간에 간극이 존재하면 사용자에서 부정적인 인상을 주는 것이다. 잘 설계된 현상 레이어는 사용자에게 사용만으로 기분 좋은 감각을 제공하며, 문화 레이어 측면에서 만족할 만한 의미 있는 콘텐츠를 제공한다면 사용자의 지속적인 이용을 기대할 수 있다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[나의 투표 생각]]></title><description><![CDATA[지난 토요일 제2…]]></description><link>https://kyoo32.github.io/voteToThink/</link><guid isPermaLink="false">https://kyoo32.github.io/voteToThink/</guid><pubDate>Mon, 13 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;지난 토요일 제21대 국회의원 선거 사전투표를 했다. 사회적 거리두기 하는 요즈음, 그렇게 많은 사람이 한 공간에 있는 건 처음 보았다.  국가단위 투표에 참여한 게 다섯 손가락 안에 들지만, 또 이번처럼 과정이 특이한 투표도 처음이었다. 행정센터 입구에서 열을 재고, 손소독제와 비닐장갑을 나누어주고, 자필 대신 포스기에 서명을 하고, 한 투표용지는 팔 길이만큼 길었다. 이번 투표는 기억에도 이야기로도 특이하게 남을 것 같다.&lt;/p&gt;
&lt;p&gt;투표연령이 되던 즈음 내가 투표에 대해 느낀 감정은 아쉬움이었다. 나는 2013년 3월부터 투표를 할 수 있었는데, 2012년 12월 19일에 제18대 대통령 선거가 있었다. 2개월 뒤면 선거 가능한 만 19세였고, 투표날에도 대통령을 선택할 판단력과 생각이 충분히 있었는데 나는 참여하지 못했다. 투표하러 가는 가족들을 부럽게 바라보아야 했고, 그 이후 당선된 대통령에게 생긴 일도 원망스럽게 바라보아야 했다. &lt;/p&gt;
&lt;p&gt;이번 21대 국회의원 선거는 만 18세부터 투표할 수 있다고 하는데, 나처럼 투표의 첫 시작을 아쉬움으로 시작하는 사람들이 줄었으면 좋겠다. 한 편 코로나 감염위험으로 일부 국가의 재외국민의 투표는 역사상 처음으로 제외되었다고 한다. 많은 사람의 안전을 위해 어쩔 수 없다고 생각하면서도, 내가 당사자의 입장이었다면 굉장히 기분 나빴을 것 같다. 코로나 때문이라면 선거 자체를 미룰 순 없나? 앞으로 다른 펜더믹이 와도 재외국민의 기본권은 보장하지 못하는가? &lt;/p&gt;
&lt;p&gt;이번 선거를 포함하여 투표연령이 된 이후 참여 가능한 모든 선거에 투표를 했는데, 투표는 나에게 그나마 재미있는 정치활동인 것 같다. 나는 평소에 정치활동을 딱히 하지 않는다. 여러 사건과 뉴스를 살펴보면서 이렇게 저렇게 생각은 많이 하지만, 입이나 글 밖으로 내거나 몸소 활동은 하지 않는다. 또한 특정 이념이나 정당을 지지하기보단 사회에 필요한 일을 우선순위 매기는 사람이다. 가령 경제 위기가 오면 무엇을 필수적으로 해야 하는지, 사회적 이슈에 어떤 입장인지 생각한다. 젊은 샤이 중도라 할 수 있다. &lt;/p&gt;
&lt;p&gt;투표는 내가 밖으로 행동하는 현재의 유일한 정치활동이다. 투표 기간이 되면 출마한 정당과 인물과 정책을 각각 살펴본다. 내가 생각하는 중요한 이슈와 해결방안의 리스트를 놓고, 이 리스트와 가장 근접한 후보를 선택한다. 머릿속에 선택지를 저장해놓았다가 투표장에 가서 용지에 찍고, 인증사진도 찍고 SNS에 기록한다. 이번에는 비닐장갑이 있어 도장 사진보다 투표소 앞 사진으로 대체했지만, 재미는 줄지 않았다.&lt;/p&gt;
&lt;p&gt;투표장에서 용지 찍는 일은 그 자체로 재미있다. 가끔 나만 재밌다고 생각하는 건지 궁금하지만, 주기적이지만 비일상적인 정치활동은 모두에게 신선한 자극을 줄 것이라고 생각한다. 그나저나 선택지 칸 안에 선명하고 예쁘게 한 번에 도장 찍으려고 노력하는 일도 재밌지 않은가? 누가 볼까 봐 투표용지를 두세 번 꼭꼭 접어서, 투표용지함에 한 번에 쏙 넣는 일도 무언가 재미있다. 이번엔 못했지만, 손등에도 찍고 예쁘게 사진 찍는 것도 재미있다. &lt;/p&gt;
&lt;p&gt;잠깐 짚고 넘어가야 하는 건, 가장 근접한 후보를 선택할 때 인격적으로 논란이 되면 바로 탈락이라는 것이다. 범죄 이력이 많거나 과거에 비상식적인 발언을 여러 번 했다면 탈락이다. 어떤 선거는 어떤 후보나 자격미달이어서 덜 싫은 후보를 찍은 적도 있다. 투표가 다가오면 주변에서 많이 나오는 의견인데, 국회의원 등 선거로 뽑히는 공직자는 재선이라면 지난 임기 동안 실천한 공약을 정리해서 보여주는 곳이 있으면 좋겠다. 공약을 어떻게 실천했는지, 실천하지 못했다면 어떤 과정이 있었는지 말이다. 회사원들도 매년 하는 데 공직자도 자신의 업적 바탕으로 평가받았으면 좋겠다.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/79082605-453b4280-7d62-11ea-85f8-d8ae5061fcac.JPG&quot; alt=&quot;IMG_1446&quot;&gt;
(지난 2017년 5월 9일 제 19대 대통령 선거 이 후 찍은 사진)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[새로움의 계절, 봄]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/spring/</link><guid isPermaLink="false">https://kyoo32.github.io/spring/</guid><pubDate>Mon, 06 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;봄이 왔다. 끝나지 않을 것 같던 추위는 아침과 저녁으로 잠깐 보이고, 해가 떠있는 낮은 따뜻하고 포근하다. 벚꽃이 피기 시작한 지 오래되었지만, 달이 바뀌고 식목일을 보내니 봄이 온 것을 인정할 수밖에 없다. 봄은 사계절 중에 가장 살금살금 오는 계절이 아닐까 싶다. 아직 새해 같은데 벌써 4월인 것처럼, 봄은 흘러가는 시간을 닮아 부지런히 살금살금 잘도 온다. 불쑥 찾아오는 무더위나 떨어지는 단풍이나 하늘을 흐릿하게 만드는 눈과 다르게, 봄꽃은 매일매일 조금씩 피는데 어느 날 주의 깊게 들여다보면 모두 펴있다. &lt;/p&gt;
&lt;p&gt;한국어에는 봄을 붙이는 말들이 있다. 봄소풍, 봄나물, 봄노래, 봄바람, 봄추위, 봄맞이 등등. 물론 다른 계절을 앞에 붙이는 말도 있지만, 봄처럼 종류가 다양하고 수가 많지 않은 것 같다. 봄은 어찌나 단어도 봄 같은지, 처음 이 계절을 봄이라 부른 사람은 예민하고 센스 있는 사람일 것이다. 여름, 가을, 겨울. 두 글자에 ‘아’나 ‘여’로 시작해서 ‘ㄹ’로 끝나는 다른 계절의 말과 다르게, 봄은 가볍고 천진하다. 봄이라는 소리는 마음을 간지럽고 몽글몽글하게 만든다. &lt;/p&gt;
&lt;p&gt;게다가 봄에 나오고 새로운 노래도 많고, 봄에는 이때 듣는 노래도 있다. 나는 봄마다 꺼내보는 시도 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#x3C;봄은 고양이로다&gt; - 이장희&lt;/p&gt;
&lt;p&gt;꽃가루와 같이 부드러운 고양이의 털에&lt;br&gt;
고운 봄의 香氣(향기)가 어리우도다&lt;br&gt;
금방울과 같이 호동그란 고양이의 눈에&lt;br&gt;
미친 봄의 봄길이 흐르도다  &lt;/p&gt;
&lt;p&gt;고요히 다물은 고양이의 입술에&lt;br&gt;
포근한 봄 졸음이 떠돌아라  &lt;/p&gt;
&lt;p&gt;날카롭게 쭉 뻗은 고양이의 수염에&lt;br&gt;
푸른 봄의 生氣(생기)가 뛰놀아라&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 시에 어울리는 고양이도 인스타그램으로나마 알고 있다. @rhamemu037님이 찍은 고양이 찐이다. (너무 귀엽다.)
&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/78505507-d896d580-77ae-11ea-8eef-80bc7f08fcb2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난 4월 5일 식목일 전날은 봄절기 중 하나인 청명이었다. 청명은 말 그대로 날씨가 좋은 날이고, 농사력으로 밭의 흙을 고르는 가래질을 시작하는데, 이것은 특히 논농사의 준비 작업이 된다. 농사를 짓는 사람이 아니어도, 이날은 봄이 오기를 기다리면서 겨우내 미뤄두었던 일을 하기 좋은 날이다. 나는 지난 주말 겨울옷 정리를 시작했다. 아직 솜이불은 정리하지 못했지만, 긴 외투와 두꺼운 니트를 옷장에서 수납장으로 옮기기 시작했다. 수납한 건 옷이지만 몸도 마음도 가벼워진 느낌이다. &lt;/p&gt;
&lt;p&gt;나에게 봄은 설레고 즐거운 계절이다. 지난봄들 동안 좋은 기억이 많았기 때문이다. 내 생일은 봄의 시작인 3월 초인데, 학교를 다닐 때 새로운 친구들과 새로운 학년을 맞이하는 설렘과 즐거운 생일파티로 봄을 맞았었다. 사회인이 된 후에는 매해 내 생일 주에 소박하든 거창하든, 혼자든 함께든 새로운 곳으로 여행을 다녀왔다. 그래서 나에게 봄은 새로운 사람을 만나거나 새로운 곳에 가보거나 새로운 경험을 하는 계절이다. 봄의 새로운 마음을 얻을 때마다 ‘새로운 계절을 잘 시작했구나’라는 감사함을 느끼고, 봄의 마음을 안고 남은 계절을 살아간다. &lt;/p&gt;
&lt;p&gt;이번 봄은 개인적으로 새로운 곳에 가보지 못했지만, 단기간에 세상에 많은 변화가 있어 마치 새로운 곳에 온 것 같다. 가장 슬픈 일은 많은 사람이 죽고 있다는 점이고, 살아있는 많은 사람들도 나쁜 상황에 급하게 맞닥뜨려야 한다는 게 어렵다. 선망의 눈으로 바라보던 선진국은 여러 허점을 보였고, 당연하다고 생각하던 기존의 여러 생각은 강력한 반례를 만나게 되었다. 지난겨울 맞다고 생각했던 것들이 이번 봄의 변화로 인해 다음 여름에는 틀린 생각이 될 것이다. &lt;/p&gt;
&lt;p&gt;지금까지 문명을 주도적으로 발전시킨 나라들이 미래에도 선진국인 것일까? 국제기구의 필요성은 무엇인가? 세계화는 계속 필요한 것일까? 국가가 반드시 보장해야 하는 서비스는 무엇일까? 국민에게 기본소득을 주어야 하는가? 전체의 안전을 위해 자유를 어느 정도 포기할 수 있는가? 사회적으로 믿음을 주는 사람은 누구일까? 사회운영을 위해 추가적으로 필요한 사람은 누구일까? 실외의 행동은 꼭 실외에서 해야 하는가, 실내에서 할 수 있는가? 많은 사람이 같은 시간에 반드시 이동해야 하는가? &lt;/p&gt;
&lt;p&gt;한편 매년 새로운 봄을 보내는 일은 두렵고 번거롭다. 어떤 새로움을 맞아야 하는지 조사도 해야 하고, 새로운 사람이나 장소, 경험이 나에게 해가 될 위험도 있다. 시간도 따로 들고 힘도 들고 돈도 든다. 결과적으로 몇 가지는 안 좋은 기억으로 남는다. 그러나 비용과 실패가 있지만, 준비하고 얻게 된 새로운 경험은 일상을 잘 지속할 수 있는 힘과 생기를 준다. 봄에 돋아난 작은 잎이 나무가 되는 것처럼 잘 보낸 새로운 경험은 일생의 든든한 기둥이 되어준다. 또한 이번 해 꽃이 지더라도 다음 해 또 피어날 것임을 알듯이, 계속되는 성공이나 실패는 무던하게 다음을 준비하게 한다. &lt;/p&gt;
&lt;p&gt;개인적으로든 사회적으로든 이번 봄을 잘 보내어, 일상의 올바른 변화에 보탬이 되길 바란다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[일회용 데이터 줄이기; 공급자의 자원절약]]></title><description><![CDATA[EarthHour와 생활 속 에너지 절약 지난 토요일 EarthHour에 참여했다. EarthHour는 매년 3월 마지막 토요일, 현지시간 저녁…]]></description><link>https://kyoo32.github.io/needless_data_supply/</link><guid isPermaLink="false">https://kyoo32.github.io/needless_data_supply/</guid><pubDate>Mon, 30 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h4&gt;EarthHour와 생활 속 에너지 절약&lt;/h4&gt;
&lt;p&gt;지난 토요일 EarthHour에 참여했다. EarthHour는 매년 3월 마지막 토요일, 현지시간 저녁 8시 반부터 한 시간 동안 불을 끄는 에너지 절약 행사이다. 전등을 모두 끄고 커튼을 모두 열어놓았다. 집안은 생각보다 어두웠고 창밖은 생각보다 밝았다. 처음엔 불빛 없이 할 수 있는 게 없을 거라고 생각했다. 그러다 미리 충전된 핸드폰으로 오디오 클립을 듣기 시작했고 20분이 금방 갔다. 오디오 클립까지 다 들은 후엔 창밖을 구경했다. 다행히 날씨가 좋아서 달과 별이 잘 보였는데, 오랜만에 밤하늘 사진을 많이 찍었다. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/77864224-60865800-7262-11ea-8bc4-504b74305a9e.jpg&quot; alt=&quot;IMG_1257&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 개인이 한 시간 동안 불을 끄는 일은 퍼포먼스일 뿐이고, 지구의 생태용량에 큰 도움을 주지 못할 것이다. 전 지구적인 그리고 국가차원의 정책과 대책이 필요하다. 그러나 개인은 정부에게 모든 일을 맡기고, 자신이 에너지를 어디에 얼마큼 쓰는지도 모른 채 살아가도 되는 건 아니다. 개인의 합은 정부의 영역보다 크고 생각이 박인 개인에게 주도적이고 지속적인 힘이 있기 때문이다. 자구의 많은 사람이 사용하지 않는 코드를 뽑고 대중교통이나 자전거를 이용하는 등, 생활 속 에너지절약을 실천한다면 꾸준히 생태용량을 아낄 수 있다. &lt;/p&gt;
&lt;h4&gt;공급자 관점의 자원절약&lt;/h4&gt;
&lt;p&gt;EarthHour 전에 행사 스트리밍 방송을 했는데, 행사의 설명 중 이런 말이 있었다. ‘손가락 하나로 방 불을 끈다면, 이 행사에 참여할 수 있습니다.’ 우리가 평소에 손가락 하나로 참여할 수 있는 에너지 절약은 바로 핸드폰에 있다. 개인 소비자를 생각하기 전에 먼저 공급자 관점에서 실천할 수 있는 에너지 절약을 살펴보자. 지난 3월 페북 메신저 앱의 용량이 4분의 1로 줄었다는 기사가 있었다. &lt;a href=&quot;%5Bhttp://www.bloter.net/archives/373207%5D(http://www.bloter.net/archives/373207)&quot;&gt;(기사보기)&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;새 iOS용 페이스북 메신저 앱 용량은 기존 130MB에서 30MB 수준으로 축소됐다. 4분의 1도 안 되는 수준으로 가벼워졌다. 소스코드 기준을 보면 페이스북 메신저의 감량은 보다 드라마틱하다. 기존 버전 코드는 170만 줄이었는데, 새 버전의 경우 36만 줄로도 앱이 완성됐다. 무려 84% 감소한 수치다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;일단 기존에 앱 용량이 130MB 될 때까지 방치(?)한 것은 문제이다. 기능이 많다고 용량까지 커야한다는 법은 없기 때문이다. 앱의 용량이 크면 사용자가 앱을 설치할 때부터 큰 네트워크 데이터를 사용하고, 다운로드 이후에도 사용자의 핸드폰 저장공간을 차지한다. 용량이 큰 앱은 리팩토링이 안 되었을 확률도 높기 때문에 앱을 사용할 때도 버벅거리고 갑자기 꺼질 확률이 높아진다. 그러나 기능이 큰 프레임워크가 5~10MB 정도 된다. 기존 페이스북 메신저가 여러 프레임워크를 사용했을 경우 페북메신저 입장에선 억울할 수 있다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;해법은 소스코드에서 중복되는 부분을 가차 없이 덜어내는 것이었다. 결제, 마켓플레이스 등 다른 부서 직원들도 메신저 개편에 맞춰 소프트웨어를 업데이트하는 ‘콤비 플레이’ 요구됐다… 메신저 기능이 늘어나면서 페이스북 엔지니어들은 서버와 직접 커뮤니케이션하는 전용 마이크로 서비스들을 투입했다. 이들 마이크로 서비스는 캐시 관리 같은 복잡한 데이터 랭글링(Data Wrangling: 지저분한 상태의 데이터를 분석과 접근을 위해 통합하는 과정) 작업 등을 수행할 필요가 있다. 이 과정에서 페이스북은 광범위하게 사용되는 SQL 라이트로 이 같은 기능의 많은 부분을 대체할 수 있음을 알게 됐다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한마디로 말하면 정석대로 구현하고 리펙토링 한 것이다. 용량을 줄이는 법은 대단한 기술이 아니라 평소에 효율적으로 구현하려고 노력하고 상호리뷰를 통해 코드중복을 줄이는 것이다. 개발을 조금이라도 아는 사람이라면 당연한 말이지만, 당연하게 실천하기는 쉽지 않다. 협업이 잘 안 되고 든든한 리더가 없으면 혼자서 실천하기 어렵기 때문이다. 그런 의미에서 글로벌 서비스인 페이스북 메신저의 용량 감소는 대단한 일이다. 용량 감소로 저사양 기기를 쓰는 사용자는 좋아진 성능을 체감할 수 있고, 고사양 기기의 사용자도 일관된 좋은 성능을 경험할 수 있다. &lt;/p&gt;
&lt;p&gt;공급자인 페이스북도 얻는 이득이 있다. 용량을 줄이는 일은 메신저 사용시간과 더 많은 사용자도 얻을 수도 있지만, 자원을 효율적 사용하게 한다. 첫째는 컴퓨팅 자원이고 두번째는 인적 자원이다. 기능을 목적에 따라 잘 분리하고 적절한 서버에 분배하면, 해당 서버가 필요할 때 부족한 일이 적어지고 불필요한 서버 비용을 아낄 수 있다. 클라이언트는 그래픽 자원과 계산 자원을 낭비없이 쓸 수 있다. 가장 중요한 절약은 인적자원의 시간을 아낀다는 것이다. 과거에 만들어진 얽히고설킨 코드를 보는 시간을 줄이고, 더 간단하고 효율적인 코드를 만드는 시간은 늘어난다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[동물의숲 하는마음]]></title><description><![CDATA[모여봐요 동물의숲, 지난 주말 정신적으로(?) 핸드폰보다 오래 있던 곳이다. 동물의숲은 닌텐도의 게임으로 지난 금요일 스위치용이 새로 발매되었다. 나는 2007년 NDS용으로 동물의숲을 처음 접했고 중학교 시절의 소중한 일부분이다. 성인이 되면서 DS…]]></description><link>https://kyoo32.github.io/heartAtAnimalCrossing/</link><guid isPermaLink="false">https://kyoo32.github.io/heartAtAnimalCrossing/</guid><pubDate>Mon, 23 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;모여봐요 동물의숲, 지난 주말 정신적으로(?) 핸드폰보다 오래 있던 곳이다. 동물의숲은 닌텐도의 게임으로 지난 금요일 스위치용이 새로 발매되었다. 나는 2007년 NDS용으로 동물의숲을 처음 접했고 중학교 시절의 소중한 일부분이다. 성인이 되면서 DS는 사촌동생에게 물려주고 다양한 재미에 정신이 팔려 동물의숲은 최근기억에서 사라져 갔다. 그러다 10년쯤이 지난 2018년 말 스위치용 동물의숲이 나온다는 소문이 있었고 나는 사실 여부 상관없이 스위치를 구매했다.&lt;/p&gt;
&lt;p&gt;더 좋아진 기기에서 더 좋아진 기술로 만난 동물의숲은 정말 더 좋다. 너무 재미있고 행복하다. 매주 블로그 글을 쓰면서 가장 위기였고, 지금 이 글을 쓰는 순간도 얼른 지나가서 동물의숲이나 하고싶다. 새로 만난 동물의숲은 나이와 함께 냉정해진 시각이 무색하게 같은 듯 좋아졌고 다른 듯 익숙하다. 동물의숲의 업그레이드 성공은 나에게만 전해진 건 아니다. 동물의숲은 이전에 해본 사람과 처음 해보는 사람 모두에게 인기를 끌었다.&lt;/p&gt;
&lt;p&gt;지난 금요일 게임팩을 판매하기 시작한 후 한 오프라인 상점엔 긴 줄이 이어졌다. 모르는 사람이 보면 코로나19 바이러스 예방을 위해 마스크를 사려는 줄처럼 보였을 것이고, 한편으로 가까이 붙어 있는 사람들이 바이러스 감염에 노출될까하는 염려와 비판의 시각이 있었을 것이다. 아무튼 동물의숲은 방향은 다르지만 현재 진행되는 바이러스와 운명을 같이 하고 있다. 스위치를 생산하는 중국 공장의 공급이 늦어지고, 재택과 휴교 등 늘어난 칩거시간 같이 사람들의 수요도 늘자 스위치는 말그대로 금값이 되었다.&lt;/p&gt;
&lt;p&gt;환경도 우연처럼 맞아들었다. 밖에 못나가는 현실세계와 달리 동물의숲 세계는 자연인 무인도를 배경으로 한다. 동물의숲에서 친구네 섬에 놀러갈 때 경비행기를 타는데, 현실세계와 달리 건강을 체크하지도 않고 이런 여행은 즐겁기만 한 경험이다. 현실의 상황은 동물의숲에 더욱 매료되게 만들고 있다. 문득 게임을 하다 현실을 지각하는 순간, 나의 마음은 씁쓸하고 미묘하다. 주말까지 친구들과 동물의숲에 대해 이야기해보니, 동물의숲을 하는 누구나 조금이라도 품을 수 있는 마음이었다. &lt;/p&gt;
&lt;p&gt;동물의숲 도구에 새총이 있는데 풍선에 묶여 떠다니는 선물을 터뜨리는 데 사용한다. 몇번 쓰다보니 이 새총으로 새도 잡을 수 있는지 이야기한 적이 있다. 처음에는 오로지 가능여부를 골똘하다, 아차 섬뜩해진다. 여기가 동물의숲이 아니라 현실세계라면 새총이 있다고 새를 잡을 생각은 하지 않을 것이다. 잔인한 일이기 때문이다. 알아보니 이 도구는 한국에서만 ‘새’의 단어가 들어간 새총이지, 영어로는 bird와 관계없는 slingshot이다. 따라서 동물의숲에서 새총은 새를 잡는 용도로 사용 불가능하다. &lt;/p&gt;
&lt;p&gt;새총을 이야기하니 새총보다 훨씬 많이 사용하는 낚시대가 심판대에 올랐다. 무인도인 만큼 낚시는 주요활동 중 하나이다. 낚시대로 물고기를 잡는 행위는 현실세계든 동물의숲이든 잔인하지 않는 것일까? 한 과학자의 시각을 따르면 아주 잔인한 일이다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;우리가 물고기에게 공감하지 못하는 결정적 이유는 ‘노는 물’이 서로 다르기 때문이다. 낚싯바늘에 꿰여 물 밖으로 끌려나온 물고기가 울지 않는 이유는 우리가 물속에 빠졌을 때 울지 않는 이유와 마찬가지다. … 우리가 물고기에 대해 더 많이 배울수록, 물고기와의 동질성을 파악하는 능력은 증가할 것이다. 또한 이들의 존재를 우리의 존재와 연결시키는 능력도 증가할 것이다. 무릇 공간의 핵심은 상대방의 경험을 이해하는 것이다. 그리고 상대방의 경험을 이해하는 것의 핵심은 상대의 감각계를 평가하는 데 있다. … ‘물고기들이 우리 인간과 마찬가지로 착시를 경험하며, 종종 먹잇감의 시각적 속임수에 넘어가기도 한다‘는 사실은 나로 하여금 미소를 짓게 만든다. 이는 물고기의 마음이 형성하는 지각세계, 즉 환경세계가 존재한다는 것을 의미한다. 지각세계는 팩트가 아니라 지각과 믿음에 기초한 세계이며, 물고기들은 상대방의 지각을 이용하여 자신의 이익을 취할 수 있다. … ˝만약 하나의 동물이 지각력을 갖고 있다면, 마땅히 도덕적 고려의 대상에 포함되어야 한다. 우리는 ‘물고기가 고통을 느낀다‘는 증거에 기초해, 물고기에게 선처를 베풀어야 마땅한다고 판결한다. [조너선 밸컴, &amp;#x3C;물고기는 알고 있다.&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;현실을 자각하게 되니 뜨문뜨문 마음이 불편하다. 나는 물고기를 낚시 바늘로 잡아서 돈을 위해 팔아넘긴다. 그런데 다른 한편으로 가상세계에서 원없이 마음껏 낚시하고, 현실세계에서 잔인한 방법의 어획이 줄어들면 좋겠다고 생각한다. 생각을 멈추지 않으면 바다부터 하늘, 육지에 있는 생물까지 걱정하게 된다. 어찌보면 지구의 바이러스 종은 인간이다. 사회적 거리두기로 많은 인간들이 집에만 머무르자, 물의 도시는 깨끗한 물이 주인이 되고 하늘도 맑아지고 여러 동물들이 자주 보이기 시작했다. 사회적 거리두기는 바이러스가 종식되어도 종종 이어지는 게, 인간에게도 다른 종에게도 지구에도 좋을 것 같다. &lt;/p&gt;
&lt;p&gt;바이러스 없이 사람들이 사회적 거리두기를 할 수 있을까? 마스크처럼 요일별로 외출을 할당해야 할까? 언택트 서비스가 더 많아져서, 밖에 나가지 않아도 즐길 수 있는 오락거리가 충분해지면 괜찮지 않을까? 방법은 아직 모르겠지만, 게임을 하면서 인간의 한가지 변덕을 다시 한번 느끼게 됐다. 동물의 숲 무인도는 자연이 정말 예쁘다. 바다는 푸르르며 파도소리도 예쁘고, 다양한 곤충과 꽃이 나타난다. 모래를 밟을 때, 바다에 들어갔을 때, 잔디를 걸을 때 들리는 소리와 느껴지는 진동도 모두 다르고 그럴싸하다. &lt;/p&gt;
&lt;p&gt;그런데 이런 낙원섬에서 자연을 느끼고 휴식하는 시간은 적다. 힐링은 좋지만 재미없다. 누가 강요하는 것도 아닌데 부지런히 과일 따고 낚시도 하고 곤충도 잡는다. 부산스럽게 다른 섬에 가서도, 열심히 무언가를 하다 온다. 휴양을 가장 주요한 목적으로 만든 게임은 아니지만, 빨리 더 잘 하고 싶은 마음에 여유는 없을 때가 많다. 배경만 자연이지, 도시 타이쿤 게임에 임하는 태도와 크게 다르지 않다. 자연도 좋지만, 할 거리가 없으면 심심하다. 도시도 좋지만, 사람들과 오래 부대끼면 답답하다. 사람은 정말 변덕스럽고 복잡하다. 본능적이고 뚜렷한 특징이 한결같은 동물친구들이 이 숲의 주민인게 다행이다.&lt;/p&gt;
&lt;p&gt;동물의숲은 어렸을 땐 마냥 재미있었는데, 지금은 좋아진 해상도와 함께 보이는 게 많아진 게임이다. 또 잠깐 들리러 가야겠다.🦊🌲🦉&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/77255220-3f919600-6ca9-11ea-89b1-c97ec2bfc004.JPG&quot; alt=&quot;IMG_1132&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[클라이언트 개발의 기본은 뭘까]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/basicOfClientDevelopment/</link><guid isPermaLink="false">https://kyoo32.github.io/basicOfClientDevelopment/</guid><pubDate>Mon, 16 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;기본의 가치가 재조명되는 시대이다. 골목을 바꾸는 요리 예능이든 언론사의 연재 인터뷰든 먼 나라의 다큐멘터리이든, 한 분야의 프로들은 비법(?)으로 기본을 빼놓지 않는다. 심지어 요즈음은 허구 세계인 웹툰이나 드라마에서도 기본을 강조하는 전문 등장인물을 어렵지 않게 찾을 수 있다. 여기서 기본은 낮은 단계의 하기 쉬운 어떤 것이 아니라 토대가 되는 본질이다. 우리는 기본기를 일정 수준 이상 닦은 사람을 전문가라고 부른다. 전문가는 탄탄한 기초를 가지고 창의적인 일을 한다.&lt;/p&gt;
&lt;p&gt;어떤 분야의 일을 일정 시간 이상 했다고 전문가라고 말할 수 없다. 전문가는 시간을 많이 쌓은 사람이 아니라 기본을 많이 쌓은 사람이다. 따라서 우리가 전문가를 찾는 방법은 기본에 대해 질문하는 것이다. 전문가는 그가 지난 시간 동안 무엇을 했는지 답하는 것에 더해 어떤 기본을 가지고 임했는지 말할 수 있을 것이다. 조금 더 정확하게 말하자면, 어떤 기본을 가지고 있어 무엇을 어떻게 했는지 말할 것이다. 어쩌면 당연히 가져야 할 기본을 우리 사회가 많이 주목하게 된 이유는 전문가가 부족하기 때문일지도 모른다.&lt;/p&gt;
&lt;p&gt;나는 6년 전쯤 개발을 접한 이후 평일 하루의 1/3을 개발에 쓰고 있다. 개발만을 위한 완전한 시간은 이보다 더 적겠지만 내가 사회에서 가장 많이 오래한 일은 개발이 맞다. 나는 시간과 함께 개발의 기본을 잘 쌓고 있는 걸까? 나의 분야에 조금 더 들어가서, 클라이언트 개발의 기본은 뭘까? 이 글은 현업에서 3년 정도 일하면서 내가 생각한 기본과 나의 기본기를 돌아보기 위한 글이다. 나보다 더 전문성 있는 이 분야의 사람에게 조언을 얻기 위함이고, 훗날 내가 다시 돌아봤을 때 이정표로 사용하기 위함이다.&lt;/p&gt;
&lt;p&gt;소프트웨어 개발 분야는 정보의 흐름을 기준으로 볼 때 크게 서버 사이드와 클라이언트 사이드가 있다. 클라이언트는 정보를 요청하고 소비하고, 서버는 클라이언트가 요청한 정보를 제공한다. 1960년대 인터넷과 1990년대 웹이 탄생하면서 소프트웨어 기술은 점차 발전했는데, 클라이언트의 기술도 예외가 아니다. 스크린에 검은 화면만 있던 시절에는 클라이언트가 표현하는 색이라곤 검은 화면에 흰 텍스트밖에 없었고 클라이언트는 아주 큰 허들을 지나야 요청을 할 수 있었다. 2000년대인 요즈음은 클라이언트가 갑이라고 할 만큼 큰 역할을 하고 있다. &lt;/p&gt;
&lt;p&gt;클라이언트는 기술에 따라 웹과 앱과 게임이 있다. 다른 분야는 나의 주 분야가 아니라서 잘 모르지만, 앱은 또한 iOS, 안드로이드, 하이브리드 등으로 나눌 수 있다. 이런 세부적인 기술 종류에 관계없이 클라이언트 개발에서 지켜야 하는 기본은 표현성과 반응성, 서버 개발의 기본은 안정성과 정확성이라고 생각한다. (서버 개발은 경험은 적지만 옆에서 지켜보고 요청자의 입장에 오래 있으면서 생각한 것이라 놓친 특성이 있을 수도 있다.) 표현성은 모든 상황을 주어진 출력장치에 적절히 표현하는 것이고, 반응성은 사용자 반응의 시작부터 끝까지 적절히 대등하는 것이다.&lt;/p&gt;
&lt;p&gt;정보를 놓고 보면 표현성은 적절한 정보를 보여주는 것이고, 반응성은 적절한 정보를 요청하거나 업데이트하는 것이다. 표현성을 지키려면 모든 유스 케이스에서 뷰가 깨지지 않고 적절한 정보를 보여주어야 한다. 반응성을 지키려면 일정 수준 이상의 소프트웨어 품질을 유지하며 사용자가 컨트롤하기 쉬운 적절한 액션을 설계해야 한다. 업계의 용어로 나누자면 표현성은 UI(User Interface)에 가깝고 반응성은 UX(User eXperience)에 가까운 것이다. &lt;/p&gt;
&lt;p&gt;실무적인 관점에서 보자면 표현성은 스펙 요소의 레이아웃을 깨지지 않게 뷰에 그리고, 정보가 없는 케이스와 적고 많은 케이스 등 해당 뷰의 모든 상황의 표현을 구현해 놓는 것이다. 반응성은 상황별로 제스처와 액션을 원하는 동작에 정확히 연결해놓고, 이 행동을 방해 없이 진행하게 하기 위해 속도 등 품질을 높이는 일을 한다. 물론 개발을 하면서 ‘표현성을 높여야지, 반응성을 지켜야지’라는 생각을 하며 일을 하는 사람은 없다. 클라이언트가 하는 개발을 제대로 하다 보면 결과적으로 이 표현성과 반응성은 당연히 만족된다.&lt;/p&gt;
&lt;p&gt;다만 일과 일정에 치이다 보면 개발을 잘 하고 있는지, 기본은 되어 있는지 의문이 들 때가 있다. 그리고 연차가 쌓일수록 자신의 분야에 대해 얼마나 알고 있고, 어떤 경험이 있는지 확인하고 싶을 때가 있다. 아무 생각 없이 이때를 지나치기보다 기본이 뭔지 생각해보고 기본기를 잘 닦고 있는지 확인해보면 좋을 것 같다. 다음에 이 글의 연장으로 나는 기본기를 잘 닦고 있는지, 기본기를 잘 닦으려면 무엇이 필요할지 적어보려 한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[집에서 하는 집에 대한 생각]]></title><description><![CDATA[오늘로 재택근무 3주 차에 들어서면서 새로운 집순이력이 시험받고 있다. 내가 다니는 회사는 2월 말부터 코로나1…]]></description><link>https://kyoo32.github.io/thinkPlace/</link><guid isPermaLink="false">https://kyoo32.github.io/thinkPlace/</guid><pubDate>Mon, 09 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;오늘로 재택근무 3주 차에 들어서면서 새로운 집순이력이 시험받고 있다.&lt;/p&gt;
&lt;p&gt;내가 다니는 회사는 2월 말부터 코로나19 바이러스 감염 우려로 전사가 재택으로 근무하고 있다. 처음 재택이 결정됐을 때 굉장히 설레었다. 나는 언젠가 디지털 노매드를 꿈꿨지만, 현 회사는 재택근무제도가 없었고 10년 근속이 되면 가능할 수도 있다는 항간의 말만 있었기 때문이다. ‘디지털노마드가 된다면 베를린의 힙한 곳이나 치앙마이의 트로피컬한 풍경의 야외에서 낮에는 노트북으로 일하고, 오후에는 관광을 다녀야지’라고 생각했다.&lt;/p&gt;
&lt;p&gt;2주간 내가 일하고 있는 곳은 지난 6월 독립한 나의 집이다. 첫 주에는 장점이 단점보다 많았다. 외출 준비를 하지 않아도 되고, 통근시간도 1분이고, 음악도 에어팟이 아니라 스피커로 크게 틀어도 되었다. 1-2주일이 되니 단점도 보이기 시작했다. 매일 커피와 음식은 내가 만들어야 했고, 설거지 등 집안일이 늘어났다. 또한 시간에 군더더기가 없어지면서 뇌를 사용하는 시간은 더 많아졌고, 휴게공간과 휴게시간을 정하기 애매해졌다.&lt;/p&gt;
&lt;p&gt;전무하던 곳에서 재택근무까지 시행하니, 일이 아닌 경우에도 ‘사회적 거리두기’를 하게 되었다. 대중교통을 타지 않아도 만날 수 있는 사람들은 직접 만나지만, 예정되어 있던 큰 모임들은 연기하고 주기적으로 만나는 모임의 사람들과 행아웃 영상통화를 하기 시작했다. 이쯤 되니 내가 집에 있는 시간은 주말 포함해서 일주일에 6일이 넘는다. 매달 나가는 주거비 아깝지 않게, 집에 정말 오래 있다.&lt;/p&gt;
&lt;p&gt;내가 집을 구하면서 가장 염두한 조건 중 하나는 하루당 가격이다. 제주도에 괜찮았던 게스트하우스는 하루에 인당 2만원을 받았었다. 한 달을 30일로 놓고 공간비와 관리비 포함해서 하루에 1만원대를 내는 곳을 찾으려 했고 현재의 집이 그렇다. 그리고 괜찮은 게스트하우스의 느낌이 나도록, 포근한 인테리어와 깔끔한 환경이 되도록 신경 썼다. 이미 에어비엔비 준비가 되어있다. 언젠가 집을 오래 비우게 될 때, 제주의 게스트하우스처럼 공간을 대여해줄 날을 고대하고 있다.&lt;/p&gt;
&lt;p&gt;이런 나의 공간에서 지난해 많은 사람들과 자주 나눈 활동은 집들이와 파티였다. 집순이이지만 사람 만나고 활동적인 것을 좋아하는 나에게 아주 즐거운 경험이었다. 독립을 하면서 집이 마음에 들어서 본격적으로 집순이가 되었는데, 요즈음의 시간은 나에게 새로운 집순이력을 요구하고 있다. 집에 있어야 하지만, 사람을 초대할 수도 파티를 할 수도 없다. 예전부터 꿈꿔왔지만, 요즘 들어 더욱 반려묘가 있다면 어떨지 생각한다.&lt;/p&gt;
&lt;p&gt;예약한 게임은 다음 주에나 나오고, 넷플릭스도 약간 권태기이다. 책은 이전부터 읽었지만, 집에 오래 있다고 집중시간이 배로 늘어나지 않는다. 그냥 집과 공간에 대한 생각을 하기 시작했다. ‘내 집 마련의 꿈이 이루어지면, 사람들은 무엇을 할까?’, ‘재택근무로 회사 공간의 월세가 아까운데, 공간을 줄이고 사원을 분산시키는 방법은 없나?’, ‘자동차는 공간일까, 캠핑카를 타면 어떤낌일까?’, ‘공간&lt;/p&gt;</content:encoded></item><item><title><![CDATA[숨과 삶]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/breath/</link><guid isPermaLink="false">https://kyoo32.github.io/breath/</guid><pubDate>Mon, 02 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;숨이 할 수 있는 동작은 생각보다 많다. 숨을 쉬다. 숨을 트다. 숨을 고르다. 숨을 죽이다. 숨을 모으다. 숨이 차다. 숨이 벅차다. 숨이 막히다. 숨이 가빠지다. 숨이 넘어가다. 그리고 숨이 동작하게 하는 신체기관의 종류도 생각보다 많다. 각 동작별로 기관의 종류도 다를지 모르겠다.&lt;/p&gt;
&lt;p&gt;평소에 코로 쉬는지 입으로 쉬는지 생각도 안 하는데, 요가를 할 때면 마치 아주 뜨겁거나 아주 차가운 음료가 식도와 위를 지나감을 알듯이, 나의 숨이 의식이 된다. 숨이 잘 의식될 때면, 코로 들어와 폐를 채우고 위장까지 닿으려고 하는 게 느껴진다. 잘 의식되는 것은 숨을 잘 쉬는 것인데, 이때의 요가는 더 편안해지고 더 시원해진다. 그래서 나는 스트레스가 있거나 컨디션이 안 좋을 때면, 침대에 그냥 누워서 깊은 호흡을 하기도 한다.&lt;/p&gt;
&lt;p&gt;반면 가끔은 어떤 경쟁심과 완벽주의가 나타나, 요가를 할 때 숨을 잘 쉬지 않는 나를 발견한다. 발견하면 다행이라, 자세가 조금 안 좋아지고 흐트러지더라도 호흡을 하려고 노력한다. 그런데 이를 발견하지 못하다 계속 요가를 하면, 집중력은 있지만 이내 한계를 만난다. 내 몸이 조각상이 되어버리고, 나는 열정 있는 조각사로 전락해버린다. 평소의 나는 열정은 있으나 호흡이 없는 사람이 되고 있는 건 아닌지, 요가를 한 후 자주 돌아보게 된다.&lt;/p&gt;
&lt;p&gt;요가를 하면 다 그런 건지, 다른 사람은 호흡과 요가를 어떻게 생각하는지 궁금했다. 최근에 아무튼 시리즈 중의 하나인 &amp;#x3C;아무튼, 요가&gt;를 읽게 되었다. 박상아 저자는 20대의 마지막 해 유학 간 뉴욕에서 우연히 요가에 빠져 요가강사가 된 사람이다. 현재는 운동으로 요가를 하는 사람과 큰 간격이 있지만, 그가 강사가 되기 위해 변화한 과정은 공감 가고 재미있었다. 그는 호흡을 이렇게 말한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;우리가 의식하고 있지 않지만 매일 매 순간 하는 것, 하지 않으면 생명 그 자체를 유지할 수 없는 것, 무의식적이기도 하면서 의식적이기도 한 것, 놀라면 가빠지고 편안하면 차분해지는 것, 모든 감정에 언제나 제일 먼저 반응하는 것, 집중과 명상 그리고 무아로의 여행으로 우리를 안내하는 것, 그리고 삶이 다했을 때 멈추는 것, 그것이 프라야나마, 즉 호흡이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 책을 읽으면서 알게 된 정보는, 요가 단계의 한 기준에서 호흡을 동작보다 더 어려운 단계로 치는 것이다. 또한 요가마다 호흡법이 다를 수 있고, 전문가 밑에서 제대로 배워 익혀야 한다는 것이다. 요가를 운동으로 하는 나로서는 어렵고 먼 이야기이다. 지금의 나는 그냥 평소에 숨을 잘 쉬고, 고르고, 모으려고 하고 있다. 가쁜 숨이든 차분한 숨이든 그냥 잘 받아들이고 잘 이어가려고 하고 있다.&lt;/p&gt;
&lt;p&gt;이쯤 되니 또 궁금해진다. 테드 창은 호흡을 어떻게 받아들이고, 숨에 대해 바라는 게 있을까? 테드 창은 작년에 무려 &amp;#x3C;숨&gt;이라는 SF소설을 쓴, 전 세계 과학 소설계의 보물이라는 찬사를 받는 사람이다. 지금은 어떤지 모르겠지만, 나는 그가 요가를 해본 게 아닐까 의심이 든다. 혹은 그가 요가를 하게 된다면, 굉장히 잘 맞을 것이고 겅중겅중 단계를 올라버릴지도 모른다고 생각한다.&lt;/p&gt;
&lt;p&gt;&amp;#x3C;숨&gt;은 SF소설 단편 모음집으로, 표제작인 숨은 한 개체의 숨 쉬는 환경과 기억법의 메커니즘에 대한 가정으로 시작한다. ‘물도 사마시는 데, 이러다 공기도 사 마시는 거 아니야?‘라는 한 번쯤 해보았을 생각에 대한 선택지가 될 수도 있다. 다수의 SF소설이 그렇겠지만, 이 단편을 처음 읽을 때의 충격과 신선함은 내 숨을 가빠지게 했다. 안 읽은 사람의 처음을 지켜주기 위해 내용을 미리 말할 수는 없지만, 나는 이 소설을 읽고 ‘숨을 거둔다’는 표현의 다른 의미를 생각하게 되었다.&lt;/p&gt;
&lt;p&gt;요가의 마지막엔 ‘사바사나’라는 자세를 한다. 송장 자세라고도 불리는 이 자세는 남아있는 모든 힘과 긴장을 내려놓고 나의 호흡과 몸의 느낌에 집중하면서 편안하게 누워있는 자세이다. 이때 나는 내 몸에 숨밖에 안 남은 느낌이 든다. 혹은 약간의 과장을 보태, 시냇물에 흘러가는 나뭇잎이 된 것 같다. 박상아님이 말한 ‘무아로의 여행’의 체험판 같은 것일 수도 있고, 테드 창이 저술한 소설의 끝부분 느낌일 수도 있다. 뭐가 됐든 지금 숨을 쉰다는 것에 감사하고 신비로울 뿐이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[일회용 데이터 줄이기; 질문의 시작]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/needless_data/</link><guid isPermaLink="false">https://kyoo32.github.io/needless_data/</guid><pubDate>Sun, 23 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;나는 다음 생에 인간으로 태어날 수 있다면, 호주 멜버른이나 미국 캘리포니아를 지원하겠다. 웃기게도 두 곳 모두 가보지 못했지만, 내가 원하는 삶의 이미지가 있는 곳이다. 온화하고 따뜻한 날이 많고, 개방적인 태도가 주를 이루며, 잔디 있는 주택과 넓은 바다가 있는 곳. 내가 원하는 삶은 땅이 넓고 기후가 좋아 재밌는 액티비티를 자주 하며, 좋은 사람살이 만큼 생각에 개방적이어서 생산적인 무언가를 만드는 것이다.&lt;/p&gt;
&lt;p&gt;그런데, 지난 두 해에 내가 접한 호주와 캘리포니아의 이미지는 재앙적인 불이 사람과 동물을 덮치는 모습이었다. 나는 충격을 받았지만, 이내 한국의 한여름 이상더위에 적응해 살아가는 것처럼 덤덤해졌다. 그러다 작년 말에 화제가 된 환경운동가 그레타 툰베리의 주장이자 책인 ‘No One Is Too Small to Make a Difference’를 알게되었다. 다수를 위하는 자신의 주장을 위해 활동하는 모습이 부럽기도 하고, 무던한 내가 부끄럽기도 했다.&lt;/p&gt;
&lt;p&gt;나는 아주 작지만 쉽고 가까운, 환경적인 물음을 던지고 더 나은 해답을 찾아보려고 한다. 따라서 이 글은 지속적인 활동의 덕을 보려고 쓰는 것이다. 오늘부터 물음이 끝날 때까지, 간헐적으로 우리 주변의 환경보호에 대해 이어지는 글을 써보려고 한다.&lt;/p&gt;
&lt;h4&gt;일회용 줄이기&lt;/h4&gt;
&lt;p&gt;여러 재앙적인 이벤트와 안타까운 사진을 통해 사람들이 얻은 생활방식은 일회용을 줄이려는 움직임이다. 종이컵, 플라스틱, 비닐봉지 등은 각각 텀블러, 종이, 에코백 등으로 교체되고 있다. 그런데 여기에 반대편의 물음도 많다. 종이컵 대신 쓰는 텀블러를 세척하는 물의 양이 종이컵 사용보다 많지 않은가? 플라스틱보다 종이가 재활용하기 쉬운가? 에코백은 몇 번을 써야 환경적인 효과가 있는가? 우후죽순 만들어지는 에코백은 정말 환경적인가? 등&lt;/p&gt;
&lt;p&gt;이런 다양한 많은 물음은 내가 답을 내기에 어렵다. 해답은 더 어렵다. 해답을 내도, 산업 전반적으로 적용할 수 있을지도 모르겠다. 그래서 내가 생각한 작지만 가까운 물음은 데이터다. 개인이 하찮은 데이터를 줄이는 게 환경에 도움이 될까?&lt;/p&gt;
&lt;h4&gt;일회용 데이터 줄이기?&lt;/h4&gt;
&lt;p&gt;현대국가 대부분의 사람들은 모바일이든 pc든 인터넷은 사용한다. 인터넷을 사용할 수 있는 곳에서는 와이파이는 필수품이며, 데이터는 공기처럼 당연하게 느껴진다. 인터넷 사용자는 정보를 열람하기도 하지만, 데이터를 남기고 저장하기도 한다. 이 블로그처럼 글일수도 있고, 영수증 정보, 인스타그램 사진, 틱톡 동영상, 유투브 스트리밍 등 종류는 다양하다. 게다가 이런 환경에서 데이터에 접근하는 것은 쉽다. 에코백을 챙기고 텀블러를 씻는 것에 비하면, 침대에서 한 손가락만 쓸 만큼 굉장히 쉽다.&lt;/p&gt;
&lt;p&gt;여기서 질문이 생긴다. 네트워크에 접근할 수 있는 지구의 모든 사람들이 개인의 불필요한 데이터를 한번에 지우면, 그 크기는 얼마나 될까? 이로써 기업이 얻을 수 있는 데이터베이스 절감 비용은 얼마나 될까? 그리고 지구의 환경에 미치는 영향은 좋은 쪽일까, 아니면 별 효과가 없을까? 내 마음대로 ‘개인이 개인의 불필요한 데이터를 지우는 행위’를 ‘일회용 데이터 줄이기’라고 칭하며, 앞으로 이 질문에 답을 해보려고 한다. ‘일회용 데이터’는 일회용품(disposable)과 다르게, 눈에 잘 보이지 않으며 대체할 수 있고 없어도 무방하다.&lt;/p&gt;
&lt;p&gt;(영어로는 어떤 단어를 써야할지 아직 모르겠다.)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[나의 블로그 연대기]]></title><description><![CDATA[…]]></description><link>https://kyoo32.github.io/my_blog_history/</link><guid isPermaLink="false">https://kyoo32.github.io/my_blog_history/</guid><pubDate>Sun, 16 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;글을 쓰는 일은, 심지어 타인에게 공개한다면, 어렵지만 일종의 뿌듯함이 있다. 글을 쓰며 하나의 생각을 완결되게 만드는 행위가 그렇고, 그 행위가 기억속에서 사라진 후 완전한 타인으로 나의 글을 다시 마주할 때 특히 그렇다.&lt;/p&gt;
&lt;p&gt;나의 글쓰기는 전체 공개이든 친구 공개이든 개인소장이든, 20대 이후 어느 정도 일정한 양을 지키고 있다. 나에게 글쓰기는 생각을 정리하고 감정을 분출할 수 있는 식사 같은 필수적인 활동이다. 나에게 먹는 게 그러하듯 글쓰기의 중심은 언제나 나였다. 타인공개글은 글의 생각이 읽는 사람에게 좋을 수도 있겠다는 마음이 있었을 뿐이지, 가장 중요한 독자는 물론 나였다. 이기적인 작가이지만, 나에게 큰 도움이 되었다.&lt;/p&gt;
&lt;p&gt;그런데 이제 다른 사람들도 내 글을 재미있게 읽고, 무언가 좋은 걸 얻어갈 수 있으면 좋겠다. 갑자기 글쓰기 난이도가 너무 어려워졌지만, 새로운 마음으로 글을 쓸 플랫폼을 찾다보니 나의 지난 블로그들을 들어가보게 되었다. 너무 낯설다. 어떤 곳은 지금의 나로서 과연 그 글의 글쓴이가 정말 내가 맞나 싶을 정도다. 해킹이 의심된다.&lt;/p&gt;
&lt;h4&gt;2016년 2-3월의 티스토리 : &lt;a href=&quot;https://letsedgeup.tistory.com/category/BlogDiary_%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%9D%BC%EA%B8%B0&quot;&gt;tistory.letsedgeup&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;100%학생이던 2016년 이맘때쯤, 공부한 것과 주로 자기개발적인 에세이를 쓴 곳인데, 글은 몇 개 없다. 처음의 의지가 사라지기 전에, 힘을 빡 준 멋진 글을 쓰고 싶었고 힘이 빨리 빠진 것 같다. 뭔가 과거의 내가 기특(?)하기도 부끄럽기도 하고, 현재의 나는 좀 슬프기도 웃기기도 하다.&lt;/p&gt;
&lt;h4&gt;2014-2016년의 페이스북 페이지 : 그날 거기서 한 생각&lt;/h4&gt;
&lt;p&gt;100%학생이던 시기에 여행을 다니면서 한 생각이나 느낌을 글로 적은 곳이었다. 여행풍경 사진과 중/장문의 글을 올리기엔 아직도 페이스북이 제일 좋은 것 같다. 전체공개를 하고 싶은데 개인 계정은 공개되는 게 싫어서, 페이지를 만들어서 사진과 글을 올리곤 했다. 현재는 완전 비공개 상태인데, 이렇게 가끔씩 들어가서 나 혼자 보면 너무 감성 돋는다… 아마도 가장 감수성이 풍부할 때였고, 새로운 곳으로 여행도 많이 다녔으니, 소중하지만 소름돋는 생각도 많다.
&lt;img src=&quot;https://user-images.githubusercontent.com/7741862/74610116-8b45a280-5133-11ea-91a0-da3c35b3d6b7.png&quot; alt=&quot;Screen Shot 2020-02-17 at 2 41 35&quot;&gt;&lt;/p&gt;
&lt;h4&gt;2016-2019년의 브런치 : &lt;a href=&quot;https://brunch.co.kr/@jeolmiing#info&quot;&gt;brunch.@jeolmiing&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;사회생활을 시작하는 친구들끼리 공동으로 운영했던, 책모임 후기/책 리뷰 블로그 였다. 그래도 가장 최근까지 쓴 글이고, 현재도 모임이 지속되고 있어서 덜 낯설다. 함께 글을 쓰면서 재밌는 점도 불편한 점도 있었지만, 이 모임의 친구들과 낯선 시기를 잘 기록하고 보내서 감사한 마음이다. 다양한 글체와 생각이 있어서 그랬는지, 가장 큰 흥행(?)을 맛보기도 했다. 또 지난 3년을 정리하는 브런치북도 내보는 등, 혼블로그로서 경험할 수 없는 다양한 일이 있어서 즐거웠다.&lt;/p&gt;
&lt;h4&gt;🎉2020년, 오늘부터의 깃헙페이지🎉&lt;/h4&gt;
&lt;p&gt;지난 블로그들을 거치면서, 재미있게 읽히는 유익하고 좋은 글을 쓰고 싶어졌고 쓸 것이다. 그 내용이 지식일 수도 있고, 책이나 여행 후기일 수도 있고, 실용적인 정보일 수도 있다. 블로그 플랫폼도 기술의 발전에 따라 어떤 흥망성쇠가 있는 것 같은데, 기술 발전의 한 축인 깃헙은 안망하겠지 라는 생각을 어렴풋이 가지고(설마_) 깃헙블로그를 숙제하듯 열였다. 그리고 공동블로그는 아니지만, 함께 글을 쓰는 좋은 사람들이 있어 그나마 꾸준하지 않을까 기대가 된다.&lt;/p&gt;</content:encoded></item></channel></rss>