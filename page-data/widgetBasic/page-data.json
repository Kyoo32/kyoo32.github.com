{"componentChunkName":"component---src-templates-blog-post-js","path":"/widgetBasic/","result":{"data":{"site":{"siteMetadata":{"title":"KyooBlog"}},"markdownRemark":{"id":"e4dd049e-8f2f-595c-8207-4bdba7ab6756","excerpt":"It is the summary of WWDC20 Session ‘Meet WidgetKit(10028)‘. 1. Definition and Goal of Widget Definition A widget elevates key content from your app and…","html":"<blockquote>\n<p>It is the summary of WWDC20 Session ‘Meet WidgetKit(10028)‘.</p>\n</blockquote>\n<h4>1. Definition and Goal of Widget</h4>\n<h5>Definition</h5>\n<p>A widget elevates key content from your app and displays it where people can see it at a glance on iPhone, iPad, and Mac. Useful and delightful, widgets can also help people personalize their iPhone Home screens in unique ways.</p>\n<h5>Three goals of Widget</h5>\n<ul>\n<li>\n<p>Glanceable</p>\n<ul>\n<li>Widget is not a mini app. The content is the focus.</li>\n<li>People only spend a few moments on their Home screen before they springboard off to somewhere else. They shouldn’t need to interact with or do anything more than take a quick peek to get the most value out of your widget.</li>\n</ul>\n</li>\n<li>\n<p>Relevent</p>\n<ul>\n<li>Especially on our mobile platforms — where space is at a premium — we really wanted a way to make sure the right widget is up and available as soon as you need. Smart Stacks are a collection of widgets that will automatically rotate to show the right widget at the top. We used on-device intelligence to help show the right thing at the top of the stack.</li>\n<li>As a developer, you can help drive this using Siri Shortcuts donations, the system that we’ve been building upon in previous years. </li>\n</ul>\n</li>\n<li>\n<p>Personalization</p>\n<ul>\n<li>Support as many sizes as possible.</li>\n</ul>\n</li>\n</ul>\n<h4>2. How it Works</h4>\n<ul>\n<li>\n<p>Mulitplatform</p>\n<ul>\n<li>It runs across iOS, iPadOS, and macOS.</li>\n<li>built entirely with SwiftUI. SwiftUI also makes it super easy to support features like Dynamic Type and Dark Mode nearly automatically.</li>\n</ul>\n</li>\n<li>\n<p>Background</p>\n<ul>\n<li>The average person goes to the Home screen more than 90 times a day and only spends a few moments there. The last thing you want to see is your Home screen full of loading spinners.</li>\n<li>WidgetKit extensions are background extensions that return a series of view hierarchies in a timeline. This avoids the entire “launch a process, load, and then present a view.” They are ready to go and immediately glanceable.</li>\n</ul>\n</li>\n<li>\n<p>Stateless UI</p>\n<ul>\n<li>Not support scrolling within the widget, interactive elements like switches and other system controls</li>\n<li>No videos or animated images</li>\n<li>Easily tap on the widget and deep link into your app.</li>\n</ul>\n</li>\n</ul>\n<h4>3. Components of Widget</h4>\n<h5>Defining</h5>\n<ul>\n<li>kind</li>\n<li>\n<p>configuration </p>\n<ul>\n<li>static / intent (dynamic)</li>\n</ul>\n</li>\n<li>\n<p>supportedFamilies</p>\n<ul>\n<li>small / medium / large</li>\n</ul>\n</li>\n</ul>\n<h5>Placeholder</h5>\n<ul>\n<li>Placeholder UI is the default content of your widget. It should be a representation of your widget kind, but nothing more than that. There should not be any user data in this UI. </li>\n<li>The other important thing to note is this UI is retrieved only sparingly.There are no guarantees on when that will occur.Typically we will only ask for a new placeholder UI on a device environment change. For example, if the dynamic typesetting of the device changes.</li>\n<li>Great placeholder UIs show a representation of what your kind of widget is.</li>\n</ul>\n<h5>Views</h5>\n<p>There are three types of UI experiences you need to think about</p>\n<ul>\n<li>Placeholder</li>\n<li>\n<p>Snapshot</p>\n<ul>\n<li>where the system needs to quickly display a single entry</li>\n</ul>\n</li>\n<li>Timeline</li>\n</ul>\n<h5>Timeline</h5>\n<ul>\n<li>Timelines are a combination of views and dates that are returned, which allow you to say at what time a particular view should be shown.</li>\n<li>Timelines should typically be returned for a day’s worth of content.</li>\n</ul>\n<h5>Reloads</h5>\n<ul>\n<li>Reloads are where the system will wake up your extension and ask for a new timeline for each widget placed on the device.</li>\n<li>Reloads help ensure that your content is always up-to-date for your user.</li>\n<li>The system will take into account your ReloadPolicy and determine the best time to reload your widget.</li>\n<li>Widgets viewed frequently will receive more reloads. Widgets viewed infrequently will receive fewer reloads.</li>\n<li>The system will also force reloads for whenever a device environment changes. The system will determine the best time to reload your widget but there are also other events which may need you to ask the system for a reload from your app.</li>\n</ul>\n<h5>Feeding Intelligence</h5>\n<ul>\n<li>The system can intelligently rotate to the most relevant widget and your app and widget can help feed this intelligence.</li>\n<li>Donating Shortcuts</li>\n<li>TimelineEntryRelevance API: annotate timeline entries with relevance values</li>\n</ul>","frontmatter":{"title":"Basic of Widget","date":"July 06, 2020","description":"This summarizes WWDC20 Session 'Meet WidgetKit(10028)'."}}},"pageContext":{"slug":"/widgetBasic/","previous":{"fields":{"slug":"/changing_people/"},"frontmatter":{"title":"변화하는 사람들"}},"next":{"fields":{"slug":"/widgetBasic2/"},"frontmatter":{"title":"Basic of Widget2"}}}}}