{"componentChunkName":"component---src-templates-blog-post-js","path":"/swiftUIEssential/","result":{"data":{"site":{"siteMetadata":{"title":"KyooBlog"}},"markdownRemark":{"id":"5c0c796e-5fe0-56d0-93be-9ecef5459784","excerpt":"This is the summary of WWDC20 Session ‘App essentials in SwiftUI(10037)‘. App Essentials; how views, scenes and apps work together You can now build an entire…","html":"<blockquote>\n<p>This is the summary of WWDC20 Session ‘App essentials in SwiftUI(10037)‘.</p>\n</blockquote>\n<h5>App Essentials; how views, scenes and apps work together</h5>\n<blockquote>\n<p>You can now build an entire app with just SwiftUI. </p>\n</blockquote>\n<h6>Views, Scenes, and Apps</h6>\n<ul>\n<li>\n<p>Views</p>\n<ul>\n<li>Views are important because each view defines a piece of your UI. When you look at an app everything you see is a view. </li>\n<li>But not all views belong to the same app since apps do not have complete control over the entire screen.</li>\n</ul>\n</li>\n<li>\n<p>Scenes</p>\n<ul>\n<li>In SwiftUI we refer to these distinct regions as scenes.</li>\n<li>Instead the platform controls how apps are presented showing pieces of apps in distinct regions. </li>\n<li>A window is the most common way that a scene’s content is shown on screen. Some platforms like iPadOS can show multiple windows side by side. Other platforms such as iOS, watchOS and tvOS prefer to show only a single full screen window for each app.</li>\n</ul>\n</li>\n<li>\n<p>Apps</p>\n<ul>\n<li>Collections of scenes make up the entire content of an app. </li>\n</ul>\n</li>\n<li>\n<p>Together</p>\n<ul>\n<li>Together apps, scenes and views form a unified hierarchy of ownership.</li>\n<li>The app contains the scenes and the scenes contain views. Our app declaration looks similar to a custom view declaration.</li>\n<li>For example, both views and apps are able to declare data dependencies. Both views and apps also declare a body property defining their user interface content.</li>\n</ul>\n</li>\n</ul>\n<h6>Understanding Scenes</h6>\n<p>To really understand how this app works, need to know WindowGroup scene which manages user interface.</p>\n<ul>\n<li>\n<p>Models &#x26; States</p>\n<ul>\n<li>An app can provide a shared model for each scene to use, but the state of the views in those scenes will be independent.</li>\n<li>WindowGroup provides this functionality for app automatically on iPadOS. Each of windows is reflecting a different state in the interface.</li>\n</ul>\n</li>\n<li>\n<p>a new view modifier, Navigation title</p>\n<ul>\n<li>Each of windows is showing the name of my app as well as detail labels.</li>\n<li>Navigation title on iOS can be used to populate the title in the navigation bar and the app switcher.</li>\n</ul>\n</li>\n<li>\n<p>Scenes especially on MacOS</p>\n<ul>\n<li>It’s very common for apps to support multiple windows by using WindowGroup in your app. Besides supporting multiple Windows macOS also supports grouping its windows together. Via the window menu you can merge open windows into a single tabbed interface. SwiftUI provides this automatically.</li>\n<li>SwiftUI will provide a menu item in the file menu, which supports creating new seen instances.</li>\n</ul>\n</li>\n<li>\n<p>The life cycle of scenes</p>\n<ul>\n<li>They are managed by the platform they’re running on.</li>\n<li>On platforms which support multiple windows such as macOS and iPadOS, WindowGroup can instantiate multiple children.</li>\n<li>Since the platform is in charge of the lifecycle of scenes, there is a new property wrapper this year to help you manage restoration of your view state. The SceneStorage property wrapper can be used to persist your view state. It takes a unique key which identifies the state to be stored. This state will then be automatically saved and restored at the appropriate times by SwiftUI.</li>\n</ul>\n</li>\n</ul>\n<h6>Customizing Apps</h6>\n<ul>\n<li>\n<p>New Kind App: Document based apps</p>\n<ul>\n<li>It automatically manages opening, editing, and saving document based scenes.</li>\n</ul>\n</li>\n<li>\n<p>the new Settings scene type available on macOS</p>\n<ul>\n<li>The commands API is powerful and flexible using the same declarative state driven programming model used in views, scenes and apps</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"App Essentials In SwiftUI","date":"August 03, 2020","description":"This summarizes WWDC20 Session 'App essentials in SwiftUI(10037)'"}}},"pageContext":{"slug":"/swiftUIEssential/","previous":{"fields":{"slug":"/convenient/"},"frontmatter":{"title":"일상의 편리함과 감성적 불편함"}},"next":{"fields":{"slug":"/swiftUIEssential2/"},"frontmatter":{"title":"Data Essentials In SwiftUI"}}}}}