{"componentChunkName":"component---src-templates-blog-post-js","path":"/widgetBasic2/","result":{"data":{"site":{"siteMetadata":{"title":"KyooBlog"}},"markdownRemark":{"id":"5607e48b-f98f-59e2-8fc2-ca54648b9a58","excerpt":"This is the summary of WWDC20 Session ‘Meet WidgetKit(10028)‘. 1. How to Design Widget Widget UX in iOS14 The information your widget chooses to surface can be…","html":"<blockquote>\n<p>This is the summary of WWDC20 Session ‘Meet WidgetKit(10028)‘.</p>\n</blockquote>\n<h4>1. How to Design Widget</h4>\n<h5>Widget UX in iOS14</h5>\n<ul>\n<li>The information your widget chooses to surface can be more up to date and contextual than ever and drag and drop editing gives people direct control over their widgets in an intuitive and flexible way.</li>\n<li>People can now add these new widgets directly onto their home screen pages.</li>\n<li>Smart stacks dynamically change and adapt to how you use them. Based on your behavior and context, a smart stack will automatically rotate to show you the most relevant widget at a given time. So the information you’re looking for is already there before you even have to lift a finger.</li>\n</ul>\n<h5>Three Principles</h5>\n<p>To create a great widget you need to understand what the most useful information and experiences are that people return to your app for.</p>\n<ul>\n<li>Personal: they can allow for a deeper emotional connection with a piece of your app or an experience that it enables for someone.</li>\n<li>Informational: Surfacing the right information can save people from doing commonly repeated actions in your app.</li>\n<li>Contextual: Context helps surface the right information at the right moment and allows for a better experience that at its best feels like it’s magically predicting someone’s needs and next steps.</li>\n</ul>\n<h5>Editing</h5>\n<ul>\n<li>This is an important concept to think about in the ideation phase because it might change how much information you try to put into a single widget.</li>\n<li>In iOS 14, your widgets will jiggle just like apps do in edit mode and you can tap on a widget here to flip it around and see what it allows for you to edit.</li>\n<li>iOS 14 let you add as many additional widgets as you want and edit each one to show a different set of information. One of the best parts of this feature is that it eliminates the need to create complex widget layouts that represent different entities of information combined into a single widget and instead lets a person choose how much information they want to see from your app by adding several widgets and editing them to show just what they want to keep track of.</li>\n<li>Consider what options you could offer to people that would maximize the utility and flexibility that people might get out of your widget.</li>\n</ul>\n<h5>Multiples</h5>\n<p>Another thing to consider in the ideation process is deciding on if you should offer multiple widgets</p>\n<h4>2. Decide spec</h4>\n<h5>Size &#x26; Interactions</h5>\n<ul>\n<li>\n<p>Small</p>\n<ul>\n<li>The small widget is all about the most useful piece of content from your app in a size that constrains how much content can actually fit in it. </li>\n<li>The small widget supports a single tap target. Tapping it should deep link to the content that’s on the widget. Where you deep link to will depend on how your app is structured.</li>\n</ul>\n</li>\n<li>\n<p>Medium &#x26; Large</p>\n<ul>\n<li>Our medium and large widgets are familiar shapes. </li>\n<li>Both sizes fit more content and support multiple tap targets. Tapping a piece of content in a medium or large widget should also deep link you to the displayed content that’s on the widget</li>\n</ul>\n</li>\n</ul>\n<h5>Three Tap Styles</h5>\n<ul>\n<li>\n<p>Fill Style</p>\n<ul>\n<li>Fill style is best for when you’re deep linking into a single piece of content.</li>\n<li>Every small widget uses fill style since it only supports one tap target.</li>\n</ul>\n</li>\n<li>\n<p>Cell Style</p>\n<ul>\n<li>Cell style is best for when you’re selecting a piece of content in a widget that lives in its own shape</li>\n</ul>\n</li>\n<li>\n<p>Content Style</p>\n<ul>\n<li>Content style is great for when you’re selecting a piece of content that lives un-contained in a widget.</li>\n</ul>\n</li>\n</ul>\n<h5>Content&#x26;Personality</h5>\n<ul>\n<li>Ask yourself questions like “What are people looking for when they launch my app?“. Also find distinct items of information that people find useful in your app.</li>\n<li>When designing our widget set, we looked at finding personality through how our apps look. </li>\n<li>Another approach for finding personality is taking inspiration from your app icon.</li>\n</ul>\n<h5>Partterns</h5>\n<ul>\n<li>\n<p>Layout Set Pattern &#x26; Guide</p>\n<ol>\n<li>a layout that expands across all three sizes</li>\n<li>a layout that is completely unique across sizes</li>\n<li>Make sure not to scale up your smaller widget into your larger widget.</li>\n<li>Think about the information you’re working with and what makes the most sense for each size.</li>\n<li>If you don’t have more information to show in your larger sizes though, it’s fine to only support specific sizes of your idea. All sizes for an idea aren’t required.</li>\n</ol>\n</li>\n</ul>\n<h5>Frame Layout Pattern &#x26; Guide</h5>\n<ul>\n<li>\n<p>Standard</p>\n<ul>\n<li>There are mix of single item and denser multi-item summary layouts. These patterns serve as a helpful starting place and a good way to try out an idea in a format that already works well.</li>\n</ul>\n</li>\n<li>\n<p>Custom</p>\n<ul>\n<li>Follow the default sixteen point layout margins across all sizes to make sure the content in your widget feels consistent when it’s place next to other widgets.</li>\n<li>For layouts with graphical shapes like circles and inset platters use tighter eleven point margins across all sizes. </li>\n<li>Shape corners that sit close to the edges of your widget should appear concentric with the widgets corner radius. Since the widgets corner radius changes across different device sizes, we provide a Swift UI container that you can assign to shapes in your widget that will make them concentric with the widgets corner radius without needing to manually specify corner radius values.</li>\n</ul>\n</li>\n</ul>\n<h5>Other Design Guide</h5>\n<ul>\n<li>\n<p>Font</p>\n<ul>\n<li>You should use SF Pro or other variants of San Francisco that are available like SF Mono and SF Pro Rounded.</li>\n<li>If a custom font is important to how your widget represents its brand or personality make sure it’s applied in a way so that your widget still feels at home alongside other widgets.</li>\n</ul>\n</li>\n<li>\n<p>DarkMode</p>\n<ul>\n<li>A widget should look great in both light and dark appearance modes.</li>\n</ul>\n</li>\n<li>\n<p>Placeholder</p>\n<ul>\n<li>Every widget must provide a placeholder which is shown when the system has no way of displaying your widget’s data. </li>\n<li>You should show the base graphical elements in this state and block in areas of text where your information is shown in the layout. This way, when the system goes from place holder to the proper data the content can replace the static elements without having the layout or color shift around.</li>\n</ul>\n</li>\n<li>\n<p>Logo</p>\n<ul>\n<li>You should only use a logo in your widget if your app is an aggregator of content from different sources like these examples here. To keep this treatment consistent across different widgets, your logo should always sit in the top right corner.</li>\n<li>Avoid using word marks in the space and anywhere else in your widget.</li>\n<li>Another thing to avoid is putting your app icon in your widget.</li>\n</ul>\n</li>\n<li>\n<p>Etc</p>\n<ul>\n<li>Avoid putting your app name in your widget as it will feel redundant with the app label that already appears underneath of it on the home screen.</li>\n<li>Don’t put text that instructs a user or talks to them, instead, if you feel there’s something important to communicate do it in a graphical way.</li>\n<li>When displaying chronological information on a Widget, don’t use language like “last updated” or “last checked”.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Basic of Widget2","date":"July 13, 2020","description":"This summarizes WWDC20 Session 'Design Great Widget(10103)'."}}},"pageContext":{"slug":"/widgetBasic2/","previous":{"fields":{"slug":"/widgetBasic/"},"frontmatter":{"title":"Basic of Widget"}},"next":null}}}